{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#welcome-to-apollo-automation-docs","title":"Welcome to Apollo Automation Docs!","text":"<p>This will be a location for troubleshooting and how to guides. If you have a question please email us at support@apolloautomation.com or jump in our Discord.</p>"},{"location":"#frequent-links","title":"Frequent Links:","text":"<ul> <li>Getting your sensor connected to Home Assistant</li> <li>Tuning your MSR-2 radar</li> <li>Setting up zones on the MTR-1</li> <li>Discord (Support, community, updates, live stream)</li> <li>YouTube ( Tutorials, live stream )</li> </ul>"},{"location":"#what-is-apollo-automation","title":"What is Apollo Automation?","text":"<p>Apollo Automation is a small startup dedicated to creating high-quality, affordable, and community-driven home automation hardware. What started as a side project among friends in Lexington, KY, quickly grew into a full-fledged business. Named after Trevor\u2019s dog, Apollo, our first sensor was born out of frustration with existing products. Today, we continue to uphold our core values: building our products in-house, maintaining transparency and accessibility, and working closely with our community. You can always reach us directly, and we also host a monthly livestream on our Discord and YouTube channels to stay connected and engaged with our users.</p>"},{"location":"#what-do-we-offer","title":"What do we offer?","text":"<p>We strive to build quality products that solve real problems in home automation. Our focus is on innovation rather than imitation, and we\u2019re proud to offer some of the best support in the industry. As a small, agile team, we are deeply committed to growing our community of users and expanding our manufacturing capabilities.</p>"},{"location":"contact/","title":"Contact Us","text":""},{"location":"contact/#contact-us","title":"Contact Us","text":""},{"location":"contact/#our-team","title":"Our Team","text":""},{"location":"contact/#shop-test","title":"Shop Test","text":""},{"location":"contact/#support","title":"Support","text":""},{"location":"products/air1/calibrating-co2/","title":"CO2 Calibration - The Quick method - Desktop Only not mobile","text":""},{"location":"products/air1/calibrating-co2/#this-article-will-guide-you-through-a-simple-calibration-of-your-co2-sensor-for-any-apollo-automation-device","title":"This article will guide you through a simple calibration of your CO2 sensor for any Apollo Automation device!","text":"<ol> <li>Go to your home assistant dashboard and hit the letter \"e\" - It will pop up with an entity filter and here we will type in \"Calibrate CO2\" and select the correct device. *HINT* If you cannot get this menu to pop-up, click somewhere on the home assistant dashboard then press your \"e\" key **HINT** </li> <li>DO NOT RUSH THIS  Go Plug your sensor in outside and let it sit for 5 minutes or more to get normalized readings DO NOT RUSH THIS</li> <li> <p>Click on the button that says \"PRESS\" and then you are done. </p> <ol> <li>Go get your sensor from outside and plug your sensor in wherever you want it!</li> </ol> </li> </ol>"},{"location":"products/air1/faq/","title":"FAQ","text":"<p>1. What sensors are included in the AIR-1?</p> <p>\u2022   The AIR-1 includes sensors for PM1, PM2.5, PM4, PM10 (particulate matter), VOC (volatile organic compounds), NOx (nitrogen oxides), temperature, and humidity. Optional sensors include CO2 and barometric pressure.</p> <p>2. What does the AIR-1 measure?</p> <p>\u2022   The AIR-1 measures a variety of air quality metrics, including particulate matter (dust, pollen, etc.), VOCs, NOx, temperature, and humidity. The optional CO2 sensor can track carbon dioxide levels, and the pressure sensor helps provide more accurate CO2 readings.</p> <p>3. How do I connect the AIR-1 to Home Assistant?</p> <p>\u2022   The AIR-1 connects to Home Assistant through ESPHome using WiFi. Once connected, you can view sensor data, configure the device, and create automations directly from Home Assistant.</p> <p>4. Does the AIR-1 require cloud connectivity or a subscription?</p> <p>\u2022   No, the AIR-1 is fully local and does not require any cloud services or subscriptions. All data is processed and stored locally via your Home Assistant setup, ensuring privacy and control over your data.</p> <p>5. What are common use cases for the AIR-1?</p> <p>\u2022   The AIR-1 is ideal for monitoring indoor air quality, such as tracking dust levels in woodworking shops, ensuring optimal air quality during sleep, or automating air purifiers when certain thresholds are met. The CO2 sensor is particularly useful for identifying high CO2 levels, which can affect sleep and concentration.</p> <p>6. How do I set up automations with the AIR-1?</p> <p>\u2022   Using Home Assistant, you can set up automations based on the AIR-1\u2019s sensor readings. For example, you can automate an HVAC fan to run when CO2 levels are high, or trigger notifications when particulate matter reaches unhealthy levels.</p> <p>7. How does the optional CO2 sensor work?</p> <p>\u2022   The optional CO2 sensor (SCD-40) measures carbon dioxide levels and helps you understand when CO2 concentrations in a room become too high, which can cause fatigue, drowsiness, and poor air quality. It\u2019s particularly useful in offices, bedrooms, and other enclosed spaces.</p> <p>8. What is particulate matter (PM) and why is it important?</p> <p>\u2022   Particulate matter (PM) refers to tiny particles in the air that can be harmful when inhaled. The AIR-1 measures various sizes of particulate matter (PM1, PM2.5, PM4, PM10), helping you track dust, pollen, and other particles that affect air quality. It\u2019s especially useful for people with allergies or respiratory conditions.</p> <p>9. What is VOC and why should I monitor it?</p> <p>\u2022   VOCs (volatile organic compounds) are chemicals that can be emitted from everyday items like cleaning products, paints, and furniture. Prolonged exposure to high levels of VOCs can affect indoor air quality and health. The AIR-1\u2019s VOC sensor helps you monitor these levels and take action when necessary, such as increasing ventilation.</p> <p>10. What is NOx and why is it measured?</p> <p>\u2022   NOx (nitrogen oxides) are harmful gases that contribute to air pollution and can affect respiratory health. The AIR-1 measures NOx levels, allowing you to keep track of indoor air quality and make adjustments if necessary.</p> <p>11. How accurate are the air quality readings from the AIR-1?</p> <p>\u2022   The AIR-1 uses a high-quality SEN55 sensor with a 10-year lifespan, designed for continuous use. Its readings are highly accurate for particulate matter, VOCs, and NOx. However, keep in mind that the ESP32-C3 generates some heat, which may require you to apply a temperature offset for the most accurate readings.</p> <p>12. How can I use the RGB LED for notifications?</p> <p>\u2022   The RGB LED on the AIR-1 can be customized to show different colors for different events. For example, you can set it to flash red when air quality is poor, green on trash night, or blue when CO2 levels are safe. You can configure these notifications through Home Assistant.</p> <p>13. How do I update the firmware on the AIR-1?</p> <p>\u2022   Firmware updates can be done over-the-air (OTA) using ESPHome. You will receive notifications when new firmware is available, and you can install updates directly through Home Assistant.</p> <p>14. How do I calibrate the CO2 sensor?</p> <p>\u2022   The CO2 sensor comes pre-calibrated, so you don\u2019t need to perform any manual calibration. However, you can recalibrate the sensor through ESPHome if needed.</p> <p>15. Does the AIR-1 work outdoors?</p> <p>\u2022   The AIR-1 is primarily designed for indoor use. It could be used outdoors in a sheltered environment, but it is not weatherproof. If you need outdoor air quality monitoring, ensure the device is protected from the elements.</p> <p>16. What is the power source for the AIR-1?</p> <p>\u2022   The AIR-1 is powered via a USB-C connection. It can be plugged into any standard wall outlet using a 5V adapter, and the USB-C port allows for easy powering without additional adapters.</p> <p>17. How does the pressure sensor help with CO2 readings?</p> <p>\u2022   The barometric pressure sensor (DPS310) enhances the accuracy of CO2 readings by compensating for changes in altitude and atmospheric pressure, ensuring more reliable measurements of CO2 levels in different environments.</p> <p>18. What can I do with the Bluetooth tracker on the AIR-1?</p> <p>\u2022   The built-in Bluetooth tracker can be used to track Bluetooth devices in your home, such as phones, tablets, or Bluetooth beacons. This allows for automations based on device proximity, like turning on lights when your phone is nearby or triggering alerts when a device leaves the area.</p> <p>19. Can I integrate multiple AIR-1 sensors in my smart home?</p> <p>\u2022   Yes, you can have multiple AIR-1 sensors in your Home Assistant setup. Each sensor will be recognized as a separate entity, allowing you to monitor air quality across different rooms or spaces simultaneously.</p> <p>20. How customizable is the AIR-1?</p> <p>\u2022   The AIR-1 is fully customizable via ESPHome. You can adjust sensor settings, create automations, modify reporting intervals, and even customize the RGB LED and piezo buzzer. Additionally, we provide open-source CAD drawings and code for further customization.</p> <p>21. How frequently does the AIR-1 report data?</p> <p>\u2022   The reporting frequency for each sensor is adjustable via ESPHome. You can choose to have data reported as frequently as every second, or adjust intervals to save power and reduce data traffic.</p> <p>22. Does the AIR-1 require specific software?</p> <p>\u2022   The AIR-1 is designed to work seamlessly with Home Assistant through ESPHome. All configuration, monitoring, and automation setups are done through these platforms.</p> <p>23. Is the AIR-1 compatible with other smart home platforms?</p> <p>\u2022   While the AIR-1 is optimized for Home Assistant and ESPHome, you may be able to integrate it into other smart home platforms using custom configurations or MQTT, but Home Assistant remains the primary platform.</p> <p>24. What\u2019s the difference between the AIR-1 and other air quality sensors?</p> <p>\u2022   The AIR-1 is unique because it offers local control with no cloud or subscription required. It also provides a wide range of sensor data (PM, VOC, NOx, CO2, temperature, humidity) in a compact, affordable package. The addition of the RGB LED, piezo buzzer, and open-source nature makes it highly customizable.</p> <p>25. What are the optional add-ons for the AIR-1?</p> <p>\u2022   The AIR-1 offers two optional add-ons: a CO2 sensor (SCD40) and a barometric pressure sensor (DPS310). These can be added to enhance air quality monitoring and improve the accuracy of CO2 readings.</p> <p>26. What\u2019s in the box?</p> <p>\u2022   The AIR-1 comes with the fully assembled board and case, a USB-C power cable, and access to all our documentation, open-source code, and CAD models. You\u2019ll also receive a sticker of Apollo, our mascot.</p> <p>27. How do I install the AIR-1?</p> <p>\u2022   Installation is easy. Simply plug the AIR-1 into a wall outlet using the USB-C cable, connect it to your Home Assistant through ESPHome, and configure the settings as desired. Detailed setup instructions are available in our documentation.</p> <p>28. What is the warranty on the AIR-1?</p> <p>\u2022   The AIR-1 comes with a one-year warranty. If you encounter any issues, we provide support via email, Discord, and our community channels to ensure you\u2019re satisfied with the product.</p> <p>29. Can the AIR-1 be used to monitor 3D printer fumes?</p> <p>\u2022   Yes, the AIR-1 can monitor air quality around 3D printers, especially particulate matter (PM) and VOCs emitted during the printing process. It can trigger alerts or automations when levels become unhealthy.</p> <p>30. How long does it take to set up the AIR-1?</p> <p>\u2022   Setup typically takes around 10-15 minutes. Once powered and connected to WiFi, it can be configured quickly through ESPHome and Home Assistant.</p> <p>31. What is the temperature offset needed due to heat from the ESP32-C3?</p> <p>\u2022   The ESP32-C3 generates some heat, which may slightly affect temperature readings. We recommend applying a temperature offset between 2\u00b0C to 6\u00b0C, depending on your environment, to get more accurate temperature data.</p> <p>32. How secure is the AIR-1?</p> <p>\u2022   The AIR-1 operates entirely on your local network and does not send data to the cloud. All information is processed and stored locally, ensuring the security and privacy of your home automation setup.</p> <p>33. Can I use the AIR-1 for safety monitoring (e.g., CO2 or gas leaks)?</p> <p>\u2022   The AIR-1\u2019s CO2 and gas sensors are intended for air quality monitoring but do not meet the safety standards for CO2 or gas leak detection as defined by the NBIC, NFPA, or IFC. For safety purposes, dedicated gas or CO2 monitors should be used.</p> <p> </p>"},{"location":"products/air1/introduction/","title":"Introduction","text":"<p>The Apollo AIR-1 is a compact, feature-rich air quality sensor designed for Home Assistant users. It operates locally over WiFi using ESPHome, without the need for a cloud or subscription. Powered by USB-C, the AIR-1 offers open-source software and CAD drawings for customization.</p> <p>Key features include monitoring PM levels (dust, pollen), VOCs, CO2 (optional), temperature, humidity, and even gas levels with an optional sensor. The device also integrates RGB LEDs for notifications and Bluetooth tracking for added automation.</p> <p>Perfect for monitoring air quality in your home, office, or workshop, the AIR-1 is highly customizable and comes with full community support through Discord and access to open-source tools on GitHub.</p>"},{"location":"products/air1/additonal-info/air-quality-sensor-comparison/","title":"Air Quality Sensor Comparison","text":""},{"location":"products/air1/additonal-info/air-quality-sensor-comparison/#air-quality-sensor-comparison_1","title":"Air Quality Sensor Comparison","text":""},{"location":"products/air1/air-1-reviews/beardedtinker-air-1-review/","title":"BeardedTinker AIR-1 Review","text":""},{"location":"products/air1/air-1-reviews/beardedtinker-air-1-review/#air-1-most-feature-packed-air-sensor-ive-seen","title":"Air-1 - most feature packed Air Sensor I've seen","text":""},{"location":"products/air1/air-1-reviews/hands-on-katie-air-1-review/","title":"Hands On Katie AIR-1 Review","text":""},{"location":"products/air1/air-1-reviews/hands-on-katie-air-1-review/#best-air-quality-sensor-i-pull-apart-the-apollo-air-1a-and-find-four-great-company-traits","title":"Best Air Quality Sensor? I pull apart the Apollo AIR-1\u00e2\u20ac\u00a6 and find four great company traits....","text":""},{"location":"products/air1/air-1-reviews/mostlychris-air-1-review/","title":"MostlyChris AIR-1 Review","text":""},{"location":"products/air1/air-1-reviews/mostlychris-air-1-review/#air-quality-alerts-when-unhealthy-using-the-apollo-automation-air-1-and-home-assistant","title":"Air Quality Alerts when unhealthy using the Apollo Automation AIR-1 and Home Assistant.","text":""},{"location":"products/air1/air-1-reviews/simon-says-home-assistant-air-1-review/","title":"Simon Says Home Assistant AIR-1 Review","text":""},{"location":"products/air1/air-1-reviews/simon-says-home-assistant-air-1-review/#apollo-air-quality-sensor-runs-on-esp-home","title":"Apollo Air Quality Sensor runs on ESP Home.","text":""},{"location":"products/air1/air-1-reviews/smart-home-scene-air-1-review/","title":"Smart Home Scene AIR-1 Review","text":""},{"location":"products/air1/air-1-reviews/smart-home-scene-air-1-review/#apollo-air-1-review-complete-air-quality-monitoring-for-home-assistant","title":"Apollo AIR-1 Review: Complete Air Quality Monitoring for Home Assistant","text":""},{"location":"products/air1/air-1-reviews/smart-home-scene-air-1-review/#smart-home-scene-air-1-review_1","title":"Smart Home Scene AIR-1 Review","text":""},{"location":"products/air1/air-1-reviews/the-bearded-tech-guy-air-1-review/","title":"The Bearded Tech Guy AIR-1 Review","text":""},{"location":"products/air1/air-1-reviews/the-bearded-tech-guy-air-1-review/#air-1-air-quality-sensor-transforming-smart-home-air-monitoring","title":"AIR-1 Air Quality Sensor: Transforming Smart Home Air Monitoring!","text":""},{"location":"products/air1/calibrating-and-updating/air-1-temp-calibration/","title":"AIR-1 Temperature Calibration","text":""},{"location":"products/air1/calibrating-and-updating/air-1-temp-calibration/#the-air-1-uses-the-sen55-for-its-temperature-reading-calibrating-it-to-your-environment-is-very-similar-to-the-msr-1-see-the-link-below-for-the-temperature-calibration-guide","title":"The AIR-1 uses the SEN55 for its temperature reading. Calibrating it to your environment is very similar to the MSR-1. See the link below for the temperature calibration guide.","text":"<p>Temperature Calibration Guide </p> <p> </p> <p></p>"},{"location":"products/air1/examples/air-1-home-assistant-dashboard-examples/","title":"AIR-1 Home Assistant Dashboard Examples","text":""},{"location":"products/air1/examples/air-1-home-assistant-dashboard-examples/#co2-charts","title":"CO2 Charts","text":""},{"location":"products/air1/examples/air-1-home-assistant-dashboard-examples/#home-assistant-sensor","title":"Home Assistant Sensor","text":"<pre><code>graph: line\ntype: sensor\nentity: sensor.apollo_air_1_a79e38_co2\ndetail: 2\nname: Bedroom CO2\nhours_to_show: 24\n</code></pre>"},{"location":"products/air1/examples/air-1-home-assistant-dashboard-examples/#custom-plotly-graph-card","title":"Custom: Plotly Graph Card","text":"<pre><code>type: custom:plotly-graph\nentities:\n  - entity: sensor.apollo_air_1_a79e38_co2\nhours_to_show: 24\nrefresh_interval: 10\ntitle: Bedroom CO2\n</code></pre>"},{"location":"products/air1/examples/air-1-home-assistant-dashboard-examples/#home-assistant-guage","title":"Home Assistant Guage","text":"<pre><code>type: gauge\nentity: sensor.apollo_air_1_a79e38_co2\nneedle: true\nunit: ppm\nmin: 0\nmax: 3000\nseverity:\n  green: 0\n  yellow: 1000\n  red: 2000\n</code></pre>"},{"location":"products/air1/examples/air-1-home-assistant-dashboard-examples/#voc-charts","title":"VOC Charts","text":""},{"location":"products/air1/examples/air-1-home-assistant-dashboard-examples/#home-assistant-sensor_1","title":"Home Assistant Sensor","text":"<pre><code>graph: line\ntype: sensor\ndetail: 2\nentity: sensor.apollo_air_1_6b1a58_sen55_voc\nhours_to_show: 24\nname: Basement VOC\n</code></pre>"},{"location":"products/air1/examples/air-1-home-assistant-dashboard-examples/#custom-plotly-graph-card_1","title":"Custom: Plotly Graph Card","text":"<pre><code>type: custom:plotly-graph\nentities:\n  - entity: sensor.apollo_air_1_6b1a58_sen55_voc\nhours_to_show: 24\nrefresh_interval: 10\ntitle: Basement VOC\n</code></pre>"},{"location":"products/air1/examples/air-1-home-assistant-dashboard-examples/#home-assistant-guage_1","title":"Home Assistant Guage","text":"<pre><code>type: gauge\nentity: sensor.apollo_air_1_6b1a58_sen55_voc\nname: Basement VOC\nseverity:\n  green: 0\n  yellow: 150\n  red: 350\nneedle: true\nmin: 0\nmax: 500\n</code></pre>"},{"location":"products/air1/examples/firstof9%27s-air-1-apex-charts-dashboard/","title":"Firstof9's AIR-1 Apex Charts Dashboard","text":"<p>Firstof9 has created this beautiful responsive dashboard with Apexcharts-card custom card from HACS!</p> <p>The colors will change as severity levels change for each of the sensors below.</p> <p></p> <p>This guide assumes you already have HACS installed. If you do not, please first install HACS.</p> <p>First, you need to install apexcharts-card by going to the HACS tab and searching \"apexcharts-card\".</p> <p></p> <p>Once downloaded, it is ready to be used for dashboards!</p> <p>Next, you need to edit the dashboards here.</p> <p></p> <p>WARNING YOU ARE ABOUT TO BE ABLE TO WIPE OUT ALL YOUR DASHBOARDS PROCEED WITH CAUTION</p> <p>WARNING YOU ARE ABOUT TO BE ABLE TO WIPE OUT ALL YOUR DASHBOARDS PROCEED WITH CAUTION</p> <p>Now choose \"raw configuration editor\"</p> <p></p> <p>Now you need to be VERY careful. You are editing all of your dashboards but we can avoid issues by scrolling to the very bottom and then copying and pasting the code seen below. (Picture below shows where we will paste the code) (Code below)</p> <p> </p> <p>Be sure to change the entity ID to match your device or else the card will not work. You can find your device ID by going to the ESPHome addon and selecting the Edit option.</p> <p></p> <p>The easiest way to change all of the entity IDs in the code is by using AI (ChatGPT etc.) or by using a code editor like Virtual Studio Code (VSC). In VSC you can Find (ctrl+f) the old ID and Replace (select the small arrow to toggle open the Replace box) it with your ID. Now you are ready to copy the code into the Raw configurator editor. (See code below)  </p> <p>VSC Find/Replace</p> <p></p> <p>ChatGPT </p> <p>This is the code!</p> <pre><code>  - type: sections\n    max_columns: 3\n    title: Air Quality\n    path: air-quality2\n    icon: mdi:air-filter\n    sections:\n      - type: grid\n        cards:\n          - type: custom:apexcharts-card\n            header:\n              show: true\n              title: PM (1h average)\n              show_states: true\n              colorize_states: true\n            series:\n              - entity: sensor.apollo_air_1_cc6b64_pm_10_m_weight_concentration\n                name: PM10\n                stroke_width: 2\n                group_by:\n                  func: avg\n                  duration: 1h\n                show:\n                  legend_value: false\n              - entity: sensor.apollo_air_1_cc6b64_pm_1_m_weight_concentration\n                name: PM1\n                stroke_width: 2\n                group_by:\n                  func: avg\n                  duration: 1h\n                show:\n                  legend_value: false\n              - entity: sensor.apollo_air_1_cc6b64_pm_2_5_m_weight_concentration\n                name: PM2.5\n                stroke_width: 2\n                group_by:\n                  func: avg\n                  duration: 1h\n                show:\n                  legend_value: false\n              - entity: sensor.apollo_air_1_cc6b64_pm_4_m_weight_concentration\n                name: PM4\n                stroke_width: 2\n                group_by:\n                  func: avg\n                  duration: 1h\n                show:\n                  legend_value: false\n          - type: custom:apexcharts-card\n            header:\n              show: true\n              title: PM10 (10m average)\n              show_states: true\n              colorize_states: false\n            graph_span: 24h\n            experimental:\n              color_threshold: true\n            span:\n              start: day\n            now:\n              show: true\n              label: now\n              color: red\n            series:\n              - entity: sensor.apollo_air_1_cc6b64_pm_10_m_weight_concentration\n                name: PM10\n                stroke_width: 3\n                fill_raw: last\n                extend_to: now\n                show:\n                  legend_value: false\n                group_by:\n                  func: avg\n                  duration: 10min\n                color_threshold:\n                  - color: rgb(126,0,35)\n                    value: 425\n                  - color: rgb(143,63,151)\n                    value: 355\n                  - color: rgb(255,0,0)\n                    value: 255\n                  - color: rgb(255,126,0)\n                    value: 155\n                  - color: rgb(255,255,0)\n                    value: 55\n                  - color: rgb(0,228,0)\n                    value: 0\n              - entity: sensor.apollo_air_1_cc6b64_pm_10_m_weight_concentration\n                name: PM10\n                color: orange\n                opacity: 0.3\n                stroke_width: 3\n                fill_raw: last\n                show:\n                  in_header: false\n                  legend_value: false\n                offset: '-24h'\n                group_by:\n                  func: avg\n                  duration: 10min\n                color_threshold:\n                  - color: rgb(126,0,35)\n                    value: 425\n                  - color: rgb(143,63,151)\n                    value: 355\n                  - color: rgb(255,0,0)\n                    value: 255\n                  - color: rgb(255,126,0)\n                    value: 155\n                  - color: rgb(255,255,0)\n                    value: 55\n                  - color: rgb(0,228,0)\n                    value: 0\n      - type: grid\n        cards:\n          - type: custom:apexcharts-card\n            header:\n              show: true\n              title: PM2.5 (10m average)\n              show_states: true\n              colorize_states: false\n            graph_span: 24h\n            experimental:\n              color_threshold: true\n            span:\n              start: day\n            now:\n              show: true\n              label: now\n              color: red\n            series:\n              - entity: sensor.apollo_air_1_cc6b64_pm_2_5_m_weight_concentration\n                name: PM2.5\n                stroke_width: 3\n                fill_raw: last\n                extend_to: now\n                show:\n                  legend_value: false\n                group_by:\n                  func: avg\n                  duration: 10min\n                color_threshold:\n                  - color: rgb(126,0,35)\n                    value: 35.5\n                  - color: rgb(143,63,151)\n                    value: 35.5\n                  - color: rgb(255,0,0)\n                    value: 35.5\n                  - color: rgb(255,126,0)\n                    value: 35.4\n                  - color: rgb(255,255,0)\n                    value: 12\n                  - color: rgb(0,228,0)\n                    value: 0\n              - entity: sensor.apollo_air_1_cc6b64_pm_2_5_m_weight_concentration\n                name: PM2.5\n                color: orange\n                opacity: 0.3\n                stroke_width: 3\n                fill_raw: last\n                show:\n                  in_header: false\n                  legend_value: false\n                offset: '-24h'\n                group_by:\n                  func: avg\n                  duration: 10min\n                color_threshold:\n                  - color: rgb(126,0,35)\n                    value: 250.5\n                  - color: rgb(143,63,151)\n                    value: 150.5\n                  - color: rgb(255,0,0)\n                    value: 55.5\n                  - color: rgb(255,126,0)\n                    value: 35.5\n                  - color: rgb(255,255,0)\n                    value: 12.1\n                  - color: rgb(0,228,0)\n                    value: 0\n          - type: custom:apexcharts-card\n            header:\n              show: true\n              title: CO2 (10m average)\n              show_states: true\n              colorize_states: false\n            graph_span: 24h\n            experimental:\n              color_threshold: true\n            span:\n              start: day\n            now:\n              show: true\n              label: now\n              color: red\n            series:\n              - entity: sensor.apollo_air_1_cc6b64_co2\n                name: CO2\n                stroke_width: 3\n                fill_raw: last\n                extend_to: now\n                show:\n                  legend_value: false\n                group_by:\n                  func: avg\n                  duration: 10min\n                color_threshold:\n                  - color: '#FF0000'\n                    value: 5000\n                  - color: '#FFA500'\n                    value: 2000\n                  - color: '#FFFF00'\n                    value: 1000\n                  - color: '#008000'\n                    value: 0\n              - entity: sensor.apollo_air_1_cc6b64_co2\n                name: CO2\n                color: orange\n                opacity: 0.3\n                stroke_width: 3\n                fill_raw: last\n                show:\n                  in_header: false\n                  legend_value: false\n                offset: '-24h'\n                group_by:\n                  func: avg\n                  duration: 10min\n                color_threshold:\n                  - color: '#FF0000'\n                    value: 5000\n                  - color: '#FFA500'\n                    value: 2000\n                  - color: '#FFFF00'\n                    value: 1000\n                  - color: '#008000'\n                    value: 0\n      - type: grid\n        cards:\n          - type: custom:apexcharts-card\n            header:\n              show: true\n              title: VOC (10m average)\n              show_states: true\n              colorize_states: false\n            experimental:\n              color_threshold: true\n            graph_span: 24h\n            span:\n              start: day\n            now:\n              show: true\n              label: now\n              color: red\n            series:\n              - entity: sensor.apollo_air_1_cc6b64_sen55_voc\n                name: VOC\n                stroke_width: 3\n                show:\n                  legend_value: false\n                extend_to: now\n                fill_raw: last\n                group_by:\n                  func: avg\n                  duration: 10min\n                  fill: last\n                color_threshold:\n                  - color: '#FF0000'\n                    value: 400\n                  - color: '#FFA500'\n                    value: 250\n                  - color: '#FFFF00'\n                    value: 150\n                  - color: '#008000'\n                    value: 0\n              - entity: sensor.apollo_air_1_cc6b64_sen55_voc\n                name: VOC\n                opacity: 0.5\n                stroke_width: 3\n                fill_raw: last\n                show:\n                  in_header: false\n                  legend_value: false\n                offset: '-24h'\n                group_by:\n                  func: avg\n                  duration: 10min\n                  fill: last\n                color_threshold:\n                  - color: '#FF0000'\n                    value: 400\n                  - color: '#FFA500'\n                    value: 250\n                  - color: '#FFFF00'\n                    value: 150\n                  - color: '#008000'\n                    value: 0\n          - type: custom:apexcharts-card\n            header:\n              show: true\n              title: NOx (10m average)\n              show_states: true\n              colorize_states: false\n            experimental:\n              color_threshold: true\n            graph_span: 24h\n            span:\n              start: day\n            now:\n              show: true\n              label: now\n              color: red\n            series:\n              - entity: sensor.apollo_air_1_cc6b64_sen55_nox\n                name: NOx\n                show:\n                  legend_value: false\n                stroke_width: 3\n                fill_raw: last\n                extend_to: now\n                group_by:\n                  func: avg\n                  duration: 10min\n                color_threshold:\n                  - color: '#FF0000'\n                    value: 300\n                  - color: '#FFA500'\n                    value: 150\n                  - color: '#FFFF00'\n                    value: 20\n                  - color: '#008000'\n                    value: 0\n              - entity: sensor.apollo_air_1_cc6b64_sen55_nox\n                name: NOx\n                opacity: 0.5\n                stroke_width: 3\n                fill_raw: last\n                show:\n                  in_header: false\n                  legend_value: false\n                offset: '-24h'\n                group_by:\n                  func: avg\n                  duration: 10min\n                color_threshold:\n                  - color: '#FF0000'\n                    value: 300\n                  - color: '#FFA500'\n                    value: 150\n                  - color: '#FFFF00'\n                    value: 20\n                  - color: '#008000'\n                    value: 0\n</code></pre> <p>If you are using the old masonry-style dashboards, please paste in this code:</p> <pre><code>  - title: Air Quality\n    path: air-quality\n    icon: mdi:air-filter\n    cards:\n      - type: custom:apexcharts-card\n        header:\n          show: true\n          title: PM (1h average)\n          show_states: true\n          colorize_states: true\n        series:\n          - entity: sensor.apollo_air_1_cc6b64_pm_10_m_weight_concentration\n            name: PM10\n            stroke_width: 2\n            group_by:\n              func: avg\n              duration: 1h\n            show:\n              legend_value: false\n          - entity: sensor.apollo_air_1_cc6b64_pm_1_m_weight_concentration\n            name: PM1\n            stroke_width: 2\n            group_by:\n              func: avg\n              duration: 1h\n            show:\n              legend_value: false\n          - entity: sensor.apollo_air_1_cc6b64_pm_2_5_m_weight_concentration\n            name: PM2.5\n            stroke_width: 2\n            group_by:\n              func: avg\n              duration: 1h\n            show:\n              legend_value: false\n          - entity: sensor.apollo_air_1_cc6b64_pm_4_m_weight_concentration\n            name: PM4\n            stroke_width: 2\n            group_by:\n              func: avg\n              duration: 1h\n            show:\n              legend_value: false\n      - type: custom:apexcharts-card\n        header:\n          show: true\n          title: PM10 (10m average)\n          show_states: true\n          colorize_states: false\n        graph_span: 24h\n        experimental:\n          color_threshold: true\n        span:\n          start: day\n        now:\n          show: true\n          label: now\n          color: red\n        series:\n          - entity: sensor.apollo_air_1_cc6b64_pm_10_m_weight_concentration\n            name: PM10\n            stroke_width: 3\n            fill_raw: last\n            extend_to: now\n            show:\n              legend_value: false\n            group_by:\n              func: avg\n              duration: 10min\n            color_threshold:\n              - color: rgb(126,0,35)\n                value: 425\n              - color: rgb(143,63,151)\n                value: 355\n              - color: rgb(255,0,0)\n                value: 255\n              - color: rgb(255,126,0)\n                value: 155\n              - color: rgb(255,255,0)\n                value: 55\n              - color: rgb(0,228,0)\n                value: 0\n          - entity: sensor.apollo_air_1_cc6b64_pm_10_m_weight_concentration\n            name: PM10\n            color: orange\n            opacity: 0.3\n            stroke_width: 3\n            fill_raw: last\n            show:\n              in_header: false\n              legend_value: false\n            offset: '-24h'\n            group_by:\n              func: avg\n              duration: 10min\n            color_threshold:\n              - color: rgb(126,0,35)\n                value: 425\n              - color: rgb(143,63,151)\n                value: 355\n              - color: rgb(255,0,0)\n                value: 255\n              - color: rgb(255,126,0)\n                value: 155\n              - color: rgb(255,255,0)\n                value: 55\n              - color: rgb(0,228,0)\n                value: 0\n      - type: custom:apexcharts-card\n        header:\n          show: true\n          title: PM2.5 (10m average)\n          show_states: true\n          colorize_states: false\n        graph_span: 24h\n        experimental:\n          color_threshold: true\n        span:\n          start: day\n        now:\n          show: true\n          label: now\n          color: red\n        series:\n          - entity: sensor.apollo_air_1_cc6b64_pm_2_5_m_weight_concentration\n            name: PM10\n            stroke_width: 3\n            fill_raw: last\n            extend_to: now\n            show:\n              legend_value: false\n            group_by:\n              func: avg\n              duration: 10min\n            color_threshold:\n              - color: rgb(126,0,35)\n                value: 35.5\n              - color: rgb(143,63,151)\n                value: 35.5\n              - color: rgb(255,0,0)\n                value: 35.5\n              - color: rgb(255,126,0)\n                value: 35.4\n              - color: rgb(255,255,0)\n                value: 12\n              - color: rgb(0,228,0)\n                value: 0\n          - entity: sensor.apollo_air_1_cc6b64_pm_2_5_m_weight_concentration\n            name: PM10\n            color: orange\n            opacity: 0.3\n            stroke_width: 3\n            fill_raw: last\n            show:\n              in_header: false\n              legend_value: false\n            offset: '-24h'\n            group_by:\n              func: avg\n              duration: 10min\n            color_threshold:\n              - color: rgb(126,0,35)\n                value: 250.5\n              - color: rgb(143,63,151)\n                value: 150.5\n              - color: rgb(255,0,0)\n                value: 55.5\n              - color: rgb(255,126,0)\n                value: 35.5\n              - color: rgb(255,255,0)\n                value: 12.1\n              - color: rgb(0,228,0)\n                value: 0\n      - type: custom:apexcharts-card\n        header:\n          show: true\n          title: CO2 (10m average)\n          show_states: true\n          colorize_states: false\n        graph_span: 24h\n        experimental:\n          color_threshold: true\n        span:\n          start: day\n        now:\n          show: true\n          label: now\n          color: red\n        series:\n          - entity: sensor.apollo_air_1_cc6b64_co2\n            name: CO2\n            stroke_width: 3\n            fill_raw: last\n            extend_to: now\n            show:\n              legend_value: false\n            group_by:\n              func: avg\n              duration: 10min\n            color_threshold:\n              - color: '#FF0000'\n                value: 5000\n              - color: '#FFA500'\n                value: 2000\n              - color: '#FFFF00'\n                value: 1000\n              - color: '#008000'\n                value: 0\n          - entity: sensor.apollo_air_1_cc6b64_co2\n            name: CO2\n            color: orange\n            opacity: 0.3\n            stroke_width: 3\n            fill_raw: last\n            show:\n              in_header: false\n              legend_value: false\n            offset: '-24h'\n            group_by:\n              func: avg\n              duration: 10min\n            color_threshold:\n              - color: '#FF0000'\n                value: 5000\n              - color: '#FFA500'\n                value: 2000\n              - color: '#FFFF00'\n                value: 1000\n              - color: '#008000'\n                value: 0\n      - type: custom:apexcharts-card\n        header:\n          show: true\n          title: VOC (10m average)\n          show_states: true\n          colorize_states: false\n        experimental:\n          color_threshold: true\n        graph_span: 24h\n        span:\n          start: day\n        now:\n          show: true\n          label: now\n          color: red\n        series:\n          - entity: sensor.apollo_air_1_cc6b64_sen55_voc\n            name: VOC\n            stroke_width: 3\n            show:\n              legend_value: false\n            extend_to: now\n            fill_raw: last\n            group_by:\n              func: avg\n              duration: 10min\n              fill: last\n            color_threshold:\n              - color: '#FF0000'\n                value: 400\n              - color: '#FFA500'\n                value: 250\n              - color: '#FFFF00'\n                value: 150\n              - color: '#008000'\n                value: 0\n          - entity: sensor.apollo_air_1_cc6b64_sen55_voc\n            name: VOC\n            opacity: 0.5\n            stroke_width: 3\n            fill_raw: last\n            show:\n              in_header: false\n              legend_value: false\n            offset: '-24h'\n            group_by:\n              func: avg\n              duration: 10min\n              fill: last\n            color_threshold:\n              - color: '#FF0000'\n                value: 400\n              - color: '#FFA500'\n                value: 250\n              - color: '#FFFF00'\n                value: 150\n              - color: '#008000'\n                value: 0\n      - type: custom:apexcharts-card\n        header:\n          show: true\n          title: NOx (10m average)\n          show_states: true\n          colorize_states: false\n        experimental:\n          color_threshold: true\n        graph_span: 24h\n        span:\n          start: day\n        now:\n          show: true\n          label: now\n          color: red\n        series:\n          - entity: sensor.apollo_air_1_cc6b64_sen55_nox\n            name: NOx\n            show:\n              legend_value: false\n            stroke_width: 3\n            fill_raw: last\n            extend_to: now\n            group_by:\n              func: avg\n              duration: 10min\n            color_threshold:\n              - color: '#FF0000'\n                value: 300\n              - color: '#FFA500'\n                value: 150\n              - color: '#FFFF00'\n                value: 20\n              - color: '#008000'\n                value: 0\n          - entity: sensor.apollo_air_1_cc6b64_sen55_nox\n            name: NOx\n            opacity: 0.5\n            stroke_width: 3\n            fill_raw: last\n            show:\n              in_header: false\n              legend_value: false\n            offset: '-24h'\n            group_by:\n              func: avg\n              duration: 10min\n            color_threshold:\n              - color: '#FF0000'\n                value: 300\n              - color: '#FFA500'\n                value: 150\n              - color: '#FFFF00'\n                value: 20\n              - color: '#008000'\n                value: 0\n</code></pre> <p>Now click save in the top right and remember to not hit any buttons or make any other edits before saving!</p> <p></p> <p>Finally hit \"done\" in the top right.</p> <p></p> <p>Hit F5 on your keyboard or refresh your browser and then look for your new \"Air Icon\" as a new dashboard option and click on it!</p> <p></p> <p>Lastly, we do want to thank firstof9 for creating this dashboard and sharing it.</p>"},{"location":"products/air1/examples/how-to-use-the-apollo-gpio-header-to-control-an-led-strip/","title":"How To Use The Apollo GPIO Header To Control An LED Strip","text":"<p>This tutorial will guide you through setting up one of our MSR-2 devices (works with any mezzanine port on any Apollo Device) with the optional $4.99 GPIO Header which adds pins for you to easily add functionality to your device! In this tutorial, however, we will be focusing on adding an LED strip to your Apollo device.</p> <p>Materials Needed for tutorial:</p> <ul> <li>Apollo MSR-2, Apollo MTR-1, and all other future Apollo Automation products with the mezzanine port.</li> <li>Apollo GPIO Header</li> <li>ws2812b aka neopixel RGB led strip or similar. sk6812 RGBW strip will also work.</li> <li>Optional DuPont Cables for GPIO Header but any DuPont cables will do.</li> <li>USB-C cable and power brick to power MSR-2</li> </ul> <p>You are limited to 300mA of power output from the 5v port. You can either attach an external power supply and power the MSR-2 via 5v and gnd pins or work with the limited power output of the port</p> <p></p> <p>Above is an image of the GPIO Header and its pinouts. We can use ports 2,4,6,7 for our data channel to an LED strip or multiple LED strips. We will also use the top two ports which are ground and 5v for power.</p> <p>Did you know you can power the esp32 from the 5v and gnd pin? That means you can connect an external power supply and power it without the side USB port being used! This also allows for more power to be given to your LEDs!</p> <p>We cannot use the IO ports 0,1,18, or 19 for LEDs but you can use ports 0 and 1 for i2c sensors.</p> <p>Connecting the GPIO Header to the MSR-2</p> <p>The first thing we will do is remove our MSR-2 back plate and connect our GPIO Header to our MSR-2 and then put the new GPIO back plate on (blue).</p> <p>Step 1. Remove the backplate of the MSR-2</p> <p> </p> <p>Step 2. Line up the Xs shown on the msr-2 and the GPIO Header. They should both be facing in the same direction as shown below.</p> <p></p> <p>Step 3. Gently push down onto the GPIO Header as shown below:</p> <p></p> <p>Step 4. Confirm the GPIO Header is seated properly as shown below.</p> <p></p> <p>Step 5. Slide the GPIO Header back plate for the MSR-2 over your sensor and gently push down until it clicks into place.</p> <p></p> <p>If the back plate does not gently go onto the sensor please investigate and confirm it is in the right orientation.</p> <p>Connecting DuPont pins to proper GPIO ports Now we need to reference the GPIO pinout we looked at above and then connect three wires. You will need three male-to-male DuPont wires included in your kit. I suggest using red for power aka 5v, White for ground aka GND, and green for data aka port IO7. Most LED strips will also have this same color scheme and it's easier to match like colors together.</p> <p></p> <p></p> <p></p> <p>You can add a bit of hot glue to the Dupont wires to hold them together. DO NOT put hot glue into the GPIO Header's female pins that will ruin the addon. I am only suggesting that you can hot-glue the Dupont pins outer shell themselves together to stiffen them up.</p> <p></p> <p>Connecting DuPont pins to LED Strip</p> <p>Next, we need to connect the other side of the Dupont pins to the LED strip. Most likely your LED strip will have a JST-SM connector which is a 3amp max connector with three wires connected: red for 5v, green for data, and white for gnd. We will be matching up our red, green, and white wires already attached to the GPIO add-on pins in the MSR-2 (using IO7 as the data pin for this tutorial)</p> <p> </p> <p>Make sure to connect to the correct side of the LED strip. The led strip will have an arrow going down the led strip showing one direction for the data line. you want the data channel going FROM the msr-2 TO the led strip going in a \"forward\" direction as shown below.</p> <p> </p> <p>Edit the YAML of your MSR-2 to let it know about your new LED strip</p> <p>Finally, we need to tell the MSR-2 that we connected an LED strip. We need to tell it how many LEDs we have and we need to tell it that it's our second LED since the built-in LED is the first. This tutorial assumes you are comfortable with the ESPHome dashboard.</p> <p>Step 1. Open ESPhome Dashboard and click edit to bring up the yaml your sensor is currently using.</p> <p></p> <p>You will see some YAML code here and you do NOT want to touch anything above line 20. If you need to, click your cursor at the end of wifi_password and hit enter to create a new line then make sure you backspace until you are \"flush\" with the line numbers like how wifi: is.</p> <p>Step 2. Copy the code below and paste it to line 20 in your ESPHome yaml for this device.</p> <pre><code>light:\n  - platform: esp32_rmt_led_strip\n    id: bed_led\n    name: \"Bed LED\"\n    pin: GPIO7\n    rmt_channel: 1\n    default_transition_length: 0s\n    chipset: WS2812\n    num_leds: 60\n    rgb_order: grb\n    effects:\n      - pulse:\n          name: \"Slow Pulse\"\n          transition_length: 1000ms\n          update_interval: 1000ms\n          min_brightness: 50%\n          max_brightness: 100%\n      - pulse:\n          name: \"Fast Pulse\"\n          transition_length: 100ms\n          update_interval: 100ms\n          min_brightness: 50%\n          max_brightness: 100%\n      - addressable_rainbow:\n</code></pre> <p>This is where you can change your number of LEDs as well as the GPIO pin used for the LED data! Make sure to check out https://esphome.io/components/light/index.html#light-effects for all the effects supported such as addressable scan effect!Step 3. Confirm you do not have any red lines showing errors in your code You change the rmt_channel to 1 because 0 is being used by the built-in LED of the MSR-2. Step 4. Hit save and then install in the top right. It should have a popup where you select \"wirelessly\" then it will begin compiling the firmware and finally installing the compiled firmware to your MSR-2.Step 5. Go into home assistant and confirm you now have a new light entity called Bed LED</p> <p></p> <p>Step 6. Click on the name \"Bed LED\" circled and it will pop up a color picker. You can then choose the color wheel option to pick any color of the rainbow, or select \"effect\" and choose an effect.</p> <p> </p> <p></p> <p>That's all folks! Thanks to Smart Home Sellout for putting this tutorial together!</p>"},{"location":"products/air1/setup/adding-the-mics-4514-gas-sensor-to-the-air-1/","title":"Adding The MiCS-4514 Gas Sensor To The AIR-1","text":"<p>1. Unplug your AIR-1 from power and follow the video  </p>"},{"location":"products/air1/setup/adding-the-scd40-co2-sensor-to-the-air-1/","title":"Adding The SCD40 CO2 Sensor To The AIR-1","text":"<p>1. Unplug your AIR-1 from power and remove the back</p> <p></p> <p>2. At the bottom center there is a black connector. There is an x in the lower right corner of the connector</p> <p>3. Orientate the CO2 module so the white x on the module is also in the lower right and the gold dot is in the upper left as seen below</p> <p>4. Align the connector on the back of the CO2 module with the connector on the AIR-1. Once aligned, push down so the CO2 module fully seats itself</p> <p></p> <p>5. Put your AIR-1 cover on. Please refer to our CO2 calibration guide to calibrate the CO2 module.</p>"},{"location":"products/air1/setup/how-to-change-the-update-frequency-of-sensors/","title":"How To Change The Update Frequency Of Sensors","text":""},{"location":"products/air1/setup/how-to-change-the-update-frequency-of-sensors/#how-to-change-the-update-frequency-of-sensors_1","title":"How To Change The Update Frequency Of Sensors","text":""},{"location":"products/air1/setup/sensor-definitions/","title":"Sensor Definitions","text":"<p>Once added to Home Assistant you can configure different settings for your sensor. Below is what each setting does.</p>"},{"location":"products/air1/setup/sensor-definitions/#controls","title":"Controls","text":"<ul> <li>RGB Light<ul> <li>3 RGB Neopixels. Click on the light bulb to change the color. Click on the toggle to turn on or off</li> </ul> </li> <li> <p>Calibrate SCD40 </p> <ul> <li>Refer to the CO2 calibration guide. Place your sensor outside and click this button to calibrate the CO2 levels</li> </ul> </li> </ul>"},{"location":"products/air1/setup/sensor-definitions/#sensors","title":"Sensors","text":"<ul> <li>Ammonia<ul> <li>Measurement from MiCS-4514 gas sensor</li> </ul> </li> <li>Carbon Monoxide<ul> <li>Measurement from MiCS-4514 gas sensor</li> </ul> </li> <li>CO2<ul> <li>True CO2 reading from the SCD40. This will be Unknown if you do not have the CO2 module. This can be calibrated following this guide but does come precalibrated: Here</li> </ul> </li> <li>DPS310 Pressure<ul> <li>Atmospheric pressure, used to better calibrate the SCD40 CO2 module</li> </ul> </li> <li>DPS310 Temperature<ul> <li>A worse measurement of temperature. This is more susceptible to internal heat buildup. Please use the SEN55 temperature</li> </ul> </li> <li>ESP Temperature<ul> <li>This is the temperature of the internal ESP chip. Think of it like your measured CPU temp on your PC</li> </ul> </li> <li>Ethanol<ul> <li>Measurement from MiCS-4514 gas sensor</li> </ul> </li> <li>Hydrogen<ul> <li>Measurement from MiCS-4514 gas sensor</li> </ul> </li> <li>Methane<ul> <li>Measurement from MiCS-4514 gas sensor</li> </ul> </li> <li>Nitrogen Dioxide<ul> <li>Measurement from MiCS-4514 gas sensor</li> </ul> </li> <li>PM &lt; 10 \u00b5M<ul> <li>Measurement of particulates smaller than 10 \u00b5M</li> </ul> </li> <li>PM &lt; 1 \u00b5M<ul> <li>Measurement of particulates smaller than 1 \u00b5M</li> </ul> </li> <li>PM &lt; 2.5 \u00b5M<ul> <li>Measurement of particulates smaller than 2.5 \u00b5M</li> </ul> </li> <li>PM &lt; 4 \u00b5M<ul> <li>Measurement of particulates smaller than 4 \u00b5M</li> </ul> </li> <li>SEN55 Humidity<ul> <li>Humidity measurement from SEN55, will be most accurate</li> </ul> </li> <li>SEN55 NOX<ul> <li>Measurement of nitrogen oxides from the SEN55</li> </ul> </li> <li>SEN55 Temperature<ul> <li>Measurement of temperature from the SEN55, will be most accurate</li> </ul> </li> <li>SEN55 VOC<ul> <li>VOC index from the SEN55</li> </ul> </li> <li>VOC Quality<ul> <li>This uses the VOC index and a scale to output an easier to use variable <ul> <li>0-79: Improved</li> <li>80-119: Normal</li> <li>120-199: Abnormal</li> <li>200-299: Very abnormal</li> <li>300+: Extremely abnormal</li> </ul> </li> </ul> </li> <li> <p>PM 0.3 To 1 \u00b5m </p> <ul> <li>Disabled by default but can be enabled in HA. Shows particulate count that are from 0.3 to 1.0 \u00b5m</li> <li> <p>PM 1 To 2.5 \u00b5m </p> </li> <li> <p>Disabled by default but can be enabled in HA. Shows particulate count that are from 1 to 2.5 \u00b5m</p> </li> <li> <p>PM 2.5 To 4 \u00b5m </p> </li> <li> <p>Disabled by default but can be enabled in HA. Shows particulate count that are from 2.5 to 4.0 \u00b5m</p> </li> <li> <p>PM 4 To 10 \u00b5m </p> </li> <li> <p>Disabled by default but can be enabled in HA. Shows particulate count that are from 4.0 to 10.0 \u00b5m</p> </li> </ul> </li> </ul>"},{"location":"products/air1/setup/sensor-definitions/#configuration","title":"Configuration","text":"<ul> <li>ESP Reboot<ul> <li>Performs a restart of the sensor</li> </ul> </li> <li>SEN55 Temperature Offset<ul> <li>Allows you to calibrate the SEN55 temperature. Please refer to our calibration guide</li> </ul> </li> <li>SEN55 Humidity Offset<ul> <li>Allows you to calibrate the SEN55 humidity. Please refer to our calibration guide</li> </ul> </li> <li> <p>Startup Light Blink</p> <ul> <li>Controls if the led blinks after power on when trying to connect to HA</li> </ul> </li> </ul> <p></p>"},{"location":"products/air1/troubleshooting/manually-uploading-code-through-esphome/","title":"Manually Uploading Code Through ESPHome","text":"<p>If your device becomes unresponsive and you've exhausted the other troubleshooting methods you can upload a fresh set of firmware by following the below guide. The utility does need to be run from Chrome or Edge.</p> <p>If your device has already been connected to Home Assistant previously please refer to Removing Device From Home Assistant first before proceeding</p> <ol> <li>Plug your AIR-1 into your computer with a quality USBC cable that supports data transfer</li> <li> <p>Navigate to our installer page and click connect ** Install Page **</p> </li> <li> <p>Select your Apollo device, it will show with a similar name to the one below, and click connect. If you aren't sure which device it is, you can unplug the AIR-1 and see which disappears.</p> </li> </ol> <p></p> <p>If no device shows, click cancel and then install the recommended driver that shows on the popup. If you have installed the driver, tried different cables, and it still won't work refer here for putting the MSR-1 in bootloader mode and then retry step 3. Putting MSR-1 In Boot Mode Document</p> <ol> <li>Choose to install the new firmware</li> </ol> <p></p> <ol> <li>Wait for the installer to finish</li> </ol> <p></p> <ol> <li> <p>After finishing, check for the Apollo hotspot and connect. This might not show if you previously had the AIR-1 connected to your wifi</p> </li> <li> <p>Log into Home Assistant and go to the ESPHome addon check to see if you can adopt the device.</p> </li> </ol> <p>If you encounter the below error, please complete the Putting AIR-1 In Boot Mode Document and go back to step 3.</p> <p></p>"},{"location":"products/air1/troubleshooting/putting-the-air-1-in-boot-mode/","title":"Putting The AIR-1 In Boot Mode","text":"<p>This will cover how to put the AIR-1 into boot mode. This is sometimes needed for uploading new firmware if the device is struggling.</p> <p>Boot Button Only</p> <ol> <li>Plug in the device</li> <li>See the photo below to help access the boot button through the back of the case</li> <li>Use a pin to press and hold the boot button, while holding the boot button plug it back into your computer/power and then release the boot button</li> <li>Continue with Uploading your Code via our ESPHome Web Flasher</li> </ol> <p>Boot and Reset Button</p> <ol> <li>Plug it into your computer</li> <li>Press and hold the boot button, while holding it press and release the reset button, then release the boot button </li> <li>Continue with Uploading your Code via our ESPHome Web Flasher</li> </ol>"},{"location":"products/air1/troubleshooting/reset-wi-fi-credentials/","title":"Reset Wi-Fi Credentials","text":"<ol> <li>Plug the device into power</li> <li>Long press the Boot button for 10 seconds </li> <li>The Wi-Fi credentials should be reset and it will broadcast its hotspot again</li> </ol>"},{"location":"products/apolloodroid/faq/","title":"FAQ","text":"<p>1. What is the Apollo Odroid?</p> <p>The Apollo Odroid is a plug-and-play device pre-configured with Home Assistant OS. It\u2019s designed to simplify the setup of your smart home by providing an out-of-the-box solution for home automation, running on the powerful ODROID-M1S platform.</p> <p>2. What hardware does the Apollo Odroid include?</p> <p>The Apollo Odroid comes equipped with:</p> <p>\u2022   ODROID-M1S board (8GB RAM)</p> <p>\u2022   64GB eMMC storage pre-flashed with Home Assistant OS</p> <p>\u2022   Apollo Automation-designed case</p> <p>\u2022   USB-C power supply (USA plug)</p> <p>\u2022   Ethernet cable for easy network connection</p> <p>3. How do I set up the Apollo Odroid?</p> <p>Simply plug in the device using the included USB-C power supply and Ethernet cable. Once powered on, connect it to your local network, access Home Assistant via your web browser, and begin configuring your smart home devices. No flashing or technical setup is required.</p> <p>4. Is this device cloud-dependent?</p> <p>No. The Apollo Odroid runs Home Assistant OS, which is entirely locally managed. You can control your smart home devices without any reliance on cloud services or subscriptions.</p> <p>5. Can I expand the storage on the Apollo Odroid?</p> <p>Yes. While it comes with 64GB eMMC storage, you can expand storage using external storage options or upgrade the internal eMMC as needed.</p> <p>6. Does the Apollo Odroid support wireless connectivity?</p> <p>Yes, the ODROID-M1S platform supports both WiFi and Ethernet connections, giving you flexible options for integrating it into your network.</p> <p>7. Can I customize the Home Assistant installation on the Apollo Odroid?</p> <p>Absolutely! The Apollo Odroid runs Home Assistant OS, which is fully customizable. You can add integrations, automations, and even custom add-ons to tailor the system to your smart home needs.</p> <p>8. Do I need any special software to configure the Apollo Odroid?</p> <p>No additional software is required. The Apollo Odroid uses Home Assistant OS, which you access directly through any web browser on your network. From there, you can configure your devices and automations with ease.</p> <p>9. Is technical support available?</p> <p>Yes! You\u2019ll have access to our community on Discord for support, product announcements, and home automation ideas. Additionally, we offer open-source code and CAD files to help you modify and improve your setup as needed.</p> <p>10. Can I use other home automation platforms on the Apollo Odroid?</p> <p>While the device comes pre-flashed with Home Assistant OS, advanced users can reflash the device with other compatible smart home platforms, though this requires technical expertise.</p> <p>11. Is the Apollo Odroid suitable for beginners?</p> <p>Absolutely! The Apollo Odroid is designed to make getting started with home automation as simple as possible. With no complicated setup process, it\u2019s an excellent option for both beginners and experienced users.</p> <p>12. How does the Apollo Odroid compare to other smart home hubs?</p> <p>The Apollo Odroid is unique because it offers local control, requires no cloud or subscription services, and runs on the powerful Home Assistant platform, providing unmatched flexibility and control over your smart home setup. Plus, it\u2019s completely open-source and can be customized to fit your needs.</p>"},{"location":"products/apolloodroid/getting-started/","title":"Getting Started With Apollo Odroid Flashed With Home Assistant (Odroid M1S)","text":"<p>This guide will walk you through setting up your Apollo Home Assistant Hub (link)</p> <ol> <li>Plug your hub into the wall with the included power adapter</li> <li>Attach the included ethernet cable from the hub to an available ethernet port on your router</li> <li>From a phone or computer connected to your home's internet open your web browser and navigate to http://homeassistant.local<ol> <li>Alternatively navigate to your router's device page, identify the odroid and type the IP + port 8123 (eg: 192.168.1.50:8123) into the browser</li> <li></li> </ol> </li> <li></li> <li>Click on \"Create My Smart Home\" and wait for the Home Assistant installer to finish <ol> <li></li> </ol> </li> <li>Now you've got Home Assistant running!</li> <li>To get started with Apollo Devices you'll want to add ESPHome https://esphome.io/guides/getting_started_hassio.html</li> </ol>"},{"location":"products/apolloodroid/introduction/","title":"Introduction","text":"<p>The Apollo Odroid is a pre-configured, ready-to-use device designed to kickstart your smart home journey with ease. Built on the powerful ODROID-M1S platform with 8GB of RAM and 64GB of onboard eMMC storage, this unit comes pre-flashed with Home Assistant OS. This means that from the moment you unbox it, you can dive right into automating your home without any complex setup or flashing processes.</p> <p>Perfect for both beginners and seasoned Home Assistant users, the Apollo Odroid offers a streamlined experience. It\u2019s housed in an Apollo Automation-designed case, powered via a USB-C connection, and includes everything you need, such as a USA power supply and an Ethernet cable. Whether you\u2019re looking to manage lights, climate, security, or any other smart home devices, the Apollo Odroid is your reliable gateway to full local control without the need for cloud services.</p> <p>With this device, we aim to provide a plug-and-play solution that\u2019s affordable, powerful, and community-driven.</p>"},{"location":"products/apolloodroid/reviews/","title":"Simon Says Home Assistant","text":""},{"location":"products/apolloodroid/reviews/#-my-favorite-home-assistant-hardware-apollo-odroid","title":"-  My Favorite Home Assistant Hardware, Apollo Odroid!","text":""},{"location":"products/general/faq/","title":"F.A.Q. ~ Frequenty Asked Questions","text":""},{"location":"products/general/faq/#this-is-where-our-most-frequently-asked-questions-will-be-for-now","title":"This is where our most frequently asked questions will be for now!","text":""},{"location":"products/general/faq/#question","title":"Question:","text":"<p>How much power do your sensors use?</p>"},{"location":"products/general/faq/#answer","title":"Answer:","text":"<p>All apollo sensors use 1amp or less, some of them 350-500mA.</p>"},{"location":"products/general/faq/#question_1","title":"Question:","text":"<p>What all can the MSR-2 LD2410B mmWave sensor go through?</p>"},{"location":"products/general/faq/#answer_1","title":"Answer:","text":"<p>It can reliably go through drywall.</p>"},{"location":"products/general/faq/#question_2","title":"Question:","text":"<p>My MSR-2 is triggering and no one is there.</p>"},{"location":"products/general/faq/#answer_2","title":"Answer:","text":"<p>We have seen this happen before - please first try to restart your radar, then factory reset your radar, then try a factory firmware flash. We also see success with users re-seating their LD2410B mmWave sensor.</p>"},{"location":"products/general/faq/#question_3","title":"Question:","text":"<p>How do I reset my Wi-Fi?</p>"},{"location":"products/general/faq/#answer_3","title":"Answer:","text":"<p>Plug in your device then hold down the boot button for 10 seconds. The Wi-Fi credentials should be reset and it will broadcast its hotspot again.</p>"},{"location":"products/general/faq/#question_4","title":"Question:","text":"<p>My lux sensor doesn't seem to be working how do I fix it?</p>"},{"location":"products/general/faq/#answer_4","title":"Answer:","text":"<p>The default update_interval is 60 seconds which isnt great for automations revolving around measuring lux values. Please follow this short guide to edit the lux update_interval down to a more responsive 3-5seconds.</p>"},{"location":"products/general/faq/#question_5","title":"Question:","text":"<p>Do I need to push the \"Clean\" button for my Air-1 or setup an automation for it?</p>"},{"location":"products/general/faq/#answer_5","title":"Answer:","text":"<p>No, your Air-1 will self-clean once a week per this recommended documentation from the manufacturer.</p>"},{"location":"products/general/faq/#question_6","title":"Question:","text":"<p>Can your sensors be used with OpenHAB?</p>"},{"location":"products/general/faq/#answer_6","title":"Answer:","text":"<p>Yes, please install this binding and then restart OpenHAB and our devices will show up to configure!</p>"},{"location":"products/general/faq/#question_7","title":"Question:","text":"<p>I am getting the error \"Failed to import device\" in ESPHome Dashboard when trying to adopt my Apollo device.</p>"},{"location":"products/general/faq/#answer_7","title":"Answer:","text":"<p>Make sure you have enough free space in Home Assistant - Protip: check for old backups you can delete!</p> <p>If your space is not an issue then please reboot or even try reinstalling the esphome addon and see if that helps!</p>"},{"location":"products/general/faq/#question_8","title":"Question:","text":""},{"location":"products/general/faq/#answer_8","title":"Answer:","text":""},{"location":"products/general/faq/#question_9","title":"Question:","text":""},{"location":"products/general/faq/#answer_9","title":"Answer:","text":""},{"location":"products/general/faq/#general-troubleshooting-suggestions","title":"~~General Troubleshooting Suggestions~~","text":"<p>If your gates are acting strangely and reporting much more energy than they should, make sure there is no tension on the usb cable. One user reported still energy in gates 2 and 3 until the tension was removed from the cable.</p>"},{"location":"products/general/introduction/","title":"Introduction","text":"<p>Apollo Automation is a small startup based in Lexington, Kentucky, dedicated to creating innovative, high-quality, and affordable smart home automation hardware. Founded in 2023 by a group of friends, the company was born out of frustration with existing solutions that lacked transparency and customization options. Named after Trevor\u2019s dog, Apollo, the team set out to build products that offer complete local control without reliance on cloud services or subscriptions.</p> <p>Apollo Automation focuses on designing and manufacturing open-source hardware and software that puts control in the hands of its users. The company engages closely with the Home Assistant community, providing fully customizable devices that integrate seamlessly with the platform. Their mission is to empower customers to build and control their own smart homes with ease, reliability, and privacy. Through monthly livestreams and an active Discord community, Apollo Automation remains accessible, transparent, and driven by user feedback, ensuring that their products meet the evolving needs of their customers.</p>"},{"location":"products/general/simple-and-advanced-examples-of-temperature-%26-humidity-offsets/","title":"Simple and Advanced Examples of Temperature &amp; Humidity Offsets","text":""},{"location":"products/general/simple-and-advanced-examples-of-temperature-%26-humidity-offsets/#simple-offsets-for-temperature-and-humidity","title":"Simple Offsets for Temperature and Humidity:","text":"<p>Please add these to the bottom of your esphome yaml for your device then click save and install. Once you are finished, you will have two new boxes inside the home assistant esphome integration device page for your device where you can fill in an offset. Give them up to 1minute to take effect!</p> <pre><code>sensor:\n  - id: !extend scd40\n    humidity:\n      name: \"Humidity\"\n      id: \"humidity\"\n      filters:\n        - lambda: return x - id(scd40_humidity_offset).state;\n    temperature:\n      name: \"Temperature\"\n      id: \"temperature\"\n      filters:\n        - lambda: return x - id(scd40_temperature_offset).state;\nnumber:\n  - platform: template\n    name: SCD40 Humidity Offset\n    id: scd40_humidity_offset\n    restore_value: true\n    initial_value: -18.86\n    min_value: -70.0\n    max_value: 70.0\n    entity_category: \"CONFIG\"\n    unit_of_measurement: \"%\"\n    optimistic: true\n    update_interval: never\n    step: 0.1\n    mode: box\n  - platform: template\n    name: SCD40 Temperature Offset\n    id: scd40_temperature_offset\n    initial_value: 14.54\n    min_value: -70.0\n    max_value: 70.0\n    entity_category: \"CONFIG\"\n    unit_of_measurement: \"\u00b0C\"\n    optimistic: true\n    update_interval: never\n    step: 0.1\n    mode: box\n</code></pre>"},{"location":"products/general/simple-and-advanced-examples-of-temperature-%26-humidity-offsets/#bme280-scd40-sensors-overcoming-temperature-humidity-reading-challenges","title":"BME280 &amp; SCD40 Sensors: Overcoming Temperature &amp; Humidity Reading Challenges","text":"<p>The BME280 and SCD40 sensors are known for their precision in measuring temperature and humidity. However, like all sensor systems, they can sometimes provide inaccurate readings due to various factors. In the case of the BME280 and SCD40 sensors, one significant challenge arises from the heat produced by the ESP chip, which can alter the environment inside its enclosure, thereby skewing the readings.</p>"},{"location":"products/general/simple-and-advanced-examples-of-temperature-%26-humidity-offsets/#adjusting-the-bme280-and-scd40-temperature-offset","title":"Adjusting the BME280 and SCD40 Temperature Offset","text":"<p>For users who want to fine-tune their sensors, the BME280 and SCD40 Temperature Offset entities can be manually adjusted to match the conditions in their home. The offset values are subtracted from the raw temperature &amp; humidity readings in the firmware to update the sensor readings in the home assistant entity. For example: scd40_temperature entity = raw scd40 temperature reading - scd40_offset.   </p> <p>By default, these offsets are preset to values based on our NIST certified thermometer, it's important to note that these values are calibrated for our environment. They might not be accurate for all settings. Therefore, by using a reference thermometer, users can adjust the difference between the readings to get a more accurate representation.   </p> <p>Users will also notice the <code>bme280_humidity_calibrated</code>, <code>scd40_humidity_calibrated</code>, <code>bme280_temperature_calibrated</code>, and <code>scd40_temperature_calibrated</code>entities. These values utilize the linear filter in the ESPHome firmware to adjust the readings based on our collected data. Again, due to environmental differences, these might not always be precise.</p>"},{"location":"products/general/simple-and-advanced-examples-of-temperature-%26-humidity-offsets/#modeling-the-relationship-between-sensors","title":"Modeling the Relationship Between Sensors","text":"<p>Another approach to getting accurate readings is to model the relationship between the ESP temperature and the other sensors compared against a reference temperature. This can be achieved by creating a template sensor in Home Assistant that employs a decision tree or our regression coefficients.</p> <p>Here's an example that can be added to a configuration YAML:</p> <pre><code>sensor:\n  - platform: template\n    sensors:\n      estimated_reference_temperature:\n        friendly_name: \"Estimated Temperature\"\n        unit_of_measurement: '\u00b0C'\n        value_template: &gt;\n          {{\n            0.3228 * states('sensor.apollo_msr_1_a79e24_esp_temperature') | float +\n            0.8702 * states('sensor.apollo_msr_1_a79e24_scd40_temperature') | float +\n            -0.1285 * states('sensor.apollo_msr_1_a79e24_bme280_temperature') | float +\n            -0.0491 * states('sensor.apollo_msr_1_a79e24_scd40_humidity') | float +\n            0.0851 * states('sensor.apollo_msr_1_a79e24_bme280_humidity') | float +\n            -17.4840\n          }}\n\n\n      estimated_reference_humidity:\n        friendly_name: \"Estimated Humidity\"\n        unit_of_measurement: '%'\n        value_template: &gt;\n          {{\n            -1.2468 * states('sensor.apollo_msr_1_a79e24_esp_temperature') | float +\n            -2.1959 * states('sensor.apollo_msr_1_a79e24_scd40_temperature') | float +\n            2.9604 * states('sensor.apollo_msr_1_a79e24_bme280_temperature') | float +\n            0.2380 * states('sensor.apollo_msr_1_a79e24_scd40_humidity') | float +\n            1.8283 * states('sensor.apollo_msr_1_a79e24_bme280_humidity') | float +\n            40.1686\n          }}\n</code></pre> <p>For users who want to gather their own data with a reference sensor and MSR-1 within their home, we recommend logging data to a CSV using the following YAML entries:</p> <pre><code>#Configuration.yaml\nnotify:\n  - platform: file\n    name: sensor_csv_log\n    filename: /config/sensor_log.csv\n    timestamp: False\n\n#Automations.yaml\n  - id: log_sensor_data_to_csv\n    alias: \"Log Sensor Data to CSV\"\n    trigger:\n      platform: time_pattern\n      minutes: \"/1\"  # Log data every minute to match reference sensor\n    action:\n      - service: notify.sensor_csv_log\n        data_template:\n          message: &gt;\n            {{ now().strftime('%Y-%m-%d %H:%M:%S') }},\n            {{ states('sensor.apollo_msr_1_a79e24_esp_temperature') | default('NA') }},\n            {{ states('sensor.apollo_msr_1_a79e24_scd40_temperature') | default('NA') }},\n            {{ states('sensor.apollo_msr_1_a79e24_bme280_temperature') | default('NA') }},\n            {{ states('sensor.apollo_msr_1_a79e24_scd40_humidity') | default('NA') }},\n            {{ states('sensor.apollo_msr_1_a79e24_bme280_humidity') | default('NA') }},\n            {{ states('number.apollo_msr_1_a79e24_bme280_temperature_offset') | default('NA') }},\n            {{ states('number.apollo_msr_1_a79e24_scd40_humidity_offset') | default('NA') }},\n            {{ states('number.apollo_msr_1_a79e24_bme280_humidity_offset') | default('NA') }},\n            {{ states('number.apollo_msr_1_a79e24_scd40_temperature_offset') | default('NA') }},\n            {{ states('sensor.apollo_msr_1_a79e24_uptime') | default('NA') }}\n</code></pre>"},{"location":"products/general/simple-and-advanced-examples-of-temperature-%26-humidity-offsets/#the-interrelation-of-temperature-and-humidity","title":"The Interrelation of Temperature and Humidity","text":"<p>It's important to understand that temperature and humidity share an interdependent relationship. When the air temperature rises, its capacity to hold moisture increases, which can decrease relative humidity levels. Conversely, when the temperature falls, the air's capacity to hold moisture decreases, leading to increased humidity. This relationship plays a significant role in how sensors detect and interpret readings, making it even more crucial to ensure accuracy.</p>"},{"location":"products/general/simple-and-advanced-examples-of-temperature-%26-humidity-offsets/#advanced-accuracy-with-gpio","title":"Advanced Accuracy with GPIO","text":"<p>For those seeking the highest accuracy, an advanced solution is available. The exposed mezzanine connector on the back of our Apollo boards can be utilized to connect a temperature/humidity sensor. This modification can dramatically improve both temperature and humidity readings, providing data that's as accurate as possible.</p>"},{"location":"products/general/apollo-youtube/ha-green-unboxing/","title":"Home Assistant Green Unboxing","text":""},{"location":"products/general/apollo-youtube/workshop-tour/","title":"Apollo Automation Workshop Tour","text":""},{"location":"products/general/calibrating-and-updating/claibrating-and-updating/","title":"Claibrating and updating","text":"<p>--8&lt;-- \"products/general/setup/calibrating-and-updating/updating-firmware.md\"</p>"},{"location":"products/general/calibrating-and-updating/co2-calibration-quick-mobile/","title":"CO2 Calibration - The Quick method - Desktop Only not mobile","text":""},{"location":"products/general/calibrating-and-updating/co2-calibration-quick-mobile/#this-article-will-guide-you-through-a-simple-calibration-of-your-co2-sensor-for-any-apollo-automation-device","title":"This article will guide you through a simple calibration of your CO2 sensor for any Apollo Automation device!","text":"<ol> <li>Go to your home assistant dashboard and hit the letter \"e\" - It will pop up with an entity filter and here we will type in \"Calibrate CO2\" and select the correct device. *HINT* If you cannot get this menu to pop-up, click somewhere on the home assistant dashboard then press your \"e\" key **HINT** </li> <li>DO NOT RUSH THIS  Go Plug your sensor in outside and let it sit for 5 minutes or more to get normalized readings DO NOT RUSH THIS</li> <li> <p>Click on the button that says \"PRESS\" and then you are done. </p> <ol> <li>Go get your sensor from outside and plug your sensor in wherever you want it!</li> </ol> </li> </ol>"},{"location":"products/general/calibrating-and-updating/co2-calibration/","title":"CO2 Calibration","text":"<p>1. Take your sensor outside (for a walk :D) and plug it in. Make sure it is connected to Home Assistant and let it sit powered on for 3-5 minutes outside before starting the calibration.</p> <p></p> <p>2. Navigate to your Home Assistant Dashboard and select settings</p> <p></p> <p>3. Select Devices &amp; Services</p> <p></p> <p>4. Select ESPHome</p> <p></p> <p>5. Find your sensor and click on the blue \u201c1 device\u201d link</p> <p></p> <p>6. Press the Calibrate SCD40 button and you are all set!</p> <p>If you do not see this button, either update your firmware or refer to this older revision</p> <p>It can take a few times clicking the calibrate for it to equalize correctly. If you don't see the SCD40 reporting 400-500 ppm then click it again.</p> <p></p> <p>7. Now your CO2 sensor should be calibrated! Be sure to setup some nice cards on your dashboard so you can monitor the CO2 levels. My bedroom's CO2 levels got dangerously high and I had to run my HVAC more frequently at night to circulate the air. See examples of cards and data below.</p> <p>Example Home Assistant Card</p> <p></p> <p>Dangerous CO2 levels in bedroom. Steep decline in level due to opening door, window and running fan.</p> <p></p> <p>Wisconsin Department of Health CO2 Level Chart</p> <p></p> <p>CO2 levels staying below 1500 ppm after changing HVAC fan schedule to circulate air more frequently. Need to increase air exchange to get below 1000 ppm for a safer environment.</p> <p></p>"},{"location":"products/general/calibrating-and-updating/updating-air-1/","title":"Updating air 1","text":"<p>--8&lt;-- \"products/general/setup/calibrating-and-updating/updating-firmware.md\"</p>"},{"location":"products/general/calibrating-and-updating/updating-firmware/","title":"Updating Firmware","text":""},{"location":"products/general/calibrating-and-updating/updating-firmware/#updating-through-esphome-addon","title":"Updating Through ESPHome Addon","text":"<ol> <li>In HomeAssistant open the ESPHome addon</li> <li>Or click this to Open your Home Assistant instance and show the dashboard of the ESPHome add-on.</li> <li>Make sure you are running the latest version of ESPHome</li> <li>On older hardware, it will not auto-update so you will have to uninstall and reinstall ESPHome</li> <li>Find the sensor you want to update and click the three dots in the bottom right</li> </ol> <p>5. Select \u201cValidate\u201d from the list</p> <p></p> <p>6. Once the validation completes, click \u201cInstall\u201d in the bottom right</p> <p></p> <p>7. Complete!</p>"},{"location":"products/general/calibrating-and-updating/updating-msr-1/","title":"Updating msr 1","text":"<p>--8&lt;-- \"products/general/setup/calibrating-and-updating/updating-firmware.md\"</p>"},{"location":"products/general/calibrating-and-updating/updating-msr-2/","title":"Updating msr 2","text":"<p>--8&lt;-- \"products/general/setup/calibrating-and-updating/updating-firmware.md\"</p>"},{"location":"products/general/calibrating-and-updating/updating-mtr-1/","title":"Updating mtr 1","text":"<p>--8&lt;-- \"products/general/setup/calibrating-and-updating/updating-firmware.md\"</p>"},{"location":"products/general/contact-us/Discord/","title":"Discord","text":""},{"location":"products/general/contact-us/Discord/#httpsdiscordcominvitemmngqpyf94","title":"https://discord.com/invite/mMNgQPyF94","text":""},{"location":"products/general/contact-us/Facebook/","title":"Facebook","text":""},{"location":"products/general/contact-us/Facebook/#httpswwwfacebookcomgroups296506776330405","title":"https://www.facebook.com/groups/296506776330405","text":""},{"location":"products/general/contact-us/GitHub/","title":"GitHub","text":""},{"location":"products/general/contact-us/GitHub/#httpsgithubcomapolloautomation","title":"https://github.com/ApolloAutomation","text":""},{"location":"products/general/contact-us/Instagram/","title":"Instagram","text":"<p>https://www.instagram.com/apollo_automation/</p>"},{"location":"products/general/contact-us/Reddit/","title":"Reddit","text":""},{"location":"products/general/contact-us/Reddit/#httpswwwredditcomrapolloautomation","title":"https://www.reddit.com/r/ApolloAutomation/","text":""},{"location":"products/general/contact-us/YouTube/","title":"YouTube","text":"<p>http://www.youtube.com/@ApolloAutomation</p>"},{"location":"products/general/contact-us/apollo-automation-shop/","title":"Apollo Automation Shop","text":""},{"location":"products/general/contact-us/apollo-automation-shop/#apollo-automation-shop_1","title":"Apollo Automation Shop","text":""},{"location":"products/general/contact-us/our-team/","title":"Our Team","text":""},{"location":"products/general/contact-us/our-team/#_1","title":"Our Team","text":"<p>Our Team Page </p>"},{"location":"products/general/setup/adding-apollo-devices-to-hidden-networks/","title":"Adding Apollo Devices To Hidden Networks","text":"<p>Thanks to Panzer from our Discord.</p> <p>I took stock MSR1s, created a config file in ESPHome under HA, added the hidden networks and the fast_connect option, and installed via \"plug into this computer.\" I plugged them into my desktop, downloaded the compiled firmware, and installed it via the web-ESPHome bit. Use \"install,\" not \"prepare for first use.\" The YAML file is below; the secrets file has the Wi-Fi info. After that, you can unplug it from your computer and plug it in somewhere else. (Please alter the \"name\" and \"friendly name\" to something unique for each of your MSR1 units in a way that works for you. In my example, this is my 6th unit.)</p> <p></p> <p></p> <pre><code>substitutions:\n  name: apollo-msr1-06\n  friendly_name: Apollo MSR1 06\npackages:\n  ApolloAutomation.MSR-1: github://ApolloAutomation/MSR-1/Integrations/ESPHome/MSR-1.yaml\nesphome:\n  name: ${name}\n  name_add_mac_suffix: false\n  friendly_name: ${friendly_name}\napi:\n  encryption:\n    key: makeyourownrandomkeyhere=\n\n\nwifi:\n  ssid: !secret wifi_ssid\n  password: !secret wifi_password\n  fast_connect: True\n</code></pre> <p>Use this link for ESPHome web https://web.esphome.io/</p> <p></p> <p></p> <p></p>"},{"location":"products/general/setup/adjusting-wifi-power/","title":"Adjusting Wifi Power Save","text":"<p>The ESP chips produce a significant amount of energy constantly using wifi. Here is how to adjust the wifi power save mode</p> <ol> <li>In ESPHome's addon, click on \"Edit\" for the sensor you want to adjust <ol> <li></li> </ol> </li> <li>Add the code to adjust the power <ol> <li><code>wifi:       ssid: !secret wifi_ssid       password: !secret wifi_password       power_save_mode: HIGH</code></li> <li></li> </ol> </li> <li>In the top right, click on \"Save\" then \"Install\"</li> </ol>"},{"location":"products/general/setup/bluetooth-tracking/","title":"Bluetooth Tracking","text":""},{"location":"products/general/setup/bluetooth-tracking/#apple-iphoneiwatch","title":"Apple iPhone/iWatch","text":""},{"location":"products/general/setup/bluetooth-tracking/#alternative-hacs-integration-iphone-detect","title":"Alternative HACS Integration: iPhone Detect","text":"<p>https://community.home-assistant.io/t/implement-espresense-fuctionality-in-home-assistant-taking-advantage-of-ble-proxy-of-esphome/524019/6 </p> <p>Thanks to user Jacob Pfeifer! Ok, so looks like I've got signal strength tracking working for Apple watches by getting the mac address from the home assistant private ble device integration. Here's a quick write-up if anyone else is interested. The end of the doc has a complete configuration file example.</p> <pre><code># Tracking an Apple Watch in esphome\nUsing esphome on an Apollo msr-1 to track an Apple Watch\n\n## Acknowledgements:\nThe following github repo was used as a starting point for this configuration: https://github.com/dalehumby/ESPHome-Apple-Watch-detection\n\n## RSSI Tracking\n1.) Setup your apple watch in the \"Private BLE Device\" integration by following the instructions on the integration page: https://www.home-assistant.io/integrations/private_ble_device/\n\n2.) Create a text sensor in the esphome config that grabs the apple watch current mac address from home assistant:\n```yaml\ntext_sensor:\n  - platform: homeassistant\n    name: \"Apple Watch Current MAC Address\"\n    id: apple_watch_mac\n    entity_id: device_tracker.your_apple_watch_home_assistant_id\n    attribute: current_address\n</code></pre> <p>3.)  Create a template sensor for storing and transmitting the rssi value: <pre><code>sensor:\n  - platform: template\n    id: apple_watch_rssi\n    name: \"Apple Watch RSSI\"\n    device_class: signal_strength\n    unit_of_measurement: dBm\n    accuracy_decimals: 0\n    filters:\n      - exponential_moving_average:\n          alpha: 0.3\n          send_every: 1\n</code></pre></p> <p>4.) Create a custom ble tracker that uses the mac address from home assistant to match the device: <pre><code>esp32_ble_tracker:\n  scan_parameters:\n    interval: 1.2s\n    window: 500ms\n    active: false\n  on_ble_advertise:\n    - then:\n      - lambda: |-\n          for (auto data : x.get_manufacturer_datas()) {\n            if(x.address_str() == id(apple_watch_mac).state) {\n              id(apple_watch_rssi).publish_state(x.get_rssi());\n            }\n          }\n</code></pre></p> <p>5) Ensure the power save mode for wifi is set to light (msr-1 defaults to using none which does not work with bluetooth tracking): <pre><code>wifi:\n  power_save_mode: light\n</code></pre></p> <p>At this point if you install the changes on the device you should be successfully tracking the rssi for your apple watch. If you want you can optionally add some configuration for a basic presence detection sensor by doing the following:</p>"},{"location":"products/general/setup/bluetooth-tracking/#optional-presence-detection-section","title":"OPTIONAL PRESENCE DETECTION SECTION","text":"<p>6) Create configuration values for detection signal strength: <pre><code>number:\n  - platform: template\n    name: \"RSSI Presence Level\"\n    id: rssi_present\n    icon: \"mdi:arrow-collapse-right\"\n    optimistic: true\n    min_value: -100\n    max_value: -35\n    initial_value: -60\n    step: 1\n    entity_category: CONFIG\n    restore_value: true\n    update_interval: never\n  - platform: template\n    name: \"RSSI Absence Level\"\n    id: rssi_not_present\n    icon: \"mdi:arrow-collapse-right\"\n    optimistic: true\n    min_value: -100\n    max_value: -35\n    initial_value: -70\n    step: 1\n    entity_category: CONFIG\n    restore_value: true\n    update_interval: never\n</code></pre></p> <p>7) Create a sensor for storing and filtering the presence value: <pre><code>sensor:\n  - platform: template\n    id: room_presence_debounce\n    filters:\n      - sliding_window_moving_average:\n          window_size: 3\n          send_every: 1\n</code></pre></p> <p>8) Create a sensor for transmitting the filtered presence state: <pre><code>binary_sensor:\n  - platform: template\n    id: room_presence\n    name: \"Apple Watch Presence\"\n    device_class: occupancy\n    lambda: |-\n      if (id(room_presence_debounce).state &gt; 0.99) {\n        return true;\n      } else if (id(room_presence_debounce).state &lt; 0.01) {\n        return false;\n      } else {\n        return id(room_presence).state;\n      }\n</code></pre></p> <p>9) Update the rssi value to set the presence value when it receives a new rssi value: <pre><code>sensor:\n  - platform: template\n    id: apple_watch_rssi\n    name: \"Apple Watch RSSI\"\n    device_class: signal_strength\n    unit_of_measurement: dBm\n    accuracy_decimals: 0\n    filters:\n      - exponential_moving_average:\n          alpha: 0.3\n          send_every: 1\n    on_value:\n      then:\n        - lambda: |-\n            if (id(apple_watch_rssi).state &gt; id(rssi_present).state) {\n              id(room_presence_debounce).publish_state(1);\n            } else if (id(apple_watch_rssi).state &lt; id(rssi_not_present).state) {\n              id(room_presence_debounce).publish_state(0);\n            }\n        - script.execute: presence_timeout  # Publish 0 if no rssi received\n</code></pre></p> <p>Now once you install the esphome changes you should be able to go to the device and set db values for the presence detection and also should see a presence sensor state.</p>"},{"location":"products/general/setup/bluetooth-tracking/#complete-configuration","title":"COMPLETE CONFIGURATION","text":"<p>A complete example of a configuration: <pre><code>substitutions:\n  name: apollo-msr-1-6c7a64\n  friendly_name: Living Room Multisensor\n  roomname: Living Room\n  yourname: Jacob\n\npackages:\n  ApolloAutomation.MSR-1: github://ApolloAutomation/MSR-1/Integrations/ESPHome/MSR-1.yaml\nesphome:\n  name: ${name}\n  name_add_mac_suffix: false\n  friendly_name: ${friendly_name}\napi:\n  encryption:\n    key: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n\n\nesp32_ble_tracker:\n  scan_parameters:\n    interval: 1.2s\n    window: 500ms\n    active: false\n  on_ble_advertise:\n    - then:\n      - lambda: |-\n          for (auto data : x.get_manufacturer_datas()) {\n            if(x.address_str() == id(jacobs_watch_mac).state) {\n              id(apple_watch_rssi).publish_state(x.get_rssi());\n            }\n          }\ntext_sensor:\n  - platform: homeassistant\n    name: \"Apple Watch Current MAC Address\"\n    id: jacobs_watch_mac\n    entity_id: device_tracker.jacob_s_apple_watch\n    attribute: current_address\n\nsensor:\n  - platform: template\n    id: apple_watch_rssi\n    name: \"$yourname Apple Watch $roomname RSSI\"\n    device_class: signal_strength\n    unit_of_measurement: dBm\n    accuracy_decimals: 0\n    filters:\n      - exponential_moving_average:\n          alpha: 0.3\n          send_every: 1\n    on_value:\n      then:\n        - lambda: |-\n            if (id(apple_watch_rssi).state &gt; id(rssi_present).state) {\n              id(room_presence_debounce).publish_state(1);\n            } else if (id(apple_watch_rssi).state &lt; id(rssi_not_present).state) {\n              id(room_presence_debounce).publish_state(0);\n            }\n        - script.execute: presence_timeout  # Publish 0 if no rssi received\n\n  - platform: template\n    id: room_presence_debounce\n    filters:\n      - sliding_window_moving_average:\n          window_size: 3\n          send_every: 1\n\n\nbinary_sensor:\n  - platform: template\n    id: room_presence\n    name: \"$yourname $roomname Presence\"\n    device_class: occupancy\n    lambda: |-\n      if (id(room_presence_debounce).state &gt; 0.99) {\n        return true;\n      } else if (id(room_presence_debounce).state &lt; 0.01) {\n        return false;\n      } else {\n        return id(room_presence).state;\n      }\n\nscript:\n  # Publish event every 30 seconds when no rssi received\n  id: presence_timeout\n  mode: restart\n  then:\n    - delay: 30s\n    - lambda: |-\n        id(room_presence_debounce).publish_state(0);\n    - script.execute: presence_timeout\n\nnumber:\n  - platform: template\n    name: \"RSSI Presence Level\"\n    id: rssi_present\n    icon: \"mdi:arrow-collapse-right\"\n    optimistic: true\n    min_value: -100\n    max_value: -35\n    initial_value: -60\n    step: 1\n    entity_category: CONFIG\n    restore_value: true\n    update_interval: never\n  - platform: template\n    name: \"RSSI Absence Level\"\n    id: rssi_not_present\n    icon: \"mdi:arrow-collapse-right\"\n    optimistic: true\n    min_value: -100\n    max_value: -35\n    initial_value: -70\n    step: 1\n    entity_category: CONFIG\n    restore_value: true\n    update_interval: never\n\nwifi:\n  power_save_mode: light\n  ssid: !secret wifi_ssid\n  password: !secret wifi_password\n</code></pre></p> <p>```</p>"},{"location":"products/general/setup/bluetooth-tracking/#android-helpful-links","title":"Android Helpful links:","text":"<p>ESP32 Bluetooth Low Energy Tracker Hub iBeacon support for ble_presence ESP32 Bluetooth Low Energy Beacon iBeacon Region</p> <ol> <li>Install the iBeacon integration in HA iBeacon Install Guide</li> <li>Install the Home Assistant App on your device Android Apple</li> <li> <p>Navigate to the HA settings  </p> <p> 4. Select Companion app  </p> <p> 5. Select Manage sensors  </p> <p> 6. Turn on the \"BLE Transmitter\"  </p> <p> 7. After opening BLE transmitter and turning it on, then scroll down to get the iBeacon unique ID  </p> <p> 8. Add it to the ESPHome yaml config for the MSR-1  </p> <p> 9. Be sure to add \"power_save_mode: LIGHT\" to the wifi section  </p> <p>```</p> </li> </ol>"},{"location":"products/general/setup/bluetooth-tracking/#example-configyaml","title":"Example config.yaml","text":"<p>wifi:   ssid: !secret wifi_ssid   password: !secret wifi_password   power_save_mode: LIGHT</p> <p>esp32_ble_tracker:</p> <p>binary_sensor:   - platform: ble_presence     ibeacon_uuid: '77a6438d-ea95-4522-b46c-cb2b4412076f'     ibeacon_major: 100     ibeacon_minor: 1     name: \"Jane's Phone\"</p> <p>``` 10. Should be all set!</p>"},{"location":"products/general/setup/bluetooth-tracking/#thanks-to-our-discord-user-albuquerquefx-for-the-information-below","title":"Thanks to our Discord user albuquerquefx for the information below!","text":"<p>For those interested in using their MSR-1 as a Bluetooth proxy while also actively scanning for BLE devices, you'll need to add the following to your ESP32 YAML file (I'm using a 1.5-second scan interval with a 750ms window for sensing BLE beacons):</p> <p>esp32_ble_tracker:  id: ${name}_ble_tracker  scan_parameters:  interval: 1500ms  window: 750ms  active: true</p> <p>bluetooth_proxy:  active: true</p> <p>Additionally, you need to include this entry in your existing Wi-Fi section:</p> <p>power_save_mode: light</p> <p>Once complete, after a few minutes within the presence of any iBeacon device within listening distance of your MSR-1, Home Assistant should announce the presence of an iBeacon Tracker integration on your settings page. While I didn't capture a screenshot of it, it's now installed and sensing things.</p> <p>If you encounter a device with a blank name (e.g., anything Android), you'll need to click \"Configure\" and enter the UUID manually. This is because Home Assistant does not allow devices with empty names (interestingly, their own companion app permits forcing an Android to become an iBeacon but then doesn't require a name field).</p> <p>For devices where you don't know the IRK, you may have to wait about 300 seconds for your iBeacon Tracker to process 10 different iterations of the same UUID but with the last four characters randomly changed. Once ten instances have appeared, the iBeacon Tracker integration should recognize they're all the same device and combine them into a single tracker element. Just be patient, though it can be a bit frustrating.</p>"},{"location":"products/general/setup/getting-started-air1/","title":"Getting Started","text":"<p>This will walk you through the process of connecting your new Apollo Automation sensor to Home Assistant through ESPHome. If at any point you get stuck, join our Discord for some help.</p>"},{"location":"products/general/setup/getting-started-air1/#connecting-through-hotspot","title":"Connecting Through Hotspot","text":"<p>To connect through the sensor's onboard hotspot follow the below:</p> <ol> <li>Plug the sensor into a quality power brick. They require 5v and under an amp so most phone chargers will be fine. ESP devices are sensitive to power fluctuations and users have had some issues with really cheap power bricks. If your device is restarting or unavailable please try a different power brick.</li> <li>On your phone or PC, open the wifi settings and connect to \"Apollo MSR-1 Hotspot\", it might take a minute for the wifi network to show up</li> <li>Once connected it should automatically open a dashboard for your sensor <ul> <li>If this does not automatically open the dashboard, please open your web browser and go to http://192.168.4.1</li> </ul> </li> <li>Select the wifi network that you would like your sensor to connect to</li> <li>Input the wifi password. After connecting, the sensor's dashboard will automatically close. You've successfully connected your sensor, please check out the \"Connecting Sensor To Home Assistant\" section for the next steps.</li> </ol>"},{"location":"products/general/setup/getting-started-air1/#connecting-to-esphome-addon","title":"Connecting To ESPHome Addon","text":"<p>You can connect to the ESPHome addon in Home Assistant to easily update your device. If you don't have ESPHome addon installed you can follow the steps here: Installing ESPHome Dashboard</p> <p>Make sure to fill out your Wi-Fi details in the SECRETS section by clicking on the SECRETS Image below.</p> <p></p> <pre><code># Your Wi-Fi SSID and password - keep the quotes and just replace the name and password between the quotes!\nwifi_ssid: \"your-wifi-ssid-here\"\nwifi_password: \"your-wifi-pass-here\"\n</code></pre> <ol> <li> <ol> <li>Once installed you'll have the addon's icon on the left side of your HA instance:          1.          2. Click on adopt for your sensor         3. Then adopt again</li> </ol> <p></p> </li> </ol>"},{"location":"products/general/setup/getting-started-air1/#connecting-sensor-to-home-assistant","title":"Connecting Sensor To Home Assistant","text":"<ol> <li>Once you connect your sensor to wifi through the above process, open up Home Assistant. Then in the bottom left click on \u201cSettings\u201d</li> </ol> <ol> <li>From there click on \u201cDevices And Services\u201d</li> </ol> <ol> <li> <p>Look for the discovered sensor. It should be named \u201capollo-msr-mk1\u201d with some random letters and numbers (Those come from the device's mac address). Click on \u201cConfigure\u201d and then \u201cSubmit\u201d.</p> <ol> <li>If you do not see the device as discovered, make sure you have the ESPHome integration installed to Home Assistant you can find their instructions here</li> </ol> </li> </ol> <p></p> <ol> <li>Add the sensor to ESPHome. It will now show up in the ESPHome integration</li> </ol> <p></p> <ol> <li>The sensor has now been added to Home Assistant and you can use it as you please. For ideas please visit our ideas section or join our Discord</li> </ol> <p></p>"},{"location":"products/general/setup/getting-started-air1/#6-next-steps","title":"6. Next steps:","text":""},{"location":"products/general/setup/getting-started-air1/#_1","title":"Getting Started","text":"<p>Head on over to the CO2 Calibration page https://wiki.apolloautomation.com/books/general/page/co2-calibration to calibrate your new sensor.</p>"},{"location":"products/general/setup/getting-started-air1/#note-this-is-not-necessary-if-you-did-not-purchase-the-co2-sensor-addon","title":"Note: This is not necessary if you did not purchase the CO2 sensor addon!","text":""},{"location":"products/general/setup/getting-started-air1/#sensors","title":"Sensors","text":"<p>You should now have the sensor added! If you have any problems or need help please join our Discord and post in the #support channel. Or just join to check out product development and community spotlights. Our team monitors that and can quickly respond there. Or visit our ideas section to find cool ways to display the information</p>"},{"location":"products/general/setup/getting-started-air1/#looking-for-ideas-on-how-to-use-your-sensor","title":"Looking For Ideas On How To Use Your Sensor?","text":"<ul> <li>Graph Co2 Over Time</li> <li>Turn The LED Red When C02 Is Over 1000 ppm</li> <li>Send You An Alert When Motion Is Detected After 11 pm</li> </ul> <p>Or check out our #show-off channel in the Apollo Discord for community submissions</p>"},{"location":"products/general/setup/getting-started-msr1/","title":"Getting Started","text":"<p>This will walk you through the process of connecting your new Apollo Automation sensor to Home Assistant through ESPHome. If at any point you get stuck, join our Discord for some help.</p>"},{"location":"products/general/setup/getting-started-msr1/#connecting-through-hotspot","title":"Connecting Through Hotspot","text":"<p>To connect through the sensor's onboard hotspot follow the below:</p> <ol> <li>Plug the sensor into a quality power brick. They require 5v and under an amp so most phone chargers will be fine. ESP devices are sensitive to power fluctuations and users have had some issues with really cheap power bricks. If your device is restarting or unavailable please try a different power brick.</li> <li>On your phone or PC, open the wifi settings and connect to \"Apollo MSR-1 Hotspot\", it might take a minute for the wifi network to show up</li> <li>Once connected it should automatically open a dashboard for your sensor <ul> <li>If this does not automatically open the dashboard, please open your web browser and go to http://192.168.4.1</li> </ul> </li> <li>Select the wifi network that you would like your sensor to connect to</li> <li>Input the wifi password. After connecting, the sensor's dashboard will automatically close. You've successfully connected your sensor, please check out the \"Connecting Sensor To Home Assistant\" section for the next steps.</li> </ol>"},{"location":"products/general/setup/getting-started-msr1/#connecting-to-esphome-addon","title":"Connecting To ESPHome Addon","text":"<p>You can connect to the ESPHome addon in Home Assistant to easily update your device. If you don't have ESPHome addon installed you can follow the steps here: Installing ESPHome Dashboard</p> <p>Make sure to fill out your Wi-Fi details in the SECRETS section by clicking on the SECRETS Image below.</p> <p></p> <pre><code># Your Wi-Fi SSID and password - keep the quotes and just replace the name and password between the quotes!\nwifi_ssid: \"your-wifi-ssid-here\"\nwifi_password: \"your-wifi-pass-here\"\n</code></pre> <ol> <li> <ol> <li>Once installed you'll have the addon's icon on the left side of your HA instance:          1.          2. Click on adopt for your sensor         3. Then adopt again</li> </ol> <p></p> </li> </ol>"},{"location":"products/general/setup/getting-started-msr1/#connecting-sensor-to-home-assistant","title":"Connecting Sensor To Home Assistant","text":"<ol> <li>Once you connect your sensor to wifi through the above process, open up Home Assistant. Then in the bottom left click on \u201cSettings\u201d</li> </ol> <ol> <li>From there click on \u201cDevices And Services\u201d</li> </ol> <ol> <li> <p>Look for the discovered sensor. It should be named \u201capollo-msr-mk1\u201d with some random letters and numbers (Those come from the device's mac address). Click on \u201cConfigure\u201d and then \u201cSubmit\u201d.</p> <ol> <li>If you do not see the device as discovered, make sure you have the ESPHome integration installed to Home Assistant you can find their instructions here</li> </ol> </li> </ol> <p></p> <ol> <li>Add the sensor to ESPHome. It will now show up in the ESPHome integration</li> </ol> <p></p> <ol> <li>The sensor has now been added to Home Assistant and you can use it as you please. For ideas please visit our ideas section or join our Discord</li> </ol> <p></p>"},{"location":"products/general/setup/getting-started-msr1/#6-next-steps","title":"6. Next steps:","text":""},{"location":"products/general/setup/getting-started-msr1/#_1","title":"Getting Started","text":"<p>Head on over to the CO2 Calibration page https://wiki.apolloautomation.com/books/general/page/co2-calibration to calibrate your new sensor.</p>"},{"location":"products/general/setup/getting-started-msr1/#note-this-is-not-necessary-if-you-did-not-purchase-the-co2-sensor-addon","title":"Note: This is not necessary if you did not purchase the CO2 sensor addon!","text":""},{"location":"products/general/setup/getting-started-msr1/#sensors","title":"Sensors","text":"<p>You should now have the sensor added! If you have any problems or need help please join our Discord and post in the #support channel. Or just join to check out product development and community spotlights. Our team monitors that and can quickly respond there. Or visit our ideas section to find cool ways to display the information</p>"},{"location":"products/general/setup/getting-started-msr1/#looking-for-ideas-on-how-to-use-your-sensor","title":"Looking For Ideas On How To Use Your Sensor?","text":"<ul> <li>Graph Co2 Over Time</li> <li>Turn The LED Red When C02 Is Over 1000 ppm</li> <li>Send You An Alert When Motion Is Detected After 11 pm</li> </ul> <p>Or check out our #show-off channel in the Apollo Discord for community submissions</p>"},{"location":"products/general/setup/getting-started-msr2/","title":"Getting Started","text":"<p>This will walk you through the process of connecting your new Apollo Automation sensor to Home Assistant through ESPHome. If at any point you get stuck, join our Discord for some help.</p>"},{"location":"products/general/setup/getting-started-msr2/#connecting-through-hotspot","title":"Connecting Through Hotspot","text":"<p>To connect through the sensor's onboard hotspot follow the below:</p> <ol> <li>Plug the sensor into a quality power brick. They require 5v and under an amp so most phone chargers will be fine. ESP devices are sensitive to power fluctuations and users have had some issues with really cheap power bricks. If your device is restarting or unavailable please try a different power brick.</li> <li>On your phone or PC, open the wifi settings and connect to \"Apollo MSR-1 Hotspot\", it might take a minute for the wifi network to show up</li> <li>Once connected it should automatically open a dashboard for your sensor <ul> <li>If this does not automatically open the dashboard, please open your web browser and go to http://192.168.4.1</li> </ul> </li> <li>Select the wifi network that you would like your sensor to connect to</li> <li>Input the wifi password. After connecting, the sensor's dashboard will automatically close. You've successfully connected your sensor, please check out the \"Connecting Sensor To Home Assistant\" section for the next steps.</li> </ol>"},{"location":"products/general/setup/getting-started-msr2/#connecting-to-esphome-addon","title":"Connecting To ESPHome Addon","text":"<p>You can connect to the ESPHome addon in Home Assistant to easily update your device. If you don't have ESPHome addon installed you can follow the steps here: Installing ESPHome Dashboard</p> <p>Make sure to fill out your Wi-Fi details in the SECRETS section by clicking on the SECRETS Image below.</p> <p></p> <pre><code># Your Wi-Fi SSID and password - keep the quotes and just replace the name and password between the quotes!\nwifi_ssid: \"your-wifi-ssid-here\"\nwifi_password: \"your-wifi-pass-here\"\n</code></pre> <ol> <li> <ol> <li>Once installed you'll have the addon's icon on the left side of your HA instance:          1.          2. Click on adopt for your sensor         3. Then adopt again</li> </ol> <p></p> </li> </ol>"},{"location":"products/general/setup/getting-started-msr2/#connecting-sensor-to-home-assistant","title":"Connecting Sensor To Home Assistant","text":"<ol> <li>Once you connect your sensor to wifi through the above process, open up Home Assistant. Then in the bottom left click on \u201cSettings\u201d</li> </ol> <ol> <li>From there click on \u201cDevices And Services\u201d</li> </ol> <ol> <li> <p>Look for the discovered sensor. It should be named \u201capollo-msr-mk1\u201d with some random letters and numbers (Those come from the device's mac address). Click on \u201cConfigure\u201d and then \u201cSubmit\u201d.</p> <ol> <li>If you do not see the device as discovered, make sure you have the ESPHome integration installed to Home Assistant you can find their instructions here</li> </ol> </li> </ol> <p></p> <ol> <li>Add the sensor to ESPHome. It will now show up in the ESPHome integration</li> </ol> <p></p> <ol> <li>The sensor has now been added to Home Assistant and you can use it as you please. For ideas please visit our ideas section or join our Discord</li> </ol> <p></p>"},{"location":"products/general/setup/getting-started-msr2/#6-next-steps","title":"6. Next steps:","text":""},{"location":"products/general/setup/getting-started-msr2/#_1","title":"Getting Started","text":"<p>Head on over to the CO2 Calibration page https://wiki.apolloautomation.com/books/general/page/co2-calibration to calibrate your new sensor.</p>"},{"location":"products/general/setup/getting-started-msr2/#note-this-is-not-necessary-if-you-did-not-purchase-the-co2-sensor-addon","title":"Note: This is not necessary if you did not purchase the CO2 sensor addon!","text":""},{"location":"products/general/setup/getting-started-msr2/#sensors","title":"Sensors","text":"<p>You should now have the sensor added! If you have any problems or need help please join our Discord and post in the #support channel. Or just join to check out product development and community spotlights. Our team monitors that and can quickly respond there. Or visit our ideas section to find cool ways to display the information</p>"},{"location":"products/general/setup/getting-started-msr2/#looking-for-ideas-on-how-to-use-your-sensor","title":"Looking For Ideas On How To Use Your Sensor?","text":"<ul> <li>Graph Co2 Over Time</li> <li>Turn The LED Red When C02 Is Over 1000 ppm</li> <li>Send You An Alert When Motion Is Detected After 11 pm</li> </ul> <p>Or check out our #show-off channel in the Apollo Discord for community submissions</p>"},{"location":"products/general/setup/getting-started-mtr1/","title":"Getting Started","text":"<p>This will walk you through the process of connecting your new Apollo Automation sensor to Home Assistant through ESPHome. If at any point you get stuck, join our Discord for some help.</p>"},{"location":"products/general/setup/getting-started-mtr1/#connecting-through-hotspot","title":"Connecting Through Hotspot","text":"<p>To connect through the sensor's onboard hotspot follow the below:</p> <ol> <li>Plug the sensor into a quality power brick. They require 5v and under an amp so most phone chargers will be fine. ESP devices are sensitive to power fluctuations and users have had some issues with really cheap power bricks. If your device is restarting or unavailable please try a different power brick.</li> <li>On your phone or PC, open the wifi settings and connect to \"Apollo MSR-1 Hotspot\", it might take a minute for the wifi network to show up</li> <li>Once connected it should automatically open a dashboard for your sensor <ul> <li>If this does not automatically open the dashboard, please open your web browser and go to http://192.168.4.1</li> </ul> </li> <li>Select the wifi network that you would like your sensor to connect to</li> <li>Input the wifi password. After connecting, the sensor's dashboard will automatically close. You've successfully connected your sensor, please check out the \"Connecting Sensor To Home Assistant\" section for the next steps.</li> </ol>"},{"location":"products/general/setup/getting-started-mtr1/#connecting-to-esphome-addon","title":"Connecting To ESPHome Addon","text":"<p>You can connect to the ESPHome addon in Home Assistant to easily update your device. If you don't have ESPHome addon installed you can follow the steps here: Installing ESPHome Dashboard</p> <p>Make sure to fill out your Wi-Fi details in the SECRETS section by clicking on the SECRETS Image below.</p> <p></p> <pre><code># Your Wi-Fi SSID and password - keep the quotes and just replace the name and password between the quotes!\nwifi_ssid: \"your-wifi-ssid-here\"\nwifi_password: \"your-wifi-pass-here\"\n</code></pre> <ol> <li> <ol> <li>Once installed you'll have the addon's icon on the left side of your HA instance:          1.          2. Click on adopt for your sensor         3. Then adopt again</li> </ol> <p></p> </li> </ol>"},{"location":"products/general/setup/getting-started-mtr1/#connecting-sensor-to-home-assistant","title":"Connecting Sensor To Home Assistant","text":"<ol> <li>Once you connect your sensor to wifi through the above process, open up Home Assistant. Then in the bottom left click on \u201cSettings\u201d</li> </ol> <ol> <li>From there click on \u201cDevices And Services\u201d</li> </ol> <ol> <li> <p>Look for the discovered sensor. It should be named \u201capollo-msr-mk1\u201d with some random letters and numbers (Those come from the device's mac address). Click on \u201cConfigure\u201d and then \u201cSubmit\u201d.</p> <ol> <li>If you do not see the device as discovered, make sure you have the ESPHome integration installed to Home Assistant you can find their instructions here</li> </ol> </li> </ol> <p></p> <ol> <li>Add the sensor to ESPHome. It will now show up in the ESPHome integration</li> </ol> <p></p> <ol> <li>The sensor has now been added to Home Assistant and you can use it as you please. For ideas please visit our ideas section or join our Discord</li> </ol> <p></p>"},{"location":"products/general/setup/getting-started-mtr1/#6-next-steps","title":"6. Next steps:","text":""},{"location":"products/general/setup/getting-started-mtr1/#_1","title":"Getting Started","text":"<p>Head on over to the CO2 Calibration page https://wiki.apolloautomation.com/books/general/page/co2-calibration to calibrate your new sensor.</p>"},{"location":"products/general/setup/getting-started-mtr1/#note-this-is-not-necessary-if-you-did-not-purchase-the-co2-sensor-addon","title":"Note: This is not necessary if you did not purchase the CO2 sensor addon!","text":""},{"location":"products/general/setup/getting-started-mtr1/#sensors","title":"Sensors","text":"<p>You should now have the sensor added! If you have any problems or need help please join our Discord and post in the #support channel. Or just join to check out product development and community spotlights. Our team monitors that and can quickly respond there. Or visit our ideas section to find cool ways to display the information</p>"},{"location":"products/general/setup/getting-started-mtr1/#looking-for-ideas-on-how-to-use-your-sensor","title":"Looking For Ideas On How To Use Your Sensor?","text":"<ul> <li>Graph Co2 Over Time</li> <li>Turn The LED Red When C02 Is Over 1000 ppm</li> <li>Send You An Alert When Motion Is Detected After 11 pm</li> </ul> <p>Or check out our #show-off channel in the Apollo Discord for community submissions</p>"},{"location":"products/general/setup/getting-started-plt1/","title":"Getting Started","text":"<p>This will walk you through the process of connecting your new Apollo Automation sensor to Home Assistant through ESPHome. If at any point you get stuck, join our Discord for some help.</p>"},{"location":"products/general/setup/getting-started-plt1/#connecting-through-hotspot","title":"Connecting Through Hotspot","text":"<p>To connect through the sensor's onboard hotspot follow the below:</p> <ol> <li>Plug the sensor into a quality power brick. They require 5v and under an amp so most phone chargers will be fine. ESP devices are sensitive to power fluctuations and users have had some issues with really cheap power bricks. If your device is restarting or unavailable please try a different power brick.</li> <li>On your phone or PC, open the wifi settings and connect to \"Apollo MSR-1 Hotspot\", it might take a minute for the wifi network to show up</li> <li>Once connected it should automatically open a dashboard for your sensor <ul> <li>If this does not automatically open the dashboard, please open your web browser and go to http://192.168.4.1</li> </ul> </li> <li>Select the wifi network that you would like your sensor to connect to</li> <li>Input the wifi password. After connecting, the sensor's dashboard will automatically close. You've successfully connected your sensor, please check out the \"Connecting Sensor To Home Assistant\" section for the next steps.</li> </ol>"},{"location":"products/general/setup/getting-started-plt1/#connecting-to-esphome-addon","title":"Connecting To ESPHome Addon","text":"<p>You can connect to the ESPHome addon in Home Assistant to easily update your device. If you don't have ESPHome addon installed you can follow the steps here: Installing ESPHome Dashboard</p> <p>Make sure to fill out your Wi-Fi details in the SECRETS section by clicking on the SECRETS Image below.</p> <p></p> <pre><code># Your Wi-Fi SSID and password - keep the quotes and just replace the name and password between the quotes!\nwifi_ssid: \"your-wifi-ssid-here\"\nwifi_password: \"your-wifi-pass-here\"\n</code></pre> <ol> <li> <ol> <li>Once installed you'll have the addon's icon on the left side of your HA instance:          1.          2. Click on adopt for your sensor         3. Then adopt again</li> </ol> <p></p> </li> </ol>"},{"location":"products/general/setup/getting-started-plt1/#connecting-sensor-to-home-assistant","title":"Connecting Sensor To Home Assistant","text":"<ol> <li>Once you connect your sensor to wifi through the above process, open up Home Assistant. Then in the bottom left click on \u201cSettings\u201d</li> </ol> <ol> <li>From there click on \u201cDevices And Services\u201d</li> </ol> <ol> <li> <p>Look for the discovered sensor. It should be named \u201capollo-msr-mk1\u201d with some random letters and numbers (Those come from the device's mac address). Click on \u201cConfigure\u201d and then \u201cSubmit\u201d.</p> <ol> <li>If you do not see the device as discovered, make sure you have the ESPHome integration installed to Home Assistant you can find their instructions here</li> </ol> </li> </ol> <p></p> <ol> <li>Add the sensor to ESPHome. It will now show up in the ESPHome integration</li> </ol> <p></p> <ol> <li>The sensor has now been added to Home Assistant and you can use it as you please. For ideas please visit our ideas section or join our Discord</li> </ol> <p></p>"},{"location":"products/general/setup/getting-started-plt1/#6-next-steps","title":"6. Next steps:","text":""},{"location":"products/general/setup/getting-started-plt1/#_1","title":"Getting Started","text":"<p>Head on over to the CO2 Calibration page https://wiki.apolloautomation.com/books/general/page/co2-calibration to calibrate your new sensor.</p>"},{"location":"products/general/setup/getting-started-plt1/#note-this-is-not-necessary-if-you-did-not-purchase-the-co2-sensor-addon","title":"Note: This is not necessary if you did not purchase the CO2 sensor addon!","text":""},{"location":"products/general/setup/getting-started-plt1/#sensors","title":"Sensors","text":"<p>You should now have the sensor added! If you have any problems or need help please join our Discord and post in the #support channel. Or just join to check out product development and community spotlights. Our team monitors that and can quickly respond there. Or visit our ideas section to find cool ways to display the information</p>"},{"location":"products/general/setup/getting-started-plt1/#looking-for-ideas-on-how-to-use-your-sensor","title":"Looking For Ideas On How To Use Your Sensor?","text":"<ul> <li>Graph Co2 Over Time</li> <li>Turn The LED Red When C02 Is Over 1000 ppm</li> <li>Send You An Alert When Motion Is Detected After 11 pm</li> </ul> <p>Or check out our #show-off channel in the Apollo Discord for community submissions</p>"},{"location":"products/general/setup/getting-started/","title":"Getting Started","text":"<p>This will walk you through the process of connecting your new Apollo Automation sensor to Home Assistant through ESPHome. If at any point you get stuck, join our Discord for some help.</p>"},{"location":"products/general/setup/getting-started/#connecting-through-hotspot","title":"Connecting Through Hotspot","text":"<p>To connect through the sensor's onboard hotspot follow the below:</p> <ol> <li>Plug the sensor into a quality power brick. They require 5v and under an amp so most phone chargers will be fine. ESP devices are sensitive to power fluctuations and users have had some issues with really cheap power bricks. If your device is restarting or unavailable please try a different power brick.</li> <li>On your phone or PC, open the wifi settings and connect to \"Apollo MSR-1 Hotspot\", it might take a minute for the wifi network to show up</li> <li>Once connected it should automatically open a dashboard for your sensor <ul> <li>If this does not automatically open the dashboard, please open your web browser and go to http://192.168.4.1</li> </ul> </li> <li>Select the wifi network that you would like your sensor to connect to</li> <li>Input the wifi password. After connecting, the sensor's dashboard will automatically close. You've successfully connected your sensor, please check out the \"Connecting Sensor To Home Assistant\" section for the next steps.</li> </ol>"},{"location":"products/general/setup/getting-started/#connecting-to-esphome-addon","title":"Connecting To ESPHome Addon","text":"<p>You can connect to the ESPHome addon in Home Assistant to easily update your device. If you don't have ESPHome addon installed you can follow the steps here: Installing ESPHome Dashboard</p> <p>Make sure to fill out your Wi-Fi details in the SECRETS section by clicking on the SECRETS Image below.</p> <p></p> <pre><code># Your Wi-Fi SSID and password - keep the quotes and just replace the name and password between the quotes!\nwifi_ssid: \"your-wifi-ssid-here\"\nwifi_password: \"your-wifi-pass-here\"\n</code></pre> <ol> <li> <ol> <li>Once installed you'll have the addon's icon on the left side of your HA instance:          1.          2. Click on adopt for your sensor         3. Then adopt again</li> </ol> <p></p> </li> </ol>"},{"location":"products/general/setup/getting-started/#connecting-sensor-to-home-assistant","title":"Connecting Sensor To Home Assistant","text":"<ol> <li>Once you connect your sensor to wifi through the above process, open up Home Assistant. Then in the bottom left click on \u201cSettings\u201d</li> </ol> <ol> <li>From there click on \u201cDevices And Services\u201d</li> </ol> <ol> <li> <p>Look for the discovered sensor. It should be named \u201capollo-msr-mk1\u201d with some random letters and numbers (Those come from the device's mac address). Click on \u201cConfigure\u201d and then \u201cSubmit\u201d.</p> <ol> <li>If you do not see the device as discovered, make sure you have the ESPHome integration installed to Home Assistant you can find their instructions here</li> </ol> </li> </ol> <p></p> <ol> <li>Add the sensor to ESPHome. It will now show up in the ESPHome integration</li> </ol> <p></p> <ol> <li>The sensor has now been added to Home Assistant and you can use it as you please. For ideas please visit our ideas section or join our Discord</li> </ol> <p></p>"},{"location":"products/general/setup/getting-started/#6-next-steps","title":"6. Next steps:","text":""},{"location":"products/general/setup/getting-started/#_1","title":"Getting Started","text":"<p>Head on over to the CO2 Calibration page https://wiki.apolloautomation.com/books/general/page/co2-calibration to calibrate your new sensor.</p>"},{"location":"products/general/setup/getting-started/#note-this-is-not-necessary-if-you-did-not-purchase-the-co2-sensor-addon","title":"Note: This is not necessary if you did not purchase the CO2 sensor addon!","text":""},{"location":"products/general/setup/getting-started/#sensors","title":"Sensors","text":"<p>You should now have the sensor added! If you have any problems or need help please join our Discord and post in the #support channel. Or just join to check out product development and community spotlights. Our team monitors that and can quickly respond there. Or visit our ideas section to find cool ways to display the information</p>"},{"location":"products/general/setup/getting-started/#looking-for-ideas-on-how-to-use-your-sensor","title":"Looking For Ideas On How To Use Your Sensor?","text":"<ul> <li>Graph Co2 Over Time</li> <li>Turn The LED Red When C02 Is Over 1000 ppm</li> <li>Send You An Alert When Motion Is Detected After 11 pm</li> </ul> <p>Or check out our #show-off channel in the Apollo Discord for community submissions</p>"},{"location":"products/general/setup/how-to-add-temp-and-humidity-from-scd40/","title":"How To Add Temp And Humidity From SCD40","text":"<p>1. Navigate to the ESPHome addon  </p> <ol> <li>Select the Edit button under the desired device</li> </ol> <p></p> <ol> <li>Insert your code (The example below is for our AIR-1 SEN55 sensor but this applies to MSR-1/2, MTR or any sensor with the CO2 module)</li> </ol> <pre><code>sensor:\n  - platform: scd4x\n    id: !extend scd40 \n    temperature:\n      name: \"SCD40 Temperature\"\n    humidity:\n      name: \"SCD40 Humidity\"\n</code></pre> <p>   4. In the top right of the same screen Select Save and then Install   </p> <ol> <li>If it compiles correctly then you should see a green Success</li> </ol> <p></p> <ol> <li>When you see the sensor logs, you are finished and can select Stop</li> </ol> <p></p> <ol> <li>Now your sensor value should update!</li> </ol>"},{"location":"products/general/setup/how-to-change-the-update-frequency-of-sensors_force-update/","title":"How To Change The Update Frequency Of Sensors/Force Update","text":"<ol> <li> <p>Navigate to the ESPHome addon  </p> </li> <li> <p>Select the Edit button under the desired device</p> </li> </ol> <p></p> <ol> <li>Insert your code (The example below is for our AIR-1 SEN55 sensor)</li> </ol> <pre><code>sensor:\n  - platform: sen5x\n    id: !extend sen55\n    update_interval: 5s\n</code></pre> <p>   4. In the top right of the same screen Select Save and then Install   </p> <ol> <li>If it compiles correctly then you should see a green Success</li> </ol> <p></p> <ol> <li>When you see the sensor logs, you are finished and can select Stop</li> </ol> <p></p> <ol> <li>Now your sensor value should update!  </li> </ol> <p>Force Update</p> <p>Follow the same steps above but use this code to force the sensor to update.</p> <pre><code>sensor:\n- platform: sen5x\n  id: !extend sen55\n  nox:\n    name: \"SEN55 NOX\"\n    force_update: True\n</code></pre>"},{"location":"products/general/setup/renaming-apollo-devices/","title":"Renaming Apollo Devices","text":""},{"location":"products/general/setup/renaming-apollo-devices/#esphome-integration","title":"ESPHome Integration","text":"<p>1. Go to settings and select Devices &amp; services</p> <p></p> <ol> <li>Select ESPHome</li> </ol> <p></p> <p>3. Select the three dots next to the device and select Rename</p> <p></p> <p>4. Rename the device and select OK</p> <p></p>"},{"location":"products/general/setup/renaming-apollo-devices/#esphome-addon","title":"ESPHome Addon","text":"<p>1. Select the ESPHome addon in the sidebar</p> <p>2. Select Edit on the device you want to rename</p> <p></p> <p>3. Chane the friendly_name and save it</p> <p></p> <p>These new names can be used in automations.</p> <p></p>"},{"location":"products/general/setup/renaming-apollo-devices/#full-renaming","title":"Full Renaming","text":"<p>Thanks to Panzer from our Discord.</p> <ol> <li>Install the first MSR-1 using the standard method to get a default ESPHome configuration.</li> <li>Edit this configuration to update the \"name\" and \"friendly name\" as desired.</li> <li>SSH into the ESPHome directory and copy this configuration six times, then modify each copy with unique names, friendly names, and API keys. (Can also use VSCode/File Editor to copy the configuration from the ESPHome folder) <ol> <li></li> </ol> </li> <li>Delete the initially defined sensor in ESPHome and devices (if added there), and possibly reboot.</li> <li>Now with six distinct configs, use the 'install' option in ESPHome, select \"plug into this computer\", and connect the MSR-1 to your computer.</li> <li>Download the generated \"factory-image\" from ESPHome on Home Assistant (HA) and flash it. This will install the sensors without MAC-based names.</li> <li>Repeat the process for the remaining sensors.</li> <li>Add the sensors to devices if they are discovered.</li> <li>Can now update the sensors wirelessly again.</li> </ol> <p></p> <p></p>"},{"location":"products/general/setup/renaming-apollo-devices/#alternative-method","title":"Alternative Method","text":"<p>Thanks to lpbaud from our Discord.</p> <p>Instead of changing the name as your document suggests, you can go to System &gt; Devices and Services &gt; Devices, then click the device you want to rename. Next, click the pencil icon in the upper right corner of the screen and rename the device there. Doing it this way, after you click \"Update,\" it will ask if you want to change the entity ID, as shown in the picture above. If you click \"Update\" here, it will change all the entity IDs, like in the other picture above.  </p> <p> </p> <p>Here's another tip for using this naming scheme or a similar one in Node-RED: In the Entity State node dialog, if you click the empty box labeled \"Entity,\" a small box will open beneath it displaying a list of all the available entity names, in no particular order. If you start typing in that box, it filters the list based on what you type. So, if my kitchen MSR is named msr-k and I want to trigger an event based on the value of radar target, I would type \"-k target.\" The space between words acts as a wildcard, so the list is filtered by everything containing \"-k\" and \"target,\" allowing you to select the one you need. Quite handy.</p>"},{"location":"products/general/troubleshooting/connecting-to-hidden-wifi-network/","title":"Connecting To Hidden Wifi Network","text":"<p>Changing your wifi connection to fast connect can have stability problems1. Setup your device using a regular wifi network 2. In Home Assistant go to your ESPHome add-on 3. On your sensor click on edit 4. Change the wifi section to look like the below but with your wifi credentials</p> <p></p> <p>4. Save and install to your device</p>"},{"location":"products/general/troubleshooting/manually-uploading-code-through-esphome/","title":"Manually Uploading Code Through ESPHome","text":"<p>If your device becomes unresponsive and you've exhausted the other troubleshooting methods you can upload a fresh set of firmware by following the below guide. The utility does need to be run from Chrome or Edge.</p> <p>If your device has already been connected to Home Assistant previously please refer to Removing Device From Home Assistant first before proceeding</p> <ol> <li>Plug your MSR-1 into your computer with a quality USBC cable that supports data transfer</li> <li> <p>Navigate to the installer page for your specific product (i.e. Air-1) and click connect ** MSR-1 ** or** MSR-2 ** or ** AIR-1 ** or ** MTR-1 **</p> </li> <li> <p>Select your Apollo device, it will show with a similar name to the one below, and click connect. If you aren't sure which device it is, you can unplug the MSR-1 and see which disappears.</p> </li> </ol> <p></p> <p>If no device shows, click cancel and then install the recommended driver that shows on the popup. If you have installed the driver, tried different cables, and it still won't work refer here for putting the MSR-1 in bootloader mode and then retry step 3. Putting MSR-1 In Boot Mode Document</p> <ol> <li>Choose to install the new firmware</li> </ol> <p></p> <ol> <li>Wait for the installer to finish</li> </ol> <p></p> <ol> <li> <p>After finishing, check for the Apollo hotspot and connect. This might not show if you previously had the MSR-1 connected to your wifi</p> </li> <li> <p>Log into Home Assistant and go to the ESPHome addon check to see if you can adopt the device.</p> </li> </ol> <p>If you encounter the below error, please complete the Putting MSR-1 In Boot Mode Document and go back to step 3.</p> <p></p>"},{"location":"products/general/troubleshooting/putting-the-msr-1-in-boot-mode/","title":"Putting The MSR-1 In Boot Mode","text":"<p>This will cover how to put the MSR-1 into boot mode. This is sometimes needed for uploading new firmware if the device is struggling.</p> <ol> <li>Unplug the device</li> <li>Slide the back case off</li> <li>Pull the device out of the case</li> <li>Plug back into your computer</li> <li>Press and hold the boot button, while holding it press and release the reset button, then release the boot button</li> </ol> <p></p> <p>6. Continue on with uploading firmware document</p>"},{"location":"products/general/troubleshooting/removing-device-from-home-assistant/","title":"Removing Device From Home Assistant","text":"<p>This will cover how to remove an Apollo device from Home Assistant</p> <ol> <li>Navigate to Home Assistant and open your ESPHome addon</li> </ol> <p></p> <p>2. On the device you would like to remove, click the three dots and select \"Delete\"</p> <p></p> <p>3. Go to Settings --&gt; Devices &amp; Services --&gt; ESPHome</p> <p></p> <p>4. On the device you would like to remove, click the three dots and then \"Delete\"</p> <p></p> <p>5. Restart your Home Assistant</p> <p></p> <p>It can take a few minutes for your Home Assistant instance to start back up</p>"},{"location":"products/general/troubleshooting/ubiquiti-unifi-mdns-auto-discover-issue/","title":"Ubiquiti Unifi mDNS Auto Discover Issue","text":"<p>**If mDNS is unchecked then Home Assistant and ESPHome will not auto discover new devices. Also, if you have different networks that Home Assistant and ESPHome devices are on, then you will need mDNS on both networks and firewall rules between them. (Thank you to the Ubiquiti Discord member Blue!) Below are guides for using your PC and the Unifi Network mobile app to fix this issue.  </p> <p>Quick Guide**</p> <ol> <li>Settings &gt; Network &gt; Multicast Settings &gt; Select the networks you want mDNS/IGMP Snooping on</li> </ol> <p></p> <p>(Thank you to the Ubiquiti Discord member MK!)  </p> <p>Steps for PC</p> <p>1. Log into your Unifi network through your default IP address which is usually 192.168.1.1 2. Select Network</p> <p></p> <p>3. Select Settings</p> <p> </p> <p>4. Select Networks</p> <p></p> <p>5. Select the Default Network</p> <p></p> <p>6. Check Multicast DNS</p> <p></p> <p>7. Now the Home Assistant/ESPHome auto-discover issue should be fixed! 8. If this does not work then you can also try checking IGMP Snooping (checkbox above Multicast DNS) on your IoT networks.</p> <p>Steps for the Unifi Network Mobile App</p> <p>1. Open the Unifi Network app</p> <p></p> <p>2. Tap Settings/Gear Icon</p> <p></p> <p>3. Tap Networks</p> <p></p> <p>4. Tap Default Network</p> <p></p> <p>5. Tap the Multicast DNS slider</p> <p></p> <p>6. Now the Home Assistant/ESPHome auto-discover issue should be fixed!</p>"},{"location":"products/general/troubleshooting/wi-fi-disconnecting/","title":"Wi-Fi Disconnecting","text":"<ol> <li>Try a couple of different power cord and power brick combinations - this matters a lot more than you'd think!</li> <li>Check to see if the sensor's hotspot is showing up. (this means it is not connected to a network)</li> <li>Check the router's connected devices - the device will show up with the Apollo name and a 6 digit hex value of the end of the mac address.</li> <li>Disable power save mode in esphome Power Save Mode.</li> </ol>"},{"location":"products/general/tutorials/how-to-edit-your-sensor%27s-lux-update-interval/","title":"How to edit your Sensor's LUX update interval","text":"<p>This guide will show you how to edit the lux updates down to 3-5 seconds.</p> <p>Your sensor is defaulting to 60 seconds for updates to the state of the lux sensor. This is the default for all esphome devices using lux because it uses less Wi-Fi airtime fairness which means it is less chatty to your Wi-Fi AP or router. I would not personally go below 5 seconds.</p> <p>1. Open the Esphome dashboard and click \"edit\" under the device you want to edit.</p> <p></p> <p>2. Copy this code and enter it just like shown in the next step. Make sure there are no extra spaces or any other characters it needs to look just like the example in the next step.</p> <pre><code>#LUX sensor update interval\nsensor:\n  - platform: ltr390\n    id: !extend ltr_390\n    update_interval: 5s\n</code></pre> <p>3. Paste the code you copied in step 2 below your sensor's existing yaml as shown below.</p> <p></p> <p>4. Click \"SAVE\" and then click \"INSTALL\" as shown in the image above. Once that is finished your sensor should now be reporting at your new update_interval such as 5 seconds!</p>"},{"location":"products/general/tutorials/how-to-use-the-apollo-gpio-header-to-control-an-led-strip/","title":"How To Use The Apollo GPIO Header To Control An LED Strip","text":"<p>This tutorial will guide you through setting up one of our MSR-2 devices (works with any mezzanine port on any Apollo Device) with the optional $4.99 GPIO Header which adds pins for you to easily add functionality to your device! In this tutorial, however, we will be focusing on adding an LED strip to your Apollo device.</p> <p>Materials Needed for tutorial:</p> <ul> <li>Apollo MSR-2, Apollo MTR-1, Apollo Air-1 and all other future Apollo Automation products with the mezzanine port.</li> <li>Apollo GPIO Header</li> <li>ws2812b aka neopixel RGB led strip or similar. sk6812 RGBW strip will also work.</li> <li>Optional DuPont Cables for GPIO Header but any DuPont cables will do.</li> <li>USB-C cable and power brick to power MSR-2</li> </ul> <p>You are limited to 300mA of power output from the 5v port. You can either attach an external power supply and power the MSR-2 via 5v and gnd pins or work with the limited power output of the port</p> <p></p> <p>Above is an image of the GPIO Header and its pinouts. We can use ports 2,4,6,7 for our data channel to an LED strip or multiple LED strips. We will also use the top two ports which are ground and 5v for power.</p> <p>Did you know you can power the esp32 from the 5v and gnd pin? That means you can connect an external power supply and power it without the side USB port being used! This also allows for more power to be given to your LEDs!</p> <p>We cannot use the IO ports 0,1,18, or 19 for LEDs but you can use ports 0 and 1 for i2c sensors.</p> <p>Connecting the GPIO Header to the MSR-2</p> <p>The first thing we will do is remove our MSR-2 back plate and connect our GPIO Header to our MSR-2 and then put the new GPIO back plate on (blue).</p> <p>Step 1. Remove the backplate of the MSR-2</p> <p> </p> <p>Step 2. Line up the Xs shown on the msr-2 and the GPIO Header. They should both be facing in the same direction as shown below.</p> <p></p> <p>Step 3. Gently push down onto the GPIO Header as shown below:</p> <p></p> <p>Step 4. Confirm the GPIO Header is seated properly as shown below.</p> <p></p> <p>Step 5. Slide the GPIO Header back plate for the MSR-2 over your sensor and gently push down until it clicks into place.</p> <p></p> <p>If the back plate does not gently go onto the sensor please investigate and confirm it is in the right orientation.</p> <p>Connecting DuPont pins to proper GPIO ports Now we need to reference the GPIO pinout we looked at above and then connect three wires. You will need three male-to-male DuPont wires included in your kit. I suggest using red for power aka 5v, White for ground aka GND, and green for data aka port IO7. Most LED strips will also have this same color scheme and it's easier to match like colors together.</p> <p></p> <p></p> <p></p> <p>You can add a bit of hot glue to the Dupont wires to hold them together. DO NOT put hot glue into the GPIO Header's female pins that will ruin the addon. I am only suggesting that you can hot-glue the Dupont pins outer shell themselves together to stiffen them up.</p> <p></p> <p>Connecting DuPont pins to LED Strip</p> <p>Next, we need to connect the other side of the Dupont pins to the LED strip. Most likely your LED strip will have a JST-SM connector which is a 3amp max connector with three wires connected: red for 5v, green for data, and white for gnd. We will be matching up our red, green, and white wires already attached to the GPIO add-on pins in the MSR-2 (using IO7 as the data pin for this tutorial)</p> <p> </p> <p>Make sure to connect to the correct side of the LED strip. The led strip will have an arrow going down the led strip showing one direction for the data line. you want the data channel going FROM the msr-2 TO the led strip going in a \"forward\" direction as shown below.</p> <p> </p> <p>Edit the YAML of your MSR-2 to let it know about your new LED strip</p> <p>Finally, we need to tell the MSR-2 that we connected an LED strip. We need to tell it how many LEDs we have and we need to tell it that it's our second LED since the built-in LED is the first. This tutorial assumes you are comfortable with the ESPHome dashboard.</p> <p>Step 1. Open ESPhome Dashboard and click edit to bring up the yaml your sensor is currently using.</p> <p></p> <p>You will see some YAML code here and you do NOT want to touch anything above line 20. If you need to, click your cursor at the end of wifi_password and hit enter to create a new line then make sure you backspace until you are \"flush\" with the line numbers like how wifi: is.</p> <p>Step 2. Copy the code below and paste it to line 20 in your ESPHome yaml for this device.</p> <pre><code>light:\n  - platform: esp32_rmt_led_strip\n    id: bed_led\n    name: \"Bed LED\"\n    pin: GPIO7\n    rmt_channel: 1\n    default_transition_length: 0s\n    chipset: WS2812\n    num_leds: 60\n    rgb_order: grb\n    effects:\n      - pulse:\n          name: \"Slow Pulse\"\n          transition_length: 1000ms\n          update_interval: 1000ms\n          min_brightness: 50%\n          max_brightness: 100%\n      - pulse:\n          name: \"Fast Pulse\"\n          transition_length: 100ms\n          update_interval: 100ms\n          min_brightness: 50%\n          max_brightness: 100%\n      - addressable_rainbow:\n</code></pre> <p>This is where you can change your number of LEDs as well as the GPIO pin used for the LED data! Make sure to check out https://esphome.io/components/light/index.html#light-effects for all the effects supported such as addressable scan effect!Step 3. Confirm you do not have any red lines showing errors in your code You change the rmt_channel to 1 because 0 is being used by the built-in LED of the MSR-2. Step 4. Hit save and then install in the top right. It should have a popup where you select \"wirelessly\" then it will begin compiling the firmware and finally installing the compiled firmware to your MSR-2.Step 5. Go into home assistant and confirm you now have a new light entity called Bed LED</p> <p></p> <p>Step 6. Click on the name \"Bed LED\" circled and it will pop up a color picker. You can then choose the color wheel option to pick any color of the rainbow, or select \"effect\" and choose an effect.</p> <p> </p> <p></p> <p>That's all folks! Thanks to Smart Home Sellout for putting this tutorial together!</p>"},{"location":"products/msr1/calibrating-co2/","title":"CO2 Calibration - The Quick method - Desktop Only not mobile","text":""},{"location":"products/msr1/calibrating-co2/#this-article-will-guide-you-through-a-simple-calibration-of-your-co2-sensor-for-any-apollo-automation-device","title":"This article will guide you through a simple calibration of your CO2 sensor for any Apollo Automation device!","text":"<ol> <li>Go to your home assistant dashboard and hit the letter \"e\" - It will pop up with an entity filter and here we will type in \"Calibrate CO2\" and select the correct device. *HINT* If you cannot get this menu to pop-up, click somewhere on the home assistant dashboard then press your \"e\" key **HINT** </li> <li>DO NOT RUSH THIS  Go Plug your sensor in outside and let it sit for 5 minutes or more to get normalized readings DO NOT RUSH THIS</li> <li> <p>Click on the button that says \"PRESS\" and then you are done. </p> <ol> <li>Go get your sensor from outside and plug your sensor in wherever you want it!</li> </ol> </li> </ol>"},{"location":"products/msr1/faq/","title":"FAQ","text":"<p>1. What sensors are included in the MSR-1?</p> <p>\u2022   The MSR-1 includes a mmWave radar sensor (HLK-ld2410b), a LUX and UV sensor (LTR-390UV), and a temperature, humidity, and pressure sensor (BME280). It also has an optional CO2 sensor (SCD40), RGB LED, and piezo buzzer.</p> <p>2. What does the mmWave radar sensor do?</p> <p>\u2022   The mmWave radar sensor detects motion, even subtle movements. It can be used for automation tasks like turning on lights when someone enters a room or keeping them on while someone is sitting still. It\u2019s also effective for detecting presence in spaces like beds or workstations.</p> <p>3. How does the MSR-1 connect to Home Assistant?</p> <p>\u2022   The MSR-1 connects to Home Assistant through ESPHome using WiFi. Once connected, you can configure automations, monitor sensor data, and customize settings from Home Assistant.</p> <p>4. Does the MSR-1 require any cloud service or subscription?</p> <p>\u2022   No, the MSR-1 is fully local and does not rely on cloud services or subscriptions. It operates entirely within your Home Assistant setup, ensuring privacy and data security.</p> <p>5. What are the use cases for the MSR-1?</p> <p>\u2022   The MSR-1 is versatile and can be used for various home automation tasks, such as detecting when someone enters a room to turn on lights, monitoring CO2 levels, measuring sunlight (UV) to optimize plant care, or providing notifications using the RGB LED or piezo buzzer.</p> <p>6. What does the optional CO2 sensor measure?</p> <p>\u2022   The optional CO2 sensor (SCD40) tracks carbon dioxide levels, which can affect air quality and personal comfort. High CO2 levels can cause drowsiness, poor sleep, and brain fog. The sensor can notify you when it\u2019s time to open a window or increase ventilation.</p> <p>7. How does the RGB LED work?</p> <p>\u2022   The RGB LED on the MSR-1 can be used for visual notifications. For example, it can turn red when CO2 levels are high, green for trash night, or blue when the mail arrives. These alerts can be fully customized using Home Assistant.</p> <p>8. Can the piezo buzzer be customized?</p> <p>\u2022   Yes, the piezo buzzer can be programmed to emit different beep patterns based on events. For instance, you can set it to beep when the front door opens, when the CO2 levels rise, or even play a fun tune for a party.</p> <p>9. What is the purpose of the LUX and UV sensors?</p> <p>\u2022   The LUX and UV sensors (LTR-390UV) help monitor light levels and UV exposure. You can use these sensors to control indoor lighting based on natural light conditions or to track the amount of sunlight in a specific area, such as near plants.</p> <p>10. How accurate are the temperature and humidity readings?</p> <p>\u2022   The MSR-1 uses the BME280 sensor for temperature, humidity, and pressure. It provides accurate readings, but keep in mind that the ESP32-C3 processor generates some heat, which may require a temperature offset for the most precise measurements.</p> <p>11. What does the pressure sensor do?</p> <p>\u2022   The pressure sensor enhances the accuracy of CO2 readings by accounting for changes in atmospheric pressure. This helps provide more reliable air quality data.</p> <p>12. How do I install the MSR-1?</p> <p>\u2022   Installation is straightforward. The MSR-1 is powered via a USB-C cable connected to a standard power adapter. Once powered on, it can be configured through Home Assistant using ESPHome.</p> <p>13. Can I customize the MSR-1?</p> <p>\u2022   Yes, the MSR-1 is fully customizable. We provide open-source code and CAD files for you to modify and enhance. You can create automations, adjust sensor settings, and modify reporting intervals based on your needs.</p> <p>14. What is the mmWave detection range?</p> <p>\u2022   The mmWave radar sensor can detect movement up to 5 meters (16.4 feet) with a detection angle of about 60 degrees (though in practice, this can be close to 90 degrees). It\u2019s excellent for detecting both large and small movements, making it suitable for automations like turning on lights or detecting presence in a room.</p> <p>15. Can the mmWave sensor detect through walls?</p> <p>\u2022   Yes, mmWave sensors can detect movement through walls, depending on the material and thickness. This means you may need to fine-tune the sensor\u2019s settings to prevent false positives or adjust its placement to avoid unwanted detections.</p> <p>16. How do I set up automations with the MSR-1?</p> <p>\u2022   Automations can be easily configured in Home Assistant using ESPHome. For example, you can automate lights to turn on when motion is detected or trigger a fan when CO2 levels rise. The sensor data can be used in combination with other Home Assistant devices for more complex automations.</p> <p>17. What is the power source for the MSR-1?</p> <p>\u2022   The MSR-1 is powered via USB-C. Simply plug it into a standard 5V USB power adapter, and you\u2019re good to go.</p> <p>18. What is the reporting interval for the MSR-1 sensors?</p> <p>\u2022   The reporting interval is adjustable via ESPHome. You can configure the sensors to report data as frequently as every second or set longer intervals depending on your specific needs.</p> <p>19. Can I use the MSR-1 outdoors?</p> <p>\u2022   The MSR-1 is designed for indoor use. While it could be used outdoors in a sheltered environment, it is not weatherproof. If you plan to use it outdoors, make sure to protect it from the elements.</p> <p>20. What is the maximum number of targets for the mmWave sensor?</p> <p>\u2022   The mmWave sensor on the MSR-1 is designed to detect a single target at a time. It is excellent for recognizing motion within a specific area, such as a room, and keeping track of when someone is present.</p> <p>21. What is the Exposed GPIO feature on the MSR-1?</p> <p>\u2022   The Exposed GPIO feature provides access to the GPIO pins, 3v, 5v, and I2C on the back of the MSR-1 board. This allows you to expand its capabilities by adding external sensors or other components. For example, you could add an external temperature sensor or other I2C devices.</p> <p>22. How do I update the firmware on the MSR-1?</p> <p>\u2022   Firmware updates are done over-the-air (OTA) using ESPHome. You can update the firmware directly through Home Assistant when new versions are available.</p> <p>23. Does the MSR-1 support Bluetooth tracking?</p> <p>\u2022   Yes, the MSR-1 has Bluetooth tracking capabilities through the ESP32-C3 chip. You can track Bluetooth devices such as phones, tablets, or beacons. This allows for automations based on proximity, such as turning on lights when you walk into a room with your phone.</p> <p>24. How do I calibrate the CO2 sensor?</p> <p>\u2022   The optional CO2 sensor (SCD40) comes pre-calibrated, so no manual calibration is necessary. However, you can perform recalibration via ESPHome if needed.</p> <p>25. How can I use the MSR-1 for light control?</p> <p>\u2022   The MSR-1\u2019s LUX sensor can be used to control indoor lighting. For example, you can set up automations to only turn on lights when motion is detected and the room is dark. The UV sensor can also help you track sunlight exposure, which is useful for managing indoor plant care.</p> <p>26. Does the MSR-1 work with other smart home platforms besides Home Assistant?</p> <p>\u2022   The MSR-1 is designed to work with Home Assistant through ESPHome. While it may be possible to integrate it with other platforms using MQTT or custom configurations, Home Assistant remains the primary platform for full functionality.</p> <p>27. What are some creative automation ideas using the MSR-1?</p> <p>\u2022   The MSR-1 offers endless automation possibilities. You can:</p> <p>\u2022   Use the mmWave sensor to automate lights based on motion and presence.</p> <p>\u2022   Use the RGB LED to indicate specific events (e.g., trash night or mail delivery).</p> <p>\u2022   Trigger the piezo buzzer for notifications, such as when CO2 levels are too high or when a door opens.</p> <p>\u2022   Use the LUX sensor to control lights based on sunlight levels.</p> <p>28. What\u2019s included in the MSR-1 package?</p> <p>\u2022   The MSR-1 package includes the assembled board, case, and links to our documentation, open-source code, and CAD models. You\u2019ll also get an Apollo Automation sticker as a little bonus.</p> <p>29. What\u2019s the difference between the MSR-1 and MSR-2?</p> <p>\u2022   The MSR-2 is an incremental update based on user feedback. It includes a compact design, improved sensor accuracy (such as a DPS310 pressure sensor), and an additional expansion slot for future accessories. The MSR-1 remains supported, but the MSR-2 is the recommended choice for new users.</p> <p>30. How do I get support for the MSR-1?</p> <p>\u2022   You can get support through our Discord community, where you can ask questions and share your experiences with other users and the Apollo Automation team. We also provide extensive documentation on our GitHub and wiki pages.</p> <p> </p>"},{"location":"products/msr1/introduction/","title":"Introduction","text":"<p>The Apollo MSR-1 is a compact, community-driven multisensor designed for Home Assistant via ESPHome. Measuring just 40.5mm x 32mm, it features mmWave radar for motion detection, LUX/UV sensors, temperature/humidity monitoring, and optional CO2 sensing. Powered by USB-C, the MSR-1 allows for customizable alerts through RGB LEDs and a piezo buzzer.</p>"},{"location":"products/msr1/additional-info/adding-co2-to-msr-1/","title":"Adding CO2 To MSR-1","text":"<p>1. Unplug your MSR-1 from power and remove the back</p> <p></p> <p>2. Remove the board from the case and orientate it like the below image. In the bottom right there is a black connector. There is a x in the lower right corner of the connector</p> <p></p> <p>3. Orientate the CO2 module so the white x on the module is also in the lower right and the gold dot is in the upper left as seen below</p> <p></p> <p>4. Align the connector on the back of the CO2 module with the connector on the MSR-1. Once aligned, push down so the CO2 module fully seats itself</p> <p></p> <p>5. Put your MSR-1 back in the case and slide the back cover on. Please refer to our CO2 calibration guide to calibrate the CO2 module.</p>"},{"location":"products/msr1/additional-info/exposed-gpio/","title":"Exposed GPIO","text":"<p>The back of the Apollo MSR-1 has exposed GPIO for a variety of uses.</p> <p>From left to right:</p> <ul> <li>SLC (Typo, should be SCL) <ul> <li>Used for I2C</li> </ul> </li> <li>IO 5 <ul> <li>GPIO 5 of ESP32-C3-Mini</li> </ul> </li> <li>5V <ul> <li>Used for powering the device, or powering a external sensor</li> </ul> </li> <li>GND <ul> <li>Ground</li> </ul> </li> <li>3V3 <ul> <li>Used to power external sensors. Can not power the MSR-1 from this</li> </ul> </li> <li>SDA <ul> <li>Used for I2C</li> </ul> </li> </ul>"},{"location":"products/msr1/additional-info/mmwave-presence-sensor-comparison/","title":"mmWave Presence Sensor Comparison","text":""},{"location":"products/msr1/additional-info/mmwave-presence-sensor-comparison/#link-to-excel-file-mmwave-presence-sensor-excel-spreadsheet","title":"Link to excel file: mmWave Presence Sensor Excel Spreadsheet","text":"<p>Scroll table to right to see others</p> <pre><code>     Column1Apollo MSR-1Apollo MSR-1 CO2Everything Presence One KitEverything Presence Lite KitScreek Human Sensor 1UScreek Human Sensor 2AAqara FP1Aqara FP2Seeed Studio mmWave Kit Price (USD)  $ 34.99 $ 54.99 $ 78.00 $ 37.00 $ 25.99 $ 29.99 $ 49.99 $ 82.99 $ 26.99Motion Detection         mmWaveLD2410BLD2410BSEN0395LD2450LD2410CLD2450BGT60TR13CIWR6843Human Static Presence Module LiteDetection Distance (m)66966656 to 85Detection Zones3 zones and 9 gates (adjustable and distance based)3 zones and 9 gates (adjustable and distance based) x xxx Target Tracking   x xxx PIR  [Panasonic](https://na.industrial.panasonic.com/products/sensors/sensors-automotive-industrial-applications/lineup/pir-motion-sensor-papirs)      Connection Method         Wi-FiESP32-C3-MINIESP32-C3-MINIESP32-WROOM-32ESP32-WROOM-32ESP32-S2ESP32-C3 ESP32-WROOM-32UESP32-C3Zwave      x  Zigbee      x  BluetoothESP32-C3-MINIESP32-C3-MINIESP32-WROOM-32ESP32-WROOM-32ESP32-S2ESP32-C3 ESP32-WROOM-32UESP32-C3ESPHomeESP32-C3-MINIESP32-C3-MINIESP32-WROOM-32ESP32-WROOM-32ESP32-S2ESP32-C3  ESP32-C3Case / Stand         Case Includedxx $ 8.00xxxxxxCable   xxxxxxStand$4.99 (Optional)$4.99 (Optional)Included with case purchasex  xx Outlet Mount$6.99 (Optional)$6.99 (Optional)       Outlet Mount w/ Wall Plug$19.99 (Optional)$19.99 (Optional)       Size (mm)40x32x1340x32x13  36.7x30x13.856.9x56.9x14.352x45x3664x64x29.570x70Additional Features         LEDxxxx     RGB LEDxx       Temp/Humidityxxx     $6.50 (Optional)Light/LUXxxxx     UV/UV Indexxx       GPIOxxx      Piezo Buzzerxx       CO2 [SCD40](https://sensirion.com/products/catalog/SCD40)       Works with multiple mmWave   x    x          CountryUSAUSAEUEUChinaChinaChinaChinaChinaProduct Link[Apollo MSR-1](https://shop.apolloautomation.cloud/products/multisensor-mk1)[Apollo MSR-1](https://shop.apolloautomation.cloud/products/multisensor-mk1)[Everything Presence One Kit](https://shop.everythingsmart.io/en-us/products/everything-presence-one-kit)[Everything Presence Lite Kit](https://shop.everythingsmart.io/en-us/products/everything-presence-lite)[Screek Human Sensor 1U](https://www.screek.io/1u/)[Screek Human Sensor 2A](https://www.screek.io/2a/)Aqara FP1[Aqara FP2](https://www.aqara.com/us/product/presence-sensor-fp2/)[Seeed Studio mmWave Kit](https://www.seeedstudio.com/mmWave-Human-Detection-Sensor-Kit-p-5773.html)mmWave [LD2410B](https://www.hlktech.net/index.php?id=1094)[LD2410B](https://www.hlktech.net/index.php?id=1094)[SEN0395](https://www.dfrobot.com/product-2282.html)[LD2450](https://www.hlktech.net/index.php?id=1157)[LD2410C](https://www.hlktech.net/index.php?id=1095)[LD2450](https://www.hlktech.net/index.php?id=1157)[BGT60TR13C](https://www.infineon.com/cms/en/product/sensor/radar-sensors/radar-sensors-for-iot/60ghz-radar/bgt60tr13c/)[IWR6843](https://www.ti.com/product/IWR6843)[Human Static Presence Module Lite](https://www.seeedstudio.com/24GHz-mmWave-Sensor-Human-Static-Presence-Module-Lite-p-5524.html)ESP[ESP32-C3-MINI](https://www.espressif.com/sites/default/files/documentation/esp32-c3-mini-1_datasheet_en.pdf)[ESP32-C3-MINI](https://www.espressif.com/sites/default/files/documentation/esp32-c3-mini-1_datasheet_en.pdf)[ESP32-WROOM-32](chrome-extension://efaidnbmnnnibpcajpcglclefindmkaj/https:/www.espressif.com/sites/default/files/documentation/esp32-wroom-32_datasheet_en.pdf)[ESP32-WROOM-32](chrome-extension://efaidnbmnnnibpcajpcglclefindmkaj/https:/www.espressif.com/sites/default/files/documentation/esp32-wroom-32_datasheet_en.pdf)[ESP32-S2](https://www.espressif.com/en/products/socs/esp32-s2)[ESP32-C3](chrome-extension://efaidnbmnnnibpcajpcglclefindmkaj/https:/www.espressif.com/sites/default/files/documentation/esp32-c3_datasheet_en.pdf) [ESP32-WROOM-32U](chrome-extension://efaidnbmnnnibpcajpcglclefindmkaj/https:/www.espressif.com/sites/default/files/documentation/esp32-wroom-32d_esp32-wroom-32u_datasheet_en.pdf)[ESP32-C3](chrome-extension://efaidnbmnnnibpcajpcglclefindmkaj/https:/www.espressif.com/sites/default/files/documentation/esp32-c3_datasheet_en.pdf)\n</code></pre>"},{"location":"products/msr1/additional-info/reducing-ld2410-log-entries-in-home-assistant/","title":"Reducing LD2410 Log Entries In Home Assistant","text":"<ol> <li>Open your Home Assistant config.yaml</li> <li>Add in this code but use your MSR-1's name</li> </ol> <pre><code>logbook:\n  exclude:\n    entities:\n      - binary_sensor.hallway_motion_home_security_motion_detection\n</code></pre>"},{"location":"products/msr1/calibrating-and-updating/co2-calibration-for-msr-1/","title":"CO2 Calibration For MSR-1","text":""},{"location":"products/msr1/calibrating-and-updating/co2-calibration-for-msr-1/#please-refer-to-the-general-co2-calibration-article","title":"Please refer to the General CO2 Calibration article","text":""},{"location":"products/msr1/calibrating-and-updating/how-to-tune-mmwave-using-hlkradartool/","title":"How To Tune mmWave Using HLKRadarTool","text":"<p>Auto-Calibration (Average, Maximum, and Intelligent)  1. Download the HLKRadarTool app for either Android or Apple </p> <p>2. Ensure the mmWave radar you want to tune has Radar Control Bluetooth turned on. Home Assistant &gt; Settings &gt; Devices &amp; services &gt; ESPHome Devices &gt; Select Device &gt; Scroll down and toggle on Radar Control Bluetooth  </p> <p> </p> <p>3. Open the app and select your device  </p> <p> </p> <p>4. Turn on Engineering Mode  </p> <p> </p> <p>5. Select More and then select Parameter settings  </p> <p> </p> <p>6. Select Detect background noise  </p> <p> </p> <p>7. Insert Delay detection and Detection time values. (For iPhone users Delay detection cannot be 0). Then select Start. This will give us our reference values so we can auto-calibrate the mmWave sensor.  </p> <p> </p> <p>8. Select Back to navigate to the Parameter settings. Then select one of the auto-calibration buttons.  </p> <p>Average - Sets the gate sensitivity to the average move and still energy  </p> <p>Maximum - Sets the gate sensitivity to the maximum move and still energy</p> <p> </p> <p>Intelligent - Sets the gate sensitivity equal to or just above the maximum move and still energy  9. Now your mmWave should be tuned to your environment! Manual Calibration 1. Follow steps 1-5 above  </p> <p>2. Select Motion or Static sensitivity, change it to your desired value, and select Set  </p> <p> </p> <p>3. Now your mmWave should be tuned to your environment!</p>"},{"location":"products/msr1/calibrating-and-updating/how-to-tune-mmwave-using-home-assistant/","title":"How To Tune mmWave Using Home Assistant","text":"<p>If you're experiencing false triggers, we recommend using Radar Engineering Mode (REM) to monitor the gate energy and adjust the gate threshold to eliminate them.  </p> <p>Here is a quick introduction video of the ld2410b gates and zones.  </p> <p>Here is a video of how to tune the mmWave sensor using radar engineering mode,  </p> <ol> <li>Open Home Assistant</li> <li>Navigate to Settings&gt;Devices &amp; services&gt;ESPHome&gt;Select the MSR-1</li> <li>Scroll down to the Configuration section</li> <li>Turn on Radar Engineering Mode (REM) </li> <li>Scroll down to the Diagnostic section and you will see that REM shows the move and still energy for gates 0-8 </li> <li>The gates are different distances from the sensor </li> <li>Moving the gate still and move threshold slider to the right increases the amount of energy needed to trigger the sensor. Do this if you want the gate to be less sensitive. </li> <li>Moving the gate still and move threshold slider to the left decreases the amount of energy needed to trigger the sensor. Do this if you want the gate to be more sensitive. </li> </ol> <p>Alternate Method</p> <p>Thanks to MakeItWorkTech for this method!</p> <p>\"I ended up maxing out the sliders on all gates and then bringing them down just enough to pick up human presence. Definitely easier than using the LD2410B app.\"</p> <p>Example</p> <p>- You may have an open-concept kitchen and living room, and you want the MSR-1 to activate your under-cabinet lights only when you're in the kitchen.</p> <p>Here's how:</p> <ol> <li>Stand in the desired trigger locations.</li> <li>Observe the gate energy.</li> <li>Adjust the gate threshold slider to the right, increasing the energy required to trigger the mmWave sensor. This ensures that your kitchen lights only come on when you're actually in the kitchen, not just walking by in the living room. Also, you can lower the gate threshold in the kitchen by moving the slider to the left. This makes the mmWave sensor more sensitive, even when standing still. This way, you avoid having the lights go off while reading a recipe or doing the dishes.</li> </ol> <p>- From clarinetJWD, \"Engineering mode is what I was missing at first. I did exactly that, and now detection is basically perfect! My under cabinet lights now come on to max brightness whenever someone is in the kitchen, and return to their previous value when they leave. Next up is replacing the really flaky motion switch in my garage so it stops shutting off when I'm doing a project at the workbench! Thanks, these are really good.</p> <p>References</p> <ul> <li>https://youtu.be/dAzHXpP3FcI?t=431</li> <li>https://community.home-assistant.io/t/ld2410-esphome-tips/477058/316</li> <li>https://www.youtube.com/watch?v=l212Lvo1R6s</li> </ul>"},{"location":"products/msr1/calibrating-and-updating/updating-msr-1-firmware/","title":"Updating MSR-1 Firmware","text":""},{"location":"products/msr1/calibrating-and-updating/updating-msr-1-firmware/#please-refer-to-the-general-firmware-update-article","title":"Please refer to the general firmware update article","text":""},{"location":"products/msr1/examples/msr-1-%2B-alarmo-home-security-install/","title":"MSR-1 + Alarmo Home Security Install","text":"<p>My grandmother wanted a security system that would alert her when there was movement in her home after she had gone to bed. So, I set up three of our Apollo Automation mmWave sensors. These devices, plus the Alarmo add-on, quickly and easily allowed me to install a fully local, private, cloud-free, and no monthly subscription security system. She can arm/disarm it with one button on her Home Assistant dashboard, and it makes her feel much safer. This guide assumes you already have a motion/presence sensor installed on HA.</p> <p>1. Install HACS 2. Install Alarmo and the Alarmo Card (Pretty Arm and Disarm card for your HA dashboard)  </p> <p> </p> <p> </p> <p>3. Find Alarmo on the left, select the Sensors tab, and toggle on the sensor entities that you would like to use for your alarm system.  </p> <p> </p> <p>4. Now select the Actions tab and under Condition &gt; Event &gt; Select \"Alarm is triggered\". You can also select the device you would like to receive a notification on under Task &gt; Target &gt; Select Device (Phone, tablet, etc.)  </p> <p> </p> <p>5. You can change the Title, Message, and Name of the alarm notification.  </p> <p> </p> <p>6. After saving that action we can add another one that will turn on our sensor lights and/or make the onboard piezo buzzers play an alarm sound. Uner Entity select your sensors RGB light.  </p> <p> </p> <p>7. Under Action select Turn On and now your sensors RGB lights will turn on when the alarm is triggered.  </p> <p> </p> <p>8. And that's it, seriously... Now you can enjoy a free and local security system.  </p> <p>We hope this was helpful and please let us know if there are any questions!</p>"},{"location":"products/msr1/examples/msr-1-automation-guide/","title":"MSR-1 Automation Guide","text":""},{"location":"products/msr1/examples/msr-1-examples-from-github/","title":"MSR-1 Examples From GitHub","text":""},{"location":"products/msr1/examples/msr-1-examples-from-github/#httpsgithubcomapolloautomationmsr-1treemainexamples","title":"https://github.com/ApolloAutomation/MSR-1/tree/main/Examples","text":""},{"location":"products/msr1/examples/msr-1-home-assistant-dashboard-examples/","title":"MSR-1 Home Assistant Dashboard Examples","text":"<p>Radar Scatter Plot With Apex Charts For MSR-1</p> <p></p> <pre><code>type: custom:apexcharts-card\nheader:\n  show: true\n  title: MSR-1 Radar Distance\n  show_states: true\n  colorize_states: true\napex_config:\n  legend:\n    position: top\n    horizontalAlign: center\n    offsetX: -80\n    offsetY: 0\nexperimental:\n  brush: true\nbrush:\n  selection_span: 4h\ngraph_span: 24hr\nchart_type: scatter\nseries:\n  - entity: sensor.apollo_msr_1_a79e14_radar_detection_distance\n    name: Detection\n    stroke_width: 1\n    color: green\n    show:\n      in_brush: true\n      extremas: true\n  - entity: sensor.apollo_msr_1_a79e14_radar_moving_distance\n    name: Moving\n    stroke_width: 1\n  - entity: sensor.apollo_msr_1_a79e14_radar_still_distance\n    name: Still\n    stroke_width: 1\n</code></pre> <p>CO2 Charts Home Assistant Sensor</p> <p></p> <pre><code>graph: line\ntype: sensor\nentity: sensor.apollo_msr_1_a79e38_co2\ndetail: 2\nname: Bedroom CO2\nhours_to_show: 24\n</code></pre> <p>Custom: Plotly Graph Card</p> <p></p> <pre><code>type: custom:plotly-graph\nentities:\n  - entity: sensor.apollo_msr_1_a79e38_co2\nhours_to_show: 24\nrefresh_interval: 10\ntitle: Bedroom CO2\n</code></pre> <p>Home Assistant Guage</p> <p></p> <pre><code>type: gauge\nentity: sensor.apollo_msr_1_a79e38_co2\nneedle: true\nunit: ppm\nmin: 0\nmax: 3000\nseverity:\n  green: 0\n  yellow: 1000\n  red: 2000\n</code></pre>"},{"location":"products/msr1/examples/using-msr-1-buzzer/","title":"Using MSR-1 Buzzer","text":"<p>This guide will walk you through using the buzzer on your MSR-1. You can also call the below service through automations in Home Assistant.</p> <ol> <li>Open Home Assistant and navigate to developer tools in the bottom left</li> </ol> <p></p> <p>2. Click on services</p> <p>3. Choose your MSR-1's buzzer (You can type in buzzer to find it easier)</p> <p>4. Put a rtttl tone into the the string box</p> <ul> <li> <ul> <li>Mario: <code>smb:d=4,o=5,b=100:16e6,16e6,32p,8e6,16c6,8e6,8g6,8p,8g,8p,8c6,16p,8g,16p,8e,16p,8a,8b,16a#,8a,16g.,16e6,16g6,8a6,16f6,8g6,8e6,16c6,16d6,8b,16p,8c6,16p,8g,16p,8e,16p,8a,8b,16a#,8a,16g.,16e6,16g6,8a6,16f6,8g6,8e6,16c6,16d6,8b,8p,16g6,16f#6,16f6,16d#6,16p,16e6,16p,16g#,16a,16c6,16p,16a,16c6,16d6,8p,16g6,16f#6,16f6,16d#6,16p,16e6,16p,16c7,16p,16c7,16c7,p,16g6,16f#6,16f6,16d#6,16p,16e6,16p,16g#,16a,16c6,16p,16a,16c6,16d6,8p,16d#6,8p,16d6,8p,16c6</code></li> <li>Cantina: <code>Cantina:d=4,o=5,b=250:8a,8p,8d6,8p,8a,8p,8d6,8p,8a,8d6,8p,8a,8p,8g#,a,8a,8g#,8a,g,8f#,8g,8f#,f.,8d.,16p,p.,8a,8p,8d6,8p,8a,8p,8d6,8p,8a,8d6,8p,8a,8p,8g#,8a,8p,8g,8p,g.,8f#,8g,8p,8c6,a#,a,g</code></li> <li>Huge list: https://picaxe.com/rtttl-ringtones-for-tune-command/</li> <li>This is a good site to test rttl tones: https://adamonsoon.github.io/rtttl-play/</li> </ul> </li> </ul> <p>5. Click on call service button in bottom right</p> <p></p>"},{"location":"products/msr1/msr-1-reviews/beardedtinker-msr-1-review/","title":"BeardedTinker MSR-1 Review","text":""},{"location":"products/msr1/msr-1-reviews/beardedtinker-msr-1-review/#beardedtinker-youtube-video-review-msr-1","title":"BeardedTinker YouTube Video review - MSR-1","text":""},{"location":"products/msr1/msr-1-reviews/drzzs-msr-1-review/","title":"DrZzs MSR-1 Review","text":""},{"location":"products/msr1/msr-1-reviews/drzzs-msr-1-review/#_1","title":"DrZzs MSR-1 Review","text":"<p>Apollo MSR-1 review starts at 19:53.  </p>"},{"location":"products/msr1/msr-1-reviews/make-it-work-tech-msr-1-review/","title":"Make It Work Tech MSR-1 Review","text":""},{"location":"products/msr1/msr-1-reviews/make-it-work-tech-msr-1-review/#_1","title":"Make It Work Tech MSR-1 Review","text":""},{"location":"products/msr1/msr-1-reviews/make-it-work-tech-msr-1-review/#apollo-msr-1-review-starts-at-3122","title":"Apollo MSR-1 Review starts at 31:22.","text":""},{"location":"products/msr1/msr-1-reviews/mostlychris-msr-1-review/","title":"MostlyChris MSR-1 Review","text":""},{"location":"products/msr1/msr-1-reviews/mostlychris-msr-1-review/#the-little-sensor-that-does-it-all-esphome-and-home-assistant-ready","title":"The little sensor that does it all! ESPHome and Home Assistant Ready!","text":""},{"location":"products/msr1/msr-1-reviews/simon-says-home-assistant-msr-1-review/","title":"Simon Says Home Assistant MSR-1 Review","text":""},{"location":"products/msr1/msr-1-reviews/simon-says-home-assistant-msr-1-review/#check-out-the-apollo-multisensor-msr-1","title":"Check out the Apollo Multisensor MSR-1","text":""},{"location":"products/msr1/msr-1-reviews/smart-home-scene-msr-1-review/","title":"Smart Home Scene MSR-1 Review","text":""},{"location":"products/msr1/msr-1-reviews/smart-home-scene-msr-1-review/#smart-home-scene-msr-1-review_1","title":"Smart Home Scene MSR-1 Review","text":""},{"location":"products/msr1/setup/general-tips/","title":"General Tips","text":""},{"location":"products/msr1/setup/general-tips/#msr-1","title":"MSR-1","text":"<p>(Picture from Smart Home Scene)</p>"},{"location":"products/msr1/setup/general-tips/#light-sensor-ltr-390uv","title":"Light Sensor (LTR-390UV)","text":"<ul> <li> <p>When mounting the MSR-1 be sure to position the device so that the two large holes are not covered  </p> <ul> <li>This allows more light to enter and will ensure better accuracy</li> <li>The onboard RGB LED will trigger the light sensor </li> <li>Be cognizant of this when making automations based on light/LUX</li> </ul> </li> </ul>"},{"location":"products/msr1/setup/general-tips/#mounting","title":"Mounting","text":""},{"location":"products/msr1/setup/general-tips/#gate-and-fov-visualization","title":"Gate and FOV Visualization","text":"<ul> <li>FOV angle -60 to 60</li> <li>Gate images above are using a Radar Distance Resolution of 0.75m</li> <li> </li> <li> </li> </ul>"},{"location":"products/msr1/setup/general-tips/#gates-are-pre-defined-by-the-radar-module-and-are-in-meters-m","title":"Gates are pre-defined by the radar module and are in meters (m)","text":""},{"location":"products/msr1/setup/general-tips/#zones-are-user-configurable-and-are-in-centimeters-cm","title":"Zones are user-configurable and are in centimeters (cm)","text":""},{"location":"products/msr1/setup/general-tips/#increased-esp-temperature","title":"Increased ESP Temperature","text":"<p>If you are experiencing higher than normal ESP temperatures ~140+ degrees F then changing the wifi power save mode option might help decrease the temperature. Here is the link to the ESPHome WiFi Component Power Save Mode.  </p> <p>Power Save Mode The WiFi interface of all ESPs offer three power save modes to reduce the amount of power spent on WiFi. While some options can reduce the power usage of the ESP, they generally also decrease the reliability of the WiFi connection, with frequent disconnections from the router in the highest power saving mode.  </p> <p>NONE (least power saving, Default for ESP8266) LIGHT (Default for ESP32) HIGH (most power saving)</p> <pre><code>wifi:\n  # ...\n  power_save_mode: none\n</code></pre> <p>The code above can be added to the devices .yaml through the ESPHome addon edit button.  </p> <p>(Thank you for the suggestion, Brian!) (Referenced from ESPHome website)</p>"},{"location":"products/msr1/setup/how-to-change-the-update-frequency-of-sensors/","title":"How To Change The Update Frequency Of Sensors","text":""},{"location":"products/msr1/setup/how-to-change-the-update-frequency-of-sensors/#how-to-change-the-update-frequency-of-sensors_1","title":"How To Change The Update Frequency Of Sensors","text":""},{"location":"products/msr1/setup/sensor-definitions/","title":"Sensor Definitions","text":"<p>Once added to Home Assistant you can configure different settings for your sensor. Below is what each setting does.</p>"},{"location":"products/msr1/setup/sensor-definitions/#controls","title":"Controls","text":"<ul> <li>RGB Light<ul> <li>A RGB Neopixel. Click on the light bulb to change the color. Click on the toggle to turn on or off</li> </ul> </li> </ul>"},{"location":"products/msr1/setup/sensor-definitions/#sensors","title":"Sensors","text":"<ul> <li>BME280 Humidity<ul> <li>Humidity reading from the BME280. This is affected by the configuration variable \"BME280 Humidity Offset\". Changing the offset allows you to dial in the humidity to a known value.</li> </ul> </li> <li>BME280 Humidity Calibrated - Removed In v23.11.01.1<ul> <li>We calibrated the BME280 against a lab-rated reference sensor. We set the linear offset values in the YAML and this variable is the output.</li> </ul> </li> <li>BME280 Pressure<ul> <li>Atmospheric pressure reading from BME280</li> </ul> </li> <li>BME280 Temperature<ul> <li>Temperature reading from BME280. This is affected by the configuration variable \"BME280 Temperature Offset\". Changing the offset allows you to dial in the temperature to a known value.</li> </ul> </li> <li>BME280 Temperature Calibrated - Removed In v23.11.01.1<ul> <li>We calibrated the BME280 against a lab-rated reference sensor. We set the linear offset values in the YAML and this variable is the output.</li> </ul> </li> <li>CO2<ul> <li>True CO2 reading from the SCD40. This will be Unknown if you do not have the CO2 module. This can be calibrated following this guide but does come precalibrated: Here</li> </ul> </li> <li>ESP Temperature<ul> <li>This is the temperature of the internal ESP chip. Think of it like your measured CPU temp on your PC</li> </ul> </li> <li>LTR390 Ambient Light - Removed. Value wasn't useful<ul> <li>Light level measured by LTR390</li> </ul> </li> <li>LTR390 Light<ul> <li>Light level measured in lux by LTR390</li> </ul> </li> <li>LTR390 UV - Removed. Value wasn't useful<ul> <li>UV level measured by LTR390</li> </ul> </li> <li>LTR390 UV Index<ul> <li>UV index measured by LTR390</li> </ul> </li> <li>Radar Detection Distance<ul> <li>The last detected distance by the radar. This will stay at the last known value so sometimes can be misleading</li> </ul> </li> <li>Radar Move Energy<ul> <li>The amount of movement measured by the LD2410B. Faster movements have higher %</li> </ul> </li> <li>Radar Moving Target<ul> <li>Does the radar have a moving target it is tracking</li> </ul> </li> <li>Radar Still Distance<ul> <li>The last measured distance of a still target. It will hold the last value so sometimes can be misleading</li> </ul> </li> <li>Radar Still Energy<ul> <li>The energy of the current still target</li> </ul> </li> <li>Radar Still Target<ul> <li>Does the radar have a still target</li> </ul> </li> <li>Radar Target<ul> <li>Does the radar have a still or moving target. Good for triggering automation.</li> </ul> </li> <li>Radar Zone 1 Occupancy<ul> <li>This is a configurable zone. Think of zones like distances from the radar unit. Zone 1 might be from 0 cm to 120 cm from the sensor. This is telling you if there is someone in that zone. The zones can be defined in the configuration section with \u201cRadar End Zone 1\u201d</li> </ul> </li> <li>Radar Zone 2 Occupancy<ul> <li>Same as zone 1 but just the second zone from the sensor</li> </ul> </li> <li>Radar Zone 3 Occupancy<ul> <li>Same as zone 1 &amp; 2 but with the third zone.</li> </ul> </li> <li>SCD40 Humidity - Removed In v23.11.01.1<ul> <li>This is the humidity reading from the SCD40. Will be unknown if you do not have the CO2 module</li> </ul> </li> <li>SCD40 Temperature - Removed In v23.11.01.1<ul> <li>This is the temperature reading from the SCD40. Will be unknown if you do not have the CO2 module</li> </ul> </li> </ul>"},{"location":"products/msr1/setup/sensor-definitions/#configuration","title":"Configuration","text":"<ul> <li>BME280 Humidity Offset<ul> <li>Allows you to adjust the reading of the \u201cBME280 Humidity\u201d sensor to match a known value</li> </ul> </li> <li>BME280 Temperature Offset<ul> <li>Allows you to adjust the reading of the \u201cBME280 Temperature\u201d sensor to match a known value</li> </ul> </li> <li>CO2 Calibration Number<ul> <li>See calibrating CO2: Here</li> </ul> </li> <li>ESP Reboot<ul> <li>Performs a restart of the sensor</li> </ul> </li> <li>Factory Reset Radar<ul> <li>Sets the radar's move thresholds back to their original values from the manufacturer</li> </ul> </li> <li>g0-g8 Move &amp; Still Threshold<ul> <li>Please refer to the radar tuning guide: Here</li> </ul> </li> <li>Radar Control Bluetooth<ul> <li>This allows you to turn on the LD2410's Bluetooth. This allows you to connect to the HLK Radar phone app if you wanted to upload new firmware to the radar unit (Not the MSR-1 in general, just the radar chip)</li> </ul> </li> <li>Radar Distance Resolution<ul> <li>Best to keep on 0.75m in many cases. If you change it to 0.25m the first few gates become very very sensitive and the maximum detection distance shrinks a lot.</li> </ul> </li> <li>Radar Zone 1 Start<ul> <li>This sets the starting distance for Zone 1 in cm. This is the distance from the sensor to the start of Zone 1</li> </ul> </li> <li>Radar End Zone 1<ul> <li>This defines \u201cZone 1\u201d of the radar. It is a distance from the sensor that specifies what \u201cZone 1\u201d is. It connects to the \u201cRadar Zone 1 Occupancy\u201d sensor. So if this number is set to \u201c10\u201d that means from 0 to 10 centimeters from the sensor is zone 1.</li> </ul> </li> <li>Radar End Zone 2<ul> <li>Same as Zone 1. This defines where zone 2 ends</li> </ul> </li> <li>Radar End Zone 3<ul> <li>Like Zone 2, this defines where zone 3 ends</li> </ul> </li> <li>Radar Max Move Distance<ul> <li>Maximum distance gate for movement detection. Value between 2 and 8 inclusive</li> </ul> </li> <li>Radar Max Still Distance<ul> <li>Maximum distance gate for still detection. Value between 2 and 8 inclusive. Defaults to 8.</li> </ul> </li> <li>Radar Timeout<ul> <li>The time in seconds that the radar's presence will stay high after the target is lost.</li> </ul> </li> <li>SCD40 Humidity Offset - Removed In v23.11.01.1<ul> <li>Allows you to adjust the reading of the \u201cSCD40 Humidity\u201d sensor to match a known value.</li> </ul> </li> <li>SCD40 Temperature Offset - Removed In v23.11.01.1<ul> <li>Allows you to adjust the reading of the \u201cSCD40 Temperature\u201d sensor to match a known value</li> </ul> </li> </ul>"},{"location":"products/msr1/troubleshooting/manually-uploading-code-through-esphome/","title":"Manually Uploading Code Through ESPHome","text":"<p>If your device becomes unresponsive and you've exhausted the other troubleshooting methods you can upload a fresh set of firmware by following the below guide. The utility does need to be run from Chrome or Edge.</p> <p>If your device has already been connected to Home Assistant previously please refer to Removing Device From Home Assistant first before proceeding</p> <ol> <li>Plug your MSR-1 into your computer with a quality USBC cable that supports data transfer</li> <li> <p>Navigate to our installer page and click connect ** Install Page **</p> </li> <li> <p>Select your Apollo device, it will show with a similar name to the one below, and click connect. If you aren't sure which device it is, you can unplug the MSR-1 and see which disappears.</p> </li> </ol> <p></p> <p>If no device shows, click cancel and then install the recommended driver that shows on the popup. If you have installed the driver, tried different cables, and it still won't work refer here for putting the MSR-1 in bootloader mode and then retry step 3. Putting MSR-1 In Boot Mode Document</p> <ol> <li>Choose to install the new firmware</li> </ol> <p></p> <ol> <li>Wait for the installer to finish</li> </ol> <p></p> <ol> <li> <p>After finishing, check for the Apollo hotspot and connect. This might not show if you previously had the MSR-1 connected to your wifi</p> </li> <li> <p>Log into Home Assistant and go to the ESPHome addon check to see if you can adopt the device.</p> </li> </ol> <p>If you encounter the below error, please complete the Putting MSR-1 In Boot Mode Document and go back to step 3.</p> <p></p>"},{"location":"products/msr1/troubleshooting/putting-the-msr-1-in-boot-mode/","title":"Putting The MSR-1 In Boot Mode","text":"<p>This will cover how to put the MSR-1 into boot mode. Sometimes, this is needed to upload new firmware if the device is struggling.  </p> <p>Boot Button Only</p> <ol> <li>Plug in the device</li> <li>See the photo below to help access the boot button through the top of the case</li> <li>Use a pin to press and hold the boot button, while holding the boot button plug it back into your computer/power and then release the boot button</li> </ol> <p>  4. Continue with uploading the firmware document </p> <p>Boot and Reset Buttons</p> <ol> <li>Unplug the device</li> <li>Slide the back of the case off</li> <li>Remove the device from the case</li> <li>Plug it back into your computer</li> <li>Press and hold the boot button, while holding it press and release the reset button, then release the boot button</li> </ol> <p></p> <p>6. Continue with uploading the firmware document</p>"},{"location":"products/msr2/calibrating-co2/","title":"CO2 Calibration - The Quick method - Desktop Only not mobile","text":""},{"location":"products/msr2/calibrating-co2/#this-article-will-guide-you-through-a-simple-calibration-of-your-co2-sensor-for-any-apollo-automation-device","title":"This article will guide you through a simple calibration of your CO2 sensor for any Apollo Automation device!","text":"<ol> <li>Go to your home assistant dashboard and hit the letter \"e\" - It will pop up with an entity filter and here we will type in \"Calibrate CO2\" and select the correct device. *HINT* If you cannot get this menu to pop-up, click somewhere on the home assistant dashboard then press your \"e\" key **HINT** </li> <li>DO NOT RUSH THIS  Go Plug your sensor in outside and let it sit for 5 minutes or more to get normalized readings DO NOT RUSH THIS</li> <li> <p>Click on the button that says \"PRESS\" and then you are done. </p> <ol> <li>Go get your sensor from outside and plug your sensor in wherever you want it!</li> </ol> </li> </ol>"},{"location":"products/msr2/faq/","title":"FAQ","text":"<p>1. What sensors are included in the MSR-2?</p> <p>\u2022   The MSR-2 includes several built-in sensors such as a mmWave radar for motion detection, a LUX and UV sensor, a temperature and pressure sensor, and an optional CO2 sensor.</p> <p>2. How does the mmWave radar sensor work?</p> <p>\u2022   The mmWave radar sensor can detect movement, even subtle motions like someone sitting still in a room. It works by emitting radar waves that reflect off objects and detects motion based on the change in the signal. The sensor is highly effective in detecting people in a room, even through light walls.</p> <p>3. What is the maximum detection range of the mmWave radar?</p> <p>\u2022   The HLK-LD2410b mmWave radar sensor has a maximum detection range of about 6 meters (19.6 feet) with multi-target tracking capabilities, making it ideal for room-wide monitoring.</p> <p>4. Can the MSR-2 detect multiple people?</p> <p>\u2022   Yes, the MSR-2 supports multi-target tracking, allowing it to detect up to 3 people and provide data on their movement and location within a defined space.</p> <p>5. What is the benefit of the LUX and UV sensor?</p> <p>\u2022   The LUX sensor measures the amount of light in a room, while the UV sensor tracks the ultraviolet index. These readings can be used to automate lighting systems, such as turning on or off lights depending on the ambient brightness, or to measure sunlight exposure in a room.</p> <p>6. How does the optional CO2 sensor work?</p> <p>\u2022   The optional SCD-40 CO2 sensor provides accurate carbon dioxide measurements and is useful for tracking air quality in enclosed spaces. This sensor can be used to automate HVAC systems, sending alerts when CO2 levels are too high and suggesting when to ventilate the area.</p> <p>7. How do I connect the MSR-2 to Home Assistant?</p> <p>\u2022   The MSR-2 connects to your Home Assistant instance through ESPHome using WiFi. Once connected, you can monitor data from all the sensors and set up automations.</p> <p>8. What kind of automations can I create with the MSR-2?</p> <p>\u2022   You can create a variety of automations, such as turning on lights when motion is detected, adjusting ventilation when CO2 levels rise, or triggering alarms based on motion or environmental changes.</p> <p>9. What is the purpose of the RGB LED and piezo buzzer?</p> <p>\u2022   The RGB LED can be customized to display different colors for various events, such as turning red when CO2 levels are high or green for system notifications. The piezo buzzer can be used for audible alerts, such as notifying you of motion detection or other important events.</p> <p>10. How do I adjust the sensitivity of the motion detection?</p> <p>\u2022   Sensitivity adjustments can be made through the ESPHome configuration, allowing you to fine-tune the radar to avoid false positives or to increase its sensitivity for more precise detections.</p> <p>11. Does the mmWave sensor detect through walls?</p> <p>\u2022   Yes, the mmWave sensor can detect movement through certain materials like thin walls, which is helpful in larger spaces but may require sensitivity adjustments if false positives occur due to adjacent rooms.</p> <p>12. Can the MSR-2 be used outdoors?</p> <p>\u2022   The MSR-2 is primarily designed for indoor use. However, with proper enclosure and environmental protection, it could potentially be used outdoors. Be cautious about weather conditions and moisture exposure.</p> <p>13. What\u2019s new in the MSR-2 compared to the MSR-1?</p> <p>\u2022   The MSR-2 introduces several improvements, including a smaller form factor, an additional expansion slot for future accessories, an updated DPS310 pressure sensor for more accurate readings, and improved temperature and pressure tracking.</p> <p>14. Can the MSR-2 track the exact location of people in a room?</p> <p>\u2022   Yes, the MSR-2 uses multi-zone mmWave radar technology to track the approximate location of people within a room. It can determine whether someone is sitting, walking, or standing in different areas of the space.</p> <p>15. How does the temperature and pressure sensor work?</p> <p>\u2022   The DPS310 sensor provides precise readings of air temperature and pressure, which are especially useful when combined with the optional CO2 sensor to improve air quality monitoring. Keep in mind the heat generated by the ESP32 may require a temperature offset adjustment in the configuration.</p> <p>16. What kind of power supply is required for the MSR-2?</p> <p>\u2022   The MSR-2 is powered via USB-C and can be plugged into a standard wall outlet using a 5V adapter.</p> <p>17. Can I customize the MSR-2\u2019s features?</p> <p>\u2022   Absolutely. The MSR-2 is fully customizable through ESPHome. You can modify the configuration to meet your specific needs, such as adjusting sensor reporting intervals, configuring automations, or customizing the RGB LED and buzzer alerts.</p> <p>18. How often does the MSR-2 report sensor data?</p> <p>\u2022   The reporting frequency can be customized through the ESPHome YAML configuration. You can set it to report data as frequently as every second or reduce the frequency to save energy or bandwidth.</p> <p>19. Is the MSR-2 compatible with other smart home platforms?</p> <p>\u2022   The MSR-2 is specifically designed for Home Assistant via ESPHome. While it could be compatible with other platforms through custom integrations, its primary functionality is optimized for Home Assistant.</p> <p>20. Can I use multiple MSR-2 sensors in my Home Assistant setup?</p> <p>\u2022   Yes, you can have multiple MSR-2 sensors connected to the same Home Assistant instance. Each device will show up as a separate entity, allowing you to monitor and automate different rooms or areas in your home.</p> <p>21. What accessories are available for the MSR-2?</p> <p>\u2022   The MSR-2 has an additional expansion slot for future accessories. Currently, accessories such as a USB-C wall plug mount and a ball mount for flexible positioning are available. We are also working on new expansion boards for future updates.</p> <p>22. Is the MSR-2 secure?</p> <p>\u2022   The MSR-2 communicates over your local network using ESPHome, which provides a secure, local connection without the need for cloud services. No data is sent to external servers, ensuring privacy.</p> <p>23. How do I install and configure the MSR-2?</p> <p>\u2022   Installation is straightforward, with the MSR-2 powered via USB-C and connecting to Home Assistant through WiFi. Configuration is done in ESPHome, where you can set sensor parameters, adjust automations, and more. We provide detailed documentation and support through our Discord community and GitHub.</p> <p>24. What makes the MSR-2 stand out from other motion sensors?</p> <p>\u2022   The MSR-2 stands out due to its mmWave radar\u2019s ability to detect still motion (like someone sitting still) and its capability to track multiple targets and zones. Additionally, its compact size, multi-sensor integration (motion, LUX, UV, CO2, temperature, pressure), and the open-source nature of the product make it highly versatile and customizable.</p> <p>25. What is the warranty for the MSR-2?</p> <p>\u2022   The MSR-2 comes with a standard one-year warranty. If you experience any issues, our support team is available through Discord, email, or the website to assist with troubleshooting or replacement.</p>"},{"location":"products/msr2/introduction/","title":"Introduction","text":"<p>The Apollo MSR-2 is a compact, versatile mmWave multisensor for Home Assistant, designed for precise motion detection and smart home automation. It builds on the MSR-1 with a smaller form factor, an additional expansion slot, and improved sensors for temperature and pressure. The sensor includes LUX/UV detection, an optional CO2 sensor, RGB LED, and piezo buzzer for customizable notifications. Fully open-source and expandable, the MSR-2 offers seamless integration with Home Assistant, making it ideal for automating lighting, air quality monitoring, and more. Access to support and customization resources is available via our Discord and GitHub.</p>"},{"location":"products/msr2/additional-info/adding-co2-to-msr-2/","title":"Adding CO2 To MSR-2","text":"<p>This is for the MSR-1 but it is very similar to the MSR-2. </p> <p>1. Unplug your MSR-2 from power and remove the back</p> <p></p> <p>2. Remove the board from the case and orientate it like the below image. In the bottom right there is a black connector. There is an x in the lower right corner of the connector</p> <p></p> <p>3. Orientate the CO2 module so the white x on the module is also in the lower right and the gold dot is in the upper left as seen below</p> <p></p> <p>4. Align the connector on the back of the CO2 module with the connector on the MSR-2. Once aligned, push down so the CO2 module fully seats itself</p> <p></p> <p>5. Put your MSR-2 back in the case and slide the back cover on. Please refer to our CO2 calibration guide to calibrate the CO2 module.</p>"},{"location":"products/msr2/additional-info/mmwave-presence-sensor-comparison/","title":"mmWave Presence Sensor Comparison","text":""},{"location":"products/msr2/additional-info/mmwave-presence-sensor-comparison/#_1","title":"mmWave Presence Sensor Comparison","text":"<p>Column1Apollo MSR-1Apollo MSR-2Everything Presence One KitEverything Presence Lite KitScreek Human Sensor 1UScreek Human Sensor 2AAqara FP1Aqara FP2Apollo MTR-1 Price (USD)$ 34.99$ 34.99$ 78.00$ 37.00$ 25.99$ 29.99$ 49.99$ 82.99$ 36.99 Motion Detection         mmWaveLD2410BLD2410BSEN0395LD2450LD2410CLD2450BGT60TR13CIWR6843LD2450Detection Distance (m)66966656 to 86 Detection Zones3 zones and 9 gates (adjustable and distance based)3 zones and 9 gates (adjustable and distance based) 3 zones 3 zonesx30 zones3 zonesTarget Tracking1112-3 (3 not great)12-3 (3 not great)x3-5 (not great above 3)2-3 (3 not great)PIR  Panasonic      Connection Method         Wi-FiESP32-C3-MINIESP32-C3-MINIESP32-WROOM-32ESP32-WROOM-32ESP32-S2ESP32-C3 ESP32-WROOM-32UESP32-C3-MINIZwave      x  Zigbee      x  BluetoothESP32-C3-MINIESP32-C3-MINIESP32-WROOM-32ESP32-WROOM-32ESP32-S2ESP32-C3 ESP32-WROOM-32UESP32-C3-MINIESPHomeESP32-C3-MINIESP32-C3-MINIESP32-WROOM-32ESP32-WROOM-32ESP32-S2ESP32-C3  ESP32-C3-MINICase / Stand         Case Includedxx$ 8.00xxxxxxCable   xxxxx Stand\\(4.99 (Optional)\\)4.99 (Optional)Included with case purchasex  xx Outlet Mount\\(6.99 (Optional)\\)6.99 (Optional)      \\(6.99 (Optional)Outlet Mount w/ Wall Plug\\)12.98 (Optional)$12.98 (Optional)      $12.98 (Optional)Size (mm)40x32x1340x24x15  36.7x30x13.856.9x56.9x14.352x45x3664x64x29.5 Additional Features         LEDxxxx    xRGB LEDxx      xTemp/Humidityxx (Humidity optional with SCD40)x     x (Humidity optional with SCD40)Light/LUXxxxx    xUV/UV Indexxx      xGPIOx $ 4.99 (Optional with GPIO Header)x     $ 4.99 (Optional with GPIO Header)Piezo Buzzerxx      xCO2SCD40 $20 (Optional)SCD40 $20 (Optional)      SCD40 $20 (Optional)Works with multiple mmWave   x             CountryUSAUSAEUEUChinaChinaChinaChinaUSAProduct LinkApollo MSR-1Apollo MSR-2Everything Presence One KitEverything Presence Lite KitScreek Human Sensor 1UScreek Human Sensor 2AAqara FP1Aqara FP2Apollo MTR-1mmWaveLD2410BLD2410BSEN0395LD2450LD2410CLD2450BGT60TR13CIWR6843LD2450ESPESP32-C3-MINIESP32-C3-MINIESP32-WROOM-32ESP32-WROOM-32ESP32-S2ESP32-C3 ESP32-WROOM-32UESP32-C3-MINI</p>"},{"location":"products/msr2/additional-info/reducing-ld2410-log-entries-in-home-assistant/","title":"Reducing LD2410 Log Entries In Home Assistant","text":"<ol> <li>Open your Home Assistant configuration.yaml</li> <li>Add this code to the very bottom but use the entity name of your MSR-2 <pre><code>logbook:\n  exclude:\n    entities:\n      - binary_sensor.hallway_motion_home_security_motion_detection\n</code></pre></li> <li>Check Configuration in Home Assistant developer tools tab to confirm your yaml code is correct.</li> <li>Restart Home Assistant</li> </ol>"},{"location":"products/msr2/calibrating-and-updating/co2-calibration-for-msr-2/","title":"CO2 Calibration For MSR-2","text":""},{"location":"products/msr2/calibrating-and-updating/co2-calibration-for-msr-2/#please-refer-to-the-general-co2-calibration-article","title":"Please refer to the General CO2 Calibration article","text":""},{"location":"products/msr2/calibrating-and-updating/how-to-tune-mmwave-using-hlkradartool/","title":"How To Tune mmWave Using HLKRadarTool","text":"<p>Auto-Calibration (Average, Maximum, and Intelligent)  1. Download the HLKRadarTool app for either Android or Apple</p> <ul> <li>The default password to connect to the HLKRadarTool is HiLink</li> </ul> <p>2. Ensure the mmWave radar you want to tune has Radar Control Bluetooth turned on. Home Assistant &gt; Settings &gt; Devices &amp; services &gt; ESPHome Devices &gt; Select Device &gt; Scroll down and toggle on Radar Control Bluetooth  </p> <p> </p> <p>3. Open the app and select your device  </p> <p> </p> <p>4. Turn on Engineering Mode  </p> <p> </p> <p>5. Select More and then select Parameter settings  </p> <p> </p> <p>6. Select Detect background noise  </p> <p> </p> <p>7. Insert Delay detection and Detection time values. (For iPhone users Delay detection cannot be 0). Then select Start. This will give us our reference values so we can auto-calibrate the mmWave sensor.  </p> <p> </p> <p>8. Select Back to navigate to the Parameter settings. Then select one of the auto-calibration buttons.  </p> <p>Average - Sets the gate sensitivity to the average move and still energy  </p> <p>Maximum - Sets the gate sensitivity to the maximum move and still energy</p> <p> </p> <p>Intelligent - Sets the gate sensitivity equal to or just above the maximum move and still energy  9. Now your mmWave should be tuned to your environment! Manual Calibration 1. Follow steps 1-5 above  </p> <p>2. Select Motion or Static sensitivity, change it to your desired value, and select Set  </p> <p> </p> <p>3. Now your mmWave should be tuned to your environment!</p>"},{"location":"products/msr2/calibrating-and-updating/how-to-tune-mmwave-using-home-assistant/","title":"How To Tune mmWave Using Home Assistant","text":"<p>If you're experiencing false triggers, we recommend using Radar Engineering Mode (REM) to monitor the gate energy and adjust the gate threshold to eliminate them.  </p> <p>Here is a quick introduction video of the ld2410b gates and zones.  </p> <p>Here is a video of how to tune the mmWave sensor using radar engineering mode,  </p> <ol> <li>Open Home Assistant</li> <li>Navigate to Settings&gt;Devices &amp; services&gt;ESPHome&gt;Select the MSR-2</li> <li>Scroll down to the Configuration section</li> <li>Turn on Radar Engineering Mode (REM) </li> <li>Scroll down to the Diagnostic section and you will see that REM shows the move and still energy for gates 0-8 </li> <li>The gates are different distances from the sensor </li> <li>Moving the gate still and move threshold slider to the right increases the amount of energy needed to trigger the sensor. Do this if you want the gate to be less sensitive. </li> <li>Moving the gate still and move threshold slider to the left decreases the amount of energy needed to trigger the sensor. Do this if you want the gate to be more sensitive. </li> </ol> <p>Alternate Method</p> <p>Thanks to MakeItWorkTech for this method!</p> <p>\"I ended up maxing out the sliders on all gates and then bringing them down just enough to pick up human presence. Definitely easier than using the LD2410B app.\"</p> <p>Example</p> <p>- You may have an open-concept kitchen and living room, and you want the MSR-1 to activate your under-cabinet lights only when you're in the kitchen.</p> <p>Here's how:</p> <ol> <li>Stand in the desired trigger locations.</li> <li>Observe the gate energy.</li> <li>Adjust the gate threshold slider to the right, increasing the energy required to trigger the mmWave sensor. This ensures that your kitchen lights only come on when you're actually in the kitchen, not just walking by in the living room. Also, you can lower the gate threshold in the kitchen by moving the slider to the left. This makes the mmWave sensor more sensitive, even when standing still. This way, you avoid having the lights go off while reading a recipe or doing the dishes.</li> </ol> <p>- From clarinetJWD, \"Engineering mode is what I was missing at first. I did exactly that, and now detection is basically perfect! My under cabinet lights now come on to max brightness whenever someone is in the kitchen, and return to their previous value when they leave. Next up is replacing the really flaky motion switch in my garage so it stops shutting off when I'm doing a project at the workbench! Thanks, these are really good.</p> <p>References</p> <ul> <li>https://youtu.be/dAzHXpP3FcI?t=431</li> <li>https://community.home-assistant.io/t/ld2410-esphome-tips/477058/316</li> <li>https://www.youtube.com/watch?v=l212Lvo1R6s</li> </ul>"},{"location":"products/msr2/calibrating-and-updating/msr-2-temperature-%26-humidity-offsets/","title":"MSR-2 Temperature &amp; Humidity Offsets","text":""},{"location":"products/msr2/calibrating-and-updating/msr-2-temperature-%26-humidity-offsets/#simple-offsets-for-temperature-and-humidity","title":"Simple Offsets for Temperature and Humidity:","text":"<p>Please add these to the bottom of your esphome yaml for your device then click save and install. Once you are finished, you will have two new boxes inside the home assistant esphome integration device page for your device where you can fill in an offset. Give them up to 1minute to take effect!</p> <pre><code>sensor:\n  - id: !extend scd40\n    humidity:\n      name: \"Humidity\"\n      id: \"humidity\"\n      filters:\n        - lambda: return x - id(scd40_humidity_offset).state;\n    temperature:\n      name: \"Temperature\"\n      id: \"temperature\"\n      filters:\n        - lambda: return x - id(scd40_temperature_offset).state;\nnumber:\n  - platform: template\n    name: SCD40 Humidity Offset\n    id: scd40_humidity_offset\n    restore_value: true\n    initial_value: -18.86\n    min_value: -70.0\n    max_value: 70.0\n    entity_category: \"CONFIG\"\n    unit_of_measurement: \"%\"\n    optimistic: true\n    update_interval: never\n    step: 0.1\n    mode: box\n  - platform: template\n    name: SCD40 Temperature Offset\n    id: scd40_temperature_offset\n    initial_value: 14.54\n    min_value: -70.0\n    max_value: 70.0\n    entity_category: \"CONFIG\"\n    unit_of_measurement: \"\u00b0C\"\n    optimistic: true\n    update_interval: never\n    step: 0.1\n    mode: box\n</code></pre>"},{"location":"products/msr2/calibrating-and-updating/msr-2-temperature-%26-humidity-offsets/#dps310-scd40-sensors-overcoming-temperature-humidity-reading-challenges","title":"DPS310 &amp; SCD40 Sensors: Overcoming Temperature &amp; Humidity Reading Challenges","text":"<p>The DPS310 and SCD40 sensors are known for their precision in measuring temperature and humidity. However, like all sensor systems, they can sometimes provide inaccurate readings due to various factors. In the case of the DPS310 and SCD40 sensors, one significant challenge arises from the heat produced by the ESP chip, which can alter the environment inside its enclosure, thereby skewing the readings.</p>"},{"location":"products/msr2/calibrating-and-updating/msr-2-temperature-%26-humidity-offsets/#adjusting-the-dps310-and-scd40-temperature-offset","title":"Adjusting the DPS310 and SCD40 Temperature Offset","text":"<p>For users who want to fine-tune their sensors, the DPS310 and SCD40 Temperature Offset entities can be manually adjusted to match the conditions in their home. The offset values are subtracted from the raw temperature &amp; humidity readings in the firmware to update the sensor readings in the home assistant entity. For example: scd40_temperature entity = raw scd40 temperature reading - scd40_offset.   </p> <p>By default, these offsets are preset to values based on our NIST certified thermometer, it's important to note that these values are calibrated for our environment. They might not be accurate for all settings. Therefore, by using a reference thermometer, users can adjust the difference between the readings to get a more accurate representation.   </p> <p>Users will also notice the <code>dps310_temperature_calibrated</code>, <code>scd40_humidity_calibrated</code>, and <code>scd40_temperature_calibrated</code>entities. These values utilize the linear filter in the ESPHome firmware to adjust the readings based on our collected data. Again, due to environmental differences, these might not always be precise.</p>"},{"location":"products/msr2/calibrating-and-updating/msr-2-temperature-%26-humidity-offsets/#modeling-the-relationship-between-sensors","title":"Modeling the Relationship Between Sensors","text":"<p>Another approach to getting accurate readings is to model the relationship between the ESP temperature and the other sensors compared against a reference temperature. This can be achieved by creating a template sensor in Home Assistant that employs a decision tree or our regression coefficients.</p> <p>Here's an example that can be added to a configuration YAML:</p> <pre><code>sensor:\n  - platform: template\n    sensors:\n      estimated_reference_temperature:\n        friendly_name: \"Estimated Temperature\"\n        unit_of_measurement: '\u00b0C'\n        value_template: &gt;\n          {{\n            0.3228 * states('sensor.apollo_msr_1_a79e24_esp_temperature') | float +\n            0.8702 * states('sensor.apollo_msr_1_a79e24_scd40_temperature') | float +\n            -0.1285 * states('sensor.apollo_msr_1_a79e24_dps310_temperature') | float +\n            -0.0491 * states('sensor.apollo_msr_1_a79e24_scd40_humidity') | float +\n            0.0851\n          }}\n\n\n      estimated_reference_humidity:\n        friendly_name: \"Estimated Humidity\"\n        unit_of_measurement: '%'\n        value_template: &gt;\n          {{\n            -1.2468 * states('sensor.apollo_msr_1_a79e24_esp_temperature') | float +\n            -2.1959 * states('sensor.apollo_msr_1_a79e24_scd40_temperature') | float +\n            2.9604 * states('sensor.apollo_msr_1_a79e24_dps310_temperature') | float +\n            0.2380 * states('sensor.apollo_msr_1_a79e24_scd40_humidity') | float +\n            1.8283\n          }}\n</code></pre> <p>For users who want to gather their own data with a reference sensor and MSR-2 within their home, we recommend logging data to a CSV using the following YAML entries:</p> <pre><code>#Configuration.yaml\nnotify:\n  - platform: file\n    name: sensor_csv_log\n    filename: /config/sensor_log.csv\n    timestamp: False\n\n#Automations.yaml\n  - id: log_sensor_data_to_csv\n    alias: \"Log Sensor Data to CSV\"\n    trigger:\n      platform: time_pattern\n      minutes: \"/1\"  # Log data every minute to match reference sensor\n    action:\n      - service: notify.sensor_csv_log\n        data_template:\n          message: &gt;\n            {{ now().strftime('%Y-%m-%d %H:%M:%S') }},\n            {{ states('sensor.apollo_msr_1_a79e24_esp_temperature') | default('NA') }},\n            {{ states('sensor.apollo_msr_1_a79e24_scd40_temperature') | default('NA') }},\n            {{ states('sensor.apollo_msr_1_a79e24_dps310_temperature') | default('NA') }},\n            {{ states('sensor.apollo_msr_1_a79e24_scd40_humidity') | default('NA') }},\n            {{ states('number.apollo_msr_1_a79e24_dps310_temperature_offset') | default('NA') }},\n            {{ states('number.apollo_msr_1_a79e24_scd40_humidity_offset') | default('NA') }},\n            {{ states('number.apollo_msr_1_a79e24_scd40_temperature_offset') | default('NA') }},\n            {{ states('sensor.apollo_msr_1_a79e24_uptime') | default('NA') }}\n</code></pre>"},{"location":"products/msr2/calibrating-and-updating/msr-2-temperature-%26-humidity-offsets/#the-interrelation-of-temperature-and-humidity","title":"The Interrelation of Temperature and Humidity","text":"<p>It's important to understand that temperature and humidity share an interdependent relationship. When the air temperature rises, its capacity to hold moisture increases, which can decrease relative humidity levels. Conversely, when the temperature falls, the air's capacity to hold moisture decreases, leading to increased humidity. This relationship plays a significant role in how sensors detect and interpret readings, making it even more crucial to ensure accuracy.</p>"},{"location":"products/msr2/calibrating-and-updating/msr-2-temperature-%26-humidity-offsets/#advanced-accuracy-with-gpio","title":"Advanced Accuracy with GPIO","text":"<p>For those seeking the highest accuracy, an advanced solution is available. The exposed mezzanine connector on the back of our Apollo boards can be utilized to connect a temperature/humidity sensor. This modification can dramatically improve both temperature and humidity readings, providing data that's as accurate as possible.</p>"},{"location":"products/msr2/calibrating-and-updating/updating-msr-2-firmware/","title":"Updating MSR-2 Firmware","text":""},{"location":"products/msr2/calibrating-and-updating/updating-msr-2-firmware/#please-refer-to-the-general-firmware-update-article","title":"Please refer to the general firmware update article","text":""},{"location":"products/msr2/examples/how-to-use-the-apollo-gpio-header-to-control-an-led-strip/","title":"How To Use The Apollo GPIO Header To Control An LED Strip","text":"<p>This tutorial will guide you through setting up one of our MSR-2 devices (works with any mezzanine port on any Apollo Device) with the optional $4.99 GPIO Header which adds pins for you to easily add functionality to your device! In this tutorial, however, we will be focusing on adding an LED strip to your Apollo device.</p> <p>Materials Needed for tutorial:</p> <ul> <li>Apollo MSR-2, Apollo MTR-1, and all other future Apollo Automation products with the mezzanine port.</li> <li>Apollo GPIO Header</li> <li>ws2812b aka neopixel RGB led strip or similar. sk6812 RGBW strip will also work.</li> <li>Optional DuPont Cables for GPIO Header but any DuPont cables will do.</li> <li>USB-C cable and power brick to power MSR-2</li> </ul> <p>You are limited to 300mA of power output from the 5v port. You can either attach an external power supply and power the MSR-2 via 5v and gnd pins or work with the limited power output of the port</p> <p></p> <p>Above is an image of the GPIO Header and its pinouts. We can use ports 2,4,6,7 for our data channel to an LED strip or multiple LED strips. We will also use the top two ports which are ground and 5v for power.</p> <p>Did you know you can power the esp32 from the 5v and gnd pin? That means you can connect an external power supply and power it without the side USB port being used! This also allows for more power to be given to your LEDs!</p> <p>We cannot use the IO ports 0,1,18, or 19 for LEDs but you can use ports 0 and 1 for i2c sensors.</p> <p>Connecting the GPIO Header to the MSR-2</p> <p>The first thing we will do is remove our MSR-2 back plate and connect our GPIO Header to our MSR-2 and then put the new GPIO back plate on (blue).</p> <p>Step 1. Remove the backplate of the MSR-2</p> <p> </p> <p>Step 2. Line up the Xs shown on the msr-2 and the GPIO Header. They should both be facing in the same direction as shown below.</p> <p></p> <p>Step 3. Gently push down onto the GPIO Header as shown below:</p> <p></p> <p>Step 4. Confirm the GPIO Header is seated properly as shown below.</p> <p></p> <p>Step 5. Slide the GPIO Header back plate for the MSR-2 over your sensor and gently push down until it clicks into place.</p> <p></p> <p>If the back plate does not gently go onto the sensor please investigate and confirm it is in the right orientation.</p> <p>Connecting DuPont pins to proper GPIO ports Now we need to reference the GPIO pinout we looked at above and then connect three wires. You will need three male-to-male DuPont wires included in your kit. I suggest using red for power aka 5v, White for ground aka GND, and green for data aka port IO7. Most LED strips will also have this same color scheme and it's easier to match like colors together.</p> <p></p> <p></p> <p></p> <p>You can add a bit of hot glue to the Dupont wires to hold them together. DO NOT put hot glue into the GPIO Header's female pins that will ruin the addon. I am only suggesting that you can hot-glue the Dupont pins outer shell themselves together to stiffen them up.</p> <p></p> <p>Connecting DuPont pins to LED Strip</p> <p>Next, we need to connect the other side of the Dupont pins to the LED strip. Most likely your LED strip will have a JST-SM connector which is a 3amp max connector with three wires connected: red for 5v, green for data, and white for gnd. We will be matching up our red, green, and white wires already attached to the GPIO add-on pins in the MSR-2 (using IO7 as the data pin for this tutorial)</p> <p> </p> <p>Make sure to connect to the correct side of the LED strip. The led strip will have an arrow going down the led strip showing one direction for the data line. you want the data channel going FROM the msr-2 TO the led strip going in a \"forward\" direction as shown below.</p> <p> </p> <p>Edit the YAML of your MSR-2 to let it know about your new LED strip</p> <p>Finally, we need to tell the MSR-2 that we connected an LED strip. We need to tell it how many LEDs we have and we need to tell it that it's our second LED since the built-in LED is the first. This tutorial assumes you are comfortable with the ESPHome dashboard.</p> <p>Step 1. Open ESPhome Dashboard and click edit to bring up the yaml your sensor is currently using.</p> <p></p> <p>You will see some YAML code here and you do NOT want to touch anything above line 20. If you need to, click your cursor at the end of wifi_password and hit enter to create a new line then make sure you backspace until you are \"flush\" with the line numbers like how wifi: is.</p> <p>Step 2. Copy the code below and paste it to line 20 in your ESPHome yaml for this device.</p> <pre><code>light:\n  - platform: esp32_rmt_led_strip\n    id: bed_led\n    name: \"Bed LED\"\n    pin: GPIO7\n    rmt_channel: 1\n    default_transition_length: 0s\n    chipset: WS2812\n    num_leds: 60\n    rgb_order: grb\n    effects:\n      - pulse:\n          name: \"Slow Pulse\"\n          transition_length: 1000ms\n          update_interval: 1000ms\n          min_brightness: 50%\n          max_brightness: 100%\n      - pulse:\n          name: \"Fast Pulse\"\n          transition_length: 100ms\n          update_interval: 100ms\n          min_brightness: 50%\n          max_brightness: 100%\n      - addressable_rainbow:\n</code></pre> <p>This is where you can change your number of LEDs as well as the GPIO pin used for the LED data! Make sure to check out https://esphome.io/components/light/index.html#light-effects for all the effects supported such as addressable scan effect!Step 3. Confirm you do not have any red lines showing errors in your code You change the rmt_channel to 1 because 0 is being used by the built-in LED of the MSR-2. Step 4. Hit save and then install in the top right. It should have a popup where you select \"wirelessly\" then it will begin compiling the firmware and finally installing the compiled firmware to your MSR-2.Step 5. Go into home assistant and confirm you now have a new light entity called Bed LED</p> <p></p> <p>Step 6. Click on the name \"Bed LED\" circled and it will pop up a color picker. You can then choose the color wheel option to pick any color of the rainbow, or select \"effect\" and choose an effect.</p> <p> </p> <p></p> <p>That's all folks! Thanks to Smart Home Sellout for putting this tutorial together!</p>"},{"location":"products/msr2/examples/msr-2-%2B-alarmo-home-security-install/","title":"MSR-2 + Alarmo Home Security Install","text":"<p>My grandmother wanted a security system that would alert her when there was movement in her home after she had gone to bed. So, I set up three of our Apollo Automation mmWave sensors. These devices, plus the Alarmo add-on, quickly and easily allowed me to install a fully local, private, cloud-free, and no monthly subscription security system. She can arm/disarm it with one button on her Home Assistant dashboard, and it makes her feel much safer. This guide assumes you already have a motion/presence sensor installed on HA.</p> <p>1. Install HACS 2. Install Alarmo and the Alarmo Card (Pretty Arm and Disarm card for your HA dashboard)  </p> <p> </p> <p> </p> <p>3. Find Alarmo on the left, select the Sensors tab, and toggle on the sensor entities that you would like to use for your alarm system.  </p> <p> </p> <p>4. Now select the Actions tab and under Condition &gt; Event &gt; Select \"Alarm is triggered\". You can also select the device you would like to receive a notification on under Task &gt; Target &gt; Select Device (Phone, tablet, etc.)  </p> <p> </p> <p>5. You can change the Title, Message, and Name of the alarm notification.  </p> <p> </p> <p>6. After saving that action we can add another one that will turn on our sensor lights and/or make the onboard piezo buzzers play an alarm sound. Uner Entity select your sensors RGB light.  </p> <p> </p> <p>7. Under Action select Turn On and now your sensors RGB lights will turn on when the alarm is triggered.  </p> <p> </p> <p>8. And that's it, seriously... Now you can enjoy a free and local security system.  </p> <p>We hope this was helpful and please let us know if there are any questions!</p>"},{"location":"products/msr2/examples/msr-2-automation-guide/","title":"MSR-2 Automation Guide","text":""},{"location":"products/msr2/examples/msr-2-examples-from-github/","title":"MSR-2 Examples From GitHub","text":""},{"location":"products/msr2/examples/msr-2-examples-from-github/#msr-2-examples-from-github_1","title":"MSR-2 Examples from GitHub","text":""},{"location":"products/msr2/examples/msr-2-home-assistant-dashboard-examples/","title":"MSR-2 Home Assistant Dashboard Examples","text":"<p>Radar Scatter Plot With Apex Charts For MSR-2</p> <p></p> <pre><code>type: custom:apexcharts-card\nheader:\n  show: true\n  title: MSR-1 Radar Distance\n  show_states: true\n  colorize_states: true\napex_config:\n  legend:\n    position: top\n    horizontalAlign: center\n    offsetX: -80\n    offsetY: 0\nexperimental:\n  brush: true\nbrush:\n  selection_span: 4h\ngraph_span: 24hr\nchart_type: scatter\nseries:\n  - entity: sensor.apollo_msr_1_a79e14_radar_detection_distance\n    name: Detection\n    stroke_width: 1\n    color: green\n    show:\n      in_brush: true\n      extremas: true\n  - entity: sensor.apollo_msr_1_a79e14_radar_moving_distance\n    name: Moving\n    stroke_width: 1\n  - entity: sensor.apollo_msr_1_a79e14_radar_still_distance\n    name: Still\n    stroke_width: 1\n</code></pre> <p>CO2 Charts Home Assistant Sensor</p> <p></p> <pre><code>graph: line\ntype: sensor\nentity: sensor.apollo_msr_1_a79e38_co2\ndetail: 2\nname: Bedroom CO2\nhours_to_show: 24\n</code></pre> <p>Custom: Plotly Graph Card</p> <p></p> <pre><code>type: custom:plotly-graph\nentities:\n  - entity: sensor.apollo_msr_1_a79e38_co2\nhours_to_show: 24\nrefresh_interval: 10\ntitle: Bedroom CO2\n</code></pre> <p>Home Assistant Guage</p> <p></p> <pre><code>type: gauge\nentity: sensor.apollo_msr_1_a79e38_co2\nneedle: true\nunit: ppm\nmin: 0\nmax: 3000\nseverity:\n  green: 0\n  yellow: 1000\n  red: 2000\n</code></pre>"},{"location":"products/msr2/examples/using-msr-2-buzzer/","title":"Using MSR-2 Buzzer","text":"<p>This guide will walk you through using the buzzer on your MSR-2. You can also use the \"action\" in an automation in Home Assistant.</p> <ol> <li>Open Home Assistant and navigate to developer tools in the bottom left</li> </ol> <p></p> <p>2. Click on services</p> <p>3. Choose your MSR-2's buzzer (You can type in buzzer to find it easier)</p> <p>4. Put a rtttl tone into the the string box</p> <ul> <li> <ul> <li>Mario: <code>smb:d=4,o=5,b=100:16e6,16e6,32p,8e6,16c6,8e6,8g6,8p,8g,8p,8c6,16p,8g,16p,8e,16p,8a,8b,16a#,8a,16g.,16e6,16g6,8a6,16f6,8g6,8e6,16c6,16d6,8b,16p,8c6,16p,8g,16p,8e,16p,8a,8b,16a#,8a,16g.,16e6,16g6,8a6,16f6,8g6,8e6,16c6,16d6,8b,8p,16g6,16f#6,16f6,16d#6,16p,16e6,16p,16g#,16a,16c6,16p,16a,16c6,16d6,8p,16g6,16f#6,16f6,16d#6,16p,16e6,16p,16c7,16p,16c7,16c7,p,16g6,16f#6,16f6,16d#6,16p,16e6,16p,16g#,16a,16c6,16p,16a,16c6,16d6,8p,16d#6,8p,16d6,8p,16c6</code></li> <li>Cantina: <code>Cantina:d=4,o=5,b=250:8a,8p,8d6,8p,8a,8p,8d6,8p,8a,8d6,8p,8a,8p,8g#,a,8a,8g#,8a,g,8f#,8g,8f#,f.,8d.,16p,p.,8a,8p,8d6,8p,8a,8p,8d6,8p,8a,8d6,8p,8a,8p,8g#,8a,8p,8g,8p,g.,8f#,8g,8p,8c6,a#,a,g</code></li> <li>Star Wars Imperial Death March: <code>StarWars/Imp:d=4,o=5,b=112:8d.,16p,8d.,16p,8d.,16p,8a#4,16p,16f,8d.,16p,8a#4,16p,16f,d.,8p,8a.,16p,8a.,16p,8a.,16p,8a#,16p,16f,8c#.,16p,8a#4,16p,16f,d.,8p,8d.6,16p,8d,16p,16d,8d6,8p,8c#6,16p,16c6,16b,16a#,8b,8p,16d#,16p,8g#,8p,8g,16p,16f#,16f,16e,8f,8p,16a#4,16p,2c#</code></li> <li>Huge list: https://picaxe.com/rtttl-ringtones-for-tune-command/</li> <li>This is a good site to test rttl tones: https://adamonsoon.github.io/rtttl-play/</li> </ul> </li> </ul> <p>5. Click on the ACTIONS button in bottom right</p> <p></p>"},{"location":"products/msr2/msr-2-reviews/home-tech-innovations-msr-2-review/","title":"Home Tech Innovations MSR-2 Review","text":""},{"location":"products/msr2/msr-2-reviews/home-tech-innovations-msr-2-review/#setup-msr-2-in-3-easy-steps","title":"Setup MSR-2 in 3 EASY Steps!","text":""},{"location":"products/msr2/msr-2-reviews/michael-leen-msr-2-review/","title":"Michael Leen MSR-2 Review","text":""},{"location":"products/msr2/msr-2-reviews/michael-leen-msr-2-review/#donatmt-be-fooled-by-its-size-apollo-msr-2-mmwave-multisensor","title":"Don\u00e2\u20ac\u2122t Be Fooled By Its Size: Apollo MSR-2 mmWave Multisensor","text":""},{"location":"products/msr2/msr-2-reviews/mostlychris-msr-2-review/","title":"MostlyChris MSR-2 Review","text":""},{"location":"products/msr2/msr-2-reviews/mostlychris-msr-2-review/#even-smaller-presence-sensor-for-home-assistant","title":"Even SMALLER Presence Sensor for Home Assistant!","text":""},{"location":"products/msr2/msr-2-reviews/simon-says-home-assistant-msr-2-review/","title":"Simon Says Home Assistant MSR-2 Review","text":""},{"location":"products/msr2/msr-2-reviews/simon-says-home-assistant-msr-2-review/#the-apollo-msr2-presence-sensor-is-now-even-smaller","title":"The Apollo MSR2 Presence Sensor is now even smaller!","text":""},{"location":"products/msr2/msr-2-reviews/smart-home-australia-msr-2-review/","title":"Smart Home Australia MSR-2 Review","text":""},{"location":"products/msr2/msr-2-reviews/smart-home-australia-msr-2-review/#apollo-msr2-radar-motion-sensor-small-just-got-tiny","title":"Apollo MSR2 Radar Motion Sensor - Small just got tiny !!","text":""},{"location":"products/msr2/msr-2-reviews/smart-home-scene-msr-2-review/","title":"Smart Home Scene MSR-2 Review","text":""},{"location":"products/msr2/msr-2-reviews/smart-home-scene-msr-2-review/#apollo-msr-2-review-the-smallest-presence-sensor-ever-made","title":"Apollo MSR-2 Review: The Smallest Presence Sensor Ever Made","text":""},{"location":"products/msr2/setup/general-tips/","title":"General Tips","text":""},{"location":"products/msr2/setup/general-tips/#_1","title":"****","text":""},{"location":"products/msr2/setup/general-tips/#msr-2","title":"**MSR-2","text":"<p>** </p>"},{"location":"products/msr2/setup/general-tips/#light-sensor-ltr-390uv","title":"Light Sensor (LTR-390UV)","text":"<ul> <li> <p>When mounting the MSR-2 be sure to position the device so that the two large holes are not covered  </p> <ul> <li>This allows more light to enter and will ensure better accuracy</li> <li>The onboard RGB LED will trigger the light sensor </li> <li>Be cognizant of this when making automations based on light/LUX</li> </ul> </li> </ul>"},{"location":"products/msr2/setup/general-tips/#mounting","title":"Mounting","text":""},{"location":"products/msr2/setup/general-tips/#gate-and-fov-visualization","title":"Gate and FOV Visualization","text":"<ul> <li>FOV angle -60 to 60</li> <li>Gate images above are using a Radar Distance Resolution of 0.75m</li> <li> </li> <li> </li> </ul>"},{"location":"products/msr2/setup/general-tips/#gates-are-pre-defined-by-the-radar-module-and-are-in-meters-m","title":"Gates are pre-defined by the radar module and are in meters (m)","text":""},{"location":"products/msr2/setup/general-tips/#zones-are-user-configurable-and-are-in-centimeters-cm","title":"Zones are user-configurable and are in centimeters (cm)","text":""},{"location":"products/msr2/setup/general-tips/#increased-esp-temperature","title":"Increased ESP Temperature","text":"<p>If you are experiencing higher than normal ESP temperatures ~140+ degrees F then changing the wifi power save mode option might help decrease the temperature. Here is the link to the ESPHome WiFi Component Power Save Mode.  </p> <p>Power Save Mode The WiFi interface of all ESPs offer three power save modes to reduce the amount of power spent on WiFi. While some options can reduce the power usage of the ESP, they generally also decrease the reliability of the WiFi connection, with frequent disconnections from the router in the highest power saving mode.  </p> <p>NONE (least power saving, Default for ESP8266) LIGHT (Default for ESP32) HIGH (most power saving)</p> <pre><code>wifi:\n  # ...\n  power_save_mode: none\n</code></pre> <p>The code above can be added to the devices .yaml through the ESPHome addon edit button.  </p> <p>(Thank you for the suggestion, Brian!) (Referenced from ESPHome website)</p>"},{"location":"products/msr2/setup/how-to-change-the-update-frequency-of-sensors/","title":"How To Change The Update Frequency Of Sensors","text":""},{"location":"products/msr2/setup/how-to-change-the-update-frequency-of-sensors/#how-to-change-the-update-frequency-of-sensors_1","title":"How To Change The Update Frequency Of Sensors","text":""},{"location":"products/msr2/setup/sensor-definitions/","title":"Sensor Definitions","text":"<p>Once added to Home Assistant you can configure different settings for your sensor. Below is what each setting does.</p>"},{"location":"products/msr2/setup/sensor-definitions/#controls","title":"Controls","text":"<ul> <li>RGB Light<ul> <li>A RGB Neopixel. Click on the light bulb to change the color. Click on the toggle to turn on or off</li> </ul> </li> </ul>"},{"location":"products/msr2/setup/sensor-definitions/#sensors","title":"Sensors","text":"<ul> <li>CO2<ul> <li>True CO2 reading from the SCD40. This will be Unknown if you do not have the CO2 module. This can be calibrated following this guide but does come precalibrated: Here</li> </ul> </li> <li>ESP Temperature<ul> <li>This is the temperature of the internal ESP chip. Think of it like your measured CPU temp on your PC</li> </ul> </li> <li>LTR390 Light<ul> <li>Light level measured in lux by LTR390</li> </ul> </li> <li>LTR390 UV Index<ul> <li>UV index measured by LTR390</li> </ul> </li> <li>Radar Detection Distance<ul> <li>The last detected distance by the radar. This will stay at the last known value so sometimes can be misleading</li> </ul> </li> <li>Radar Move Energy<ul> <li>The amount of movement measured by the LD2410B. Faster movements have higher %</li> </ul> </li> <li>Radar Moving Target<ul> <li>Does the radar have a moving target it is tracking</li> </ul> </li> <li>Radar Still Distance<ul> <li>The last measured distance of a still target. It will hold the last value so sometimes can be misleading</li> </ul> </li> <li>Radar Still Energy<ul> <li>The energy of the current still target</li> </ul> </li> <li>Radar Still Target<ul> <li>Does the radar have a still target</li> </ul> </li> <li>Radar Target<ul> <li>Does the radar have a still or moving target. Good for triggering automation.</li> </ul> </li> <li>Radar Zone 1 Occupancy<ul> <li>This is a configurable zone. Think of zones like distances from the radar unit. Zone 1 might be from 0 cm to 120 cm from the sensor. This is telling you if there is someone in that zone. The zones can be defined in the configuration section with \u201cRadar End Zone 1\u201d</li> </ul> </li> <li>Radar Zone 2 Occupancy<ul> <li>Same as zone 1 but just the second zone from the sensor</li> </ul> </li> <li>Radar Zone 3 Occupancy<ul> <li>Same as zone 1 &amp; 2 but with the third zone.</li> </ul> </li> </ul>"},{"location":"products/msr2/setup/sensor-definitions/#configuration","title":"Configuration","text":"<ul> <li>CO2 Calibration Number<ul> <li>See calibrating CO2: Here</li> </ul> </li> <li>ESP Reboot<ul> <li>Performs a restart of the sensor</li> </ul> </li> <li>Factory Reset Radar<ul> <li>Sets the radar's move thresholds back to their original values from the manufacturer</li> </ul> </li> <li>g0-g8 Move &amp; Still Threshold<ul> <li>Please refer to the radar tuning guide: Here</li> </ul> </li> <li>Radar Control Bluetooth<ul> <li>This allows you to turn on the LD2410's Bluetooth. This allows you to connect to the HLK Radar phone app if you wanted to upload new firmware to the radar unit (Not the MSR-1 in general, just the radar chip)</li> </ul> </li> <li>Radar Distance Resolution<ul> <li>Best to keep on 0.75m in many cases. If you change it to 0.25m the first few gates become very very sensitive and the maximum detection distance shrinks a lot.</li> </ul> </li> <li>Radar Zone 1 Start<ul> <li>This sets the starting distance for Zone 1 in cm. This is the distance from the sensor to the start of Zone 1</li> </ul> </li> <li>Radar End Zone 1<ul> <li>This defines \u201cZone 1\u201d of the radar. It is a distance from the sensor that specifies what \u201cZone 1\u201d is. It connects to the \u201cRadar Zone 1 Occupancy\u201d sensor. So if this number is set to \u201c10\u201d that means from 0 to 10 centimeters from the sensor is zone 1.</li> </ul> </li> <li>Radar End Zone 2<ul> <li>Same as Zone 1. This defines where zone 2 ends</li> </ul> </li> <li>Radar End Zone 3<ul> <li>Like Zone 2, this defines where zone 3 ends</li> </ul> </li> <li>Radar Max Move Distance<ul> <li>Maximum distance gate for movement detection. Value between 2 and 8 inclusive</li> <li>Useful in a bathroom or other scenario where you want to avoid detection after a certain gate count.</li> <li>Useful for triggering on \"radar target\" instead of triggering on zone 1/2/3 occupancy instead.</li> </ul> </li> <li>Radar Max Still Distance<ul> <li>Maximum distance gate for still detection. Value between 2 and 8 inclusive. Defaults to 8.</li> <li>Useful in a bathroom or other scenario where you want to avoid detection after a certain gate count.</li> <li>Useful for triggering on \"radar target\" instead of triggering on zone 1/2/3 occupancy instead.</li> </ul> </li> <li>Radar Timeout<ul> <li>The time in seconds that the radar's presence will stay high after the target is lost.</li> </ul> </li> </ul>"},{"location":"products/msr2/troubleshooting/manually-uploading-code-through-esphome/","title":"Manually Uploading Code Through ESPHome","text":"<p>If your device becomes unresponsive and you've exhausted the other troubleshooting methods you can upload a fresh set of firmware by following the below guide. The utility does need to be run from Chrome or Edge.</p> <p>If your device has already been connected to Home Assistant previously please refer to Removing Device From Home Assistant first before proceeding</p> <ol> <li>Plug your MSR-2 into your computer with a quality USBC cable that supports data transfer</li> <li> <p>Navigate to our installer page and click connect ** Install Page **</p> </li> <li> <p>Select your Apollo device, it will show with a similar name to the one below, and click connect. If you aren't sure which device it is, you can unplug the MSR-2 and see which disappears.</p> </li> </ol> <p></p> <p>If no device shows, click cancel and then install the recommended driver that shows on the popup. If you have installed the driver, tried different cables, and it still won't work refer here for putting the MSR-2 in bootloader mode and then retry step 3. Putting MSR-2 In Boot Mode Document</p> <ol> <li>Choose to install the new firmware</li> </ol> <p></p> <ol> <li>Wait for the installer to finish</li> </ol> <p></p> <ol> <li> <p>After finishing, check for the Apollo hotspot and connect. This might not show if you previously had the MSR-2 connected to your wifi</p> </li> <li> <p>Log into Home Assistant and go to the ESPHome addon check to see if you can adopt the device.</p> </li> </ol> <p>If you encounter the below error, please complete the Putting MSR-2 In Boot Mode Document and go back to step 3.</p> <p></p>"},{"location":"products/msr2/troubleshooting/putting-the-msr-2-in-boot-mode/","title":"Putting The MSR-2 In Boot Mode","text":"<p>This will cover how to put the MSR-2 into boot mode. Sometimes, this is needed to upload new firmware if the device is struggling.  </p> <p>Boot Button Only</p> <ol> <li>Please look at the photo below to help access the boot button through the top of the case</li> <li>Use a pin to press and hold the boot button, while holding the boot button plug it into your computer/power and then release the boot button</li> </ol> <p>  4. Continue with uploading the firmware document </p> <p>Boot and Reset Buttons</p> <ol> <li>Unplug the device</li> <li>Slide the back of the case off</li> <li>Remove the device from the case</li> <li>Plug it back into your computer</li> <li>Press and hold the boot button, while holding it press and release the reset button, then release the boot button</li> <li>Continue with uploading the firmware document</li> </ol> <p></p>"},{"location":"products/msr2/troubleshooting/teardown-and-reassembly-of-the-msr-2/","title":"Teardown and Reassembly of the MSR-2","text":"<p>This will cover how to take apart and reassemble the MSR-2 device. This is useful if you are replacing components or to inspect if the mmwave sensor (LD2410B) is seated properly. Sometimes during shipping, this can become loose and cause issues with the accuracy of the sensor.</p> <p>https://www.youtube.com/watch?v=hkNrhJuMmxI</p>"},{"location":"products/mtr1/calibrating-co2/","title":"CO2 Calibration - The Quick method - Desktop Only not mobile","text":""},{"location":"products/mtr1/calibrating-co2/#this-article-will-guide-you-through-a-simple-calibration-of-your-co2-sensor-for-any-apollo-automation-device","title":"This article will guide you through a simple calibration of your CO2 sensor for any Apollo Automation device!","text":"<ol> <li>Go to your home assistant dashboard and hit the letter \"e\" - It will pop up with an entity filter and here we will type in \"Calibrate CO2\" and select the correct device. *HINT* If you cannot get this menu to pop-up, click somewhere on the home assistant dashboard then press your \"e\" key **HINT** </li> <li>DO NOT RUSH THIS  Go Plug your sensor in outside and let it sit for 5 minutes or more to get normalized readings DO NOT RUSH THIS</li> <li> <p>Click on the button that says \"PRESS\" and then you are done. </p> <ol> <li>Go get your sensor from outside and plug your sensor in wherever you want it!</li> </ol> </li> </ol>"},{"location":"products/mtr1/faq/","title":"FAQ","text":"<p>1. What sensors are included in the MTR-1?</p> <p>\u2022   The MTR-1 includes a multi-target mmWave radar sensor for detecting motion and positioning, as well as LUX, UV, temperature, and pressure sensors. There\u2019s also an optional CO2 sensor available.</p> <p>2. How does the mmWave radar sensor work?</p> <p>\u2022   The MTR-1\u2019s mmWave radar sensor tracks movement by emitting radar waves and detecting changes in reflected signals. This sensor can detect multiple targets and their locations within a room, offering more precise tracking than traditional motion sensors. It can even detect through light walls.</p> <p>3. How many targets can the MTR-1 track?</p> <p>\u2022   The MTR-1 can track up to three targets simultaneously, allowing it to monitor multiple people in a room and provide their positions within defined zones.</p> <p>4. What is the maximum detection range of the mmWave radar?</p> <p>\u2022   The mmWave radar sensor in the MTR-1 has a maximum detection range of 6 meters (about 19.6 feet), making it ideal for monitoring large rooms or spaces.</p> <p>5. Can the MTR-1 be used to track the exact location of people in a room?</p> <p>\u2022   Yes, the MTR-1 can detect people\u2019s positions within zones, such as distinguishing if someone is near a door, on the couch, or standing by the kitchen counter. This enables precise automation based on a person\u2019s location within the room.</p> <p>6. What is the benefit of the LUX and UV sensor?</p> <p>\u2022   The LUX sensor measures the ambient light in the room, while the UV sensor tracks ultraviolet light exposure. This data can be used for automations like adjusting lighting levels, or providing alerts when sunlight is strong.</p> <p>7. How does the optional CO2 sensor work?</p> <p>\u2022   The optional CO2 sensor measures the concentration of carbon dioxide in the air, which is important for monitoring air quality in enclosed spaces. High CO2 levels can lead to poor sleep, drowsiness, and other health issues, and the sensor can trigger automations to turn on fans or open windows.</p> <p>8. What are some common use cases for the MTR-1?</p> <p>\u2022   The MTR-1 can be used to automate lights based on people\u2019s presence in a room, trigger alarms or notifications when someone enters a space, and adjust HVAC settings based on CO2 levels. Its precise tracking capabilities also make it great for monitoring multiple zones within a room, such as distinguishing when someone is at the stove versus the sink.</p> <p>9. How do I connect the MTR-1 to Home Assistant?</p> <p>\u2022   The MTR-1 connects to Home Assistant through ESPHome using WiFi. Once connected, you can access data from all the sensors and create automations based on the sensor readings.</p> <p>10. What kind of automations can I set up with the MTR-1?</p> <p>\u2022   You can create automations for turning lights on/off based on motion, adjusting air filtration when CO2 levels rise, and sending notifications when specific zones (like doorways) detect movement. The multi-target tracking allows for even more advanced automations, such as adjusting lights depending on where people are in the room.</p> <p>11. How do I adjust the sensitivity of the motion detection?</p> <p>\u2022   Sensitivity can be adjusted via the ESPHome configuration. This allows you to fine-tune the radar to avoid false positives or to increase sensitivity for very precise detection.</p> <p>12. Can the MTR-1 detect motion through walls?</p> <p>\u2022   Yes, the mmWave radar in the MTR-1 can detect movement through certain materials, such as light walls or thin furniture, though you may need to adjust the sensitivity to prevent false positives from nearby rooms.</p> <p>13. Can the MTR-1 be used outdoors?</p> <p>\u2022   While the MTR-1 is primarily designed for indoor use, with proper weatherproofing and environmental protection, it could be used in sheltered outdoor environments. Be cautious of exposure to moisture or extreme weather.</p> <p>14. Does the MTR-1 work with other smart home platforms?</p> <p>\u2022   The MTR-1 is designed to work seamlessly with Home Assistant via ESPHome. While it could potentially be integrated into other smart home platforms through custom configurations, its primary use case is for Home Assistant.</p> <p>15. How does the temperature and pressure sensor work?</p> <p>\u2022   The temperature and pressure sensor provides accurate measurements for air temperature and barometric pressure. This data can be used in automations, such as controlling heating/cooling systems or monitoring environmental conditions.</p> <p>16. How is the MTR-1 powered?</p> <p>\u2022   The MTR-1 is powered through a USB-C connection and can be plugged into a standard wall outlet using a 5V adapter.</p> <p>17. What is the purpose of the RGB LED and piezo buzzer?</p> <p>\u2022   The RGB LED can display different colors for various events or alerts, such as turning red when air quality is poor or green for general notifications. The piezo buzzer can be used for sound alerts, such as a beep when motion is detected or a CO2 level warning.</p> <p>18. Can I customize the MTR-1\u2019s features?</p> <p>\u2022   Yes, the MTR-1 is fully customizable through ESPHome. You can modify sensor settings, change reporting intervals, adjust sensitivity, and create custom automations based on the sensor readings.</p> <p>19. What is the reporting frequency of the MTR-1\u2019s sensors?</p> <p>\u2022   The reporting frequency for each sensor can be adjusted through the ESPHome YAML configuration. You can choose to report data as frequently as every second or extend the intervals to reduce power consumption.</p> <p>20. Can I use multiple MTR-1 sensors in my smart home setup?</p> <p>\u2022   Yes, you can integrate multiple MTR-1 sensors into your Home Assistant system. Each will show up as a separate entity, allowing you to monitor multiple rooms or areas in your home simultaneously.</p> <p>21. What\u2019s the difference between the MTR-1 and MSR-2?</p> <p>\u2022   The MTR-1 features multi-target radar tracking, allowing it to detect multiple people in a room and track their positions. The MSR-2, on the other hand, is designed more for single-target detection and has a slightly different sensor set, though both sensors offer robust environmental monitoring capabilities.</p> <p>22. What accessories are available for the MTR-1?</p> <p>\u2022   Accessories for the MTR-1 include mounting brackets, stands, and a variety of expansion options, like additional sensor modules. These allow for greater flexibility in where and how you use the sensor.</p> <p>23. What are the primary advantages of the MTR-1 over other motion sensors?</p> <p>\u2022   The MTR-1\u2019s mmWave radar is significantly more advanced than traditional PIR (Passive Infrared) motion sensors. It can detect subtle movements, track multiple targets, and monitor precise locations within a room, making it ideal for sophisticated home automations. Its additional sensors (LUX, UV, temperature, pressure, optional CO2) also provide greater environmental awareness.</p> <p>24. How do I install the MTR-1?</p> <p>\u2022   Installation is simple. The MTR-1 is powered via USB-C and connects to your WiFi. From there, you configure it through ESPHome and integrate it into your Home Assistant setup. Detailed instructions are available on our documentation wiki, and we offer support via our Discord community.</p> <p>25. How secure is the MTR-1?</p> <p>\u2022   The MTR-1 operates entirely on your local network, using ESPHome, which means no data is sent to external servers. This ensures that your home automation data remains private and secure.</p> <p>26. Does the MTR-1 require cloud connectivity?</p> <p>\u2022   No, the MTR-1 works entirely within your local network through Home Assistant and ESPHome. You don\u2019t need cloud access or a subscription to use the sensor.</p> <p>27. How do I update the firmware on the MTR-1?</p> <p>\u2022   Firmware updates for the MTR-1 can be done directly through ESPHome. When updates are available, you can install them wirelessly over-the-air (OTA), making it simple to keep the sensor up to date.</p> <p>28. What is the warranty on the MTR-1?</p> <p>\u2022   The MTR-1 comes with a one-year warranty. If you encounter any issues, we provide comprehensive support via email, Discord, or our website to ensure you\u2019re fully satisfied with the product.</p> <p>29. How long does it take to set up the MTR-1?</p> <p>\u2022   Setup is quick and easy. Most users report being able to configure and integrate the MTR-1 into their Home Assistant setup within 10-15 minutes.</p> <p>30. What\u2019s in the box?</p> <p>\u2022   Each MTR-1 package includes the assembled board, case, support stand, and a link to documentation, open-source code, and CAD models. Additionally, you\u2019ll receive an Apollo Automation sticker.</p>"},{"location":"products/mtr1/introduction/","title":"Introduction","text":"<p>The Apollo MTR-1 is a compact, affordable multi-target radar multisensor designed for Home Assistant via ESPHome. It features a range of sensors, including mmWave radar, LUX/UV, and an optional CO2 sensor, all in a 49mm x 32mm design. With multi-target and multi-zone tracking, the MTR-1 can detect not only when someone enters a room but also where they are. It integrates with Home Assistant using WiFi and offers features like RGB notifications, a piezo buzzer for alerts, and Bluetooth tracking. Open-source software and CAD files are available for customization, and the Apollo team provides full support through Discord and GitHub.</p>"},{"location":"products/mtr1/Examples/how-to-use-the-apollo-gpio-header-to-control-an-led-strip/","title":"How To Use The Apollo GPIO Header To Control An LED Strip","text":"<p>This tutorial will guide you through setting up one of our MSR-2 devices (works with any mezzanine port on any Apollo Device) with the optional $4.99 GPIO Header which adds pins for you to easily add functionality to your device! In this tutorial, however, we will be focusing on adding an LED strip to your Apollo device.</p> <p>Materials Needed for tutorial:</p> <ul> <li>Apollo MSR-2, Apollo MTR-1, and all other future Apollo Automation products with the mezzanine port.</li> <li>Apollo GPIO Header</li> <li>ws2812b aka neopixel RGB led strip or similar. sk6812 RGBW strip will also work.</li> <li>Optional DuPont Cables for GPIO Header but any DuPont cables will do.</li> <li>USB-C cable and power brick to power MSR-2</li> </ul> <p>You are limited to 300mA of power output from the 5v port. You can either attach an external power supply and power the MSR-2 via 5v and gnd pins or work with the limited power output of the port</p> <p></p> <p>Above is an image of the GPIO Header and its pinouts. We can use ports 2,4,6,7 for our data channel to an LED strip or multiple LED strips. We will also use the top two ports which are ground and 5v for power.</p> <p>Did you know you can power the esp32 from the 5v and gnd pin? That means you can connect an external power supply and power it without the side USB port being used! This also allows for more power to be given to your LEDs!</p> <p>We cannot use the IO ports 0,1,18, or 19 for LEDs but you can use ports 0 and 1 for i2c sensors.</p> <p>Connecting the GPIO Header to the MSR-2</p> <p>The first thing we will do is remove our MSR-2 back plate and connect our GPIO Header to our MSR-2 and then put the new GPIO back plate on (blue).</p> <p>Step 1. Remove the backplate of the MSR-2</p> <p> </p> <p>Step 2. Line up the Xs shown on the msr-2 and the GPIO Header. They should both be facing in the same direction as shown below.</p> <p></p> <p>Step 3. Gently push down onto the GPIO Header as shown below:</p> <p></p> <p>Step 4. Confirm the GPIO Header is seated properly as shown below.</p> <p></p> <p>Step 5. Slide the GPIO Header back plate for the MSR-2 over your sensor and gently push down until it clicks into place.</p> <p></p> <p>If the back plate does not gently go onto the sensor please investigate and confirm it is in the right orientation.</p> <p>Connecting DuPont pins to proper GPIO ports Now we need to reference the GPIO pinout we looked at above and then connect three wires. You will need three male-to-male DuPont wires included in your kit. I suggest using red for power aka 5v, White for ground aka GND, and green for data aka port IO7. Most LED strips will also have this same color scheme and it's easier to match like colors together.</p> <p></p> <p></p> <p></p> <p>You can add a bit of hot glue to the Dupont wires to hold them together. DO NOT put hot glue into the GPIO Header's female pins that will ruin the addon. I am only suggesting that you can hot-glue the Dupont pins outer shell themselves together to stiffen them up.</p> <p></p> <p>Connecting DuPont pins to LED Strip</p> <p>Next, we need to connect the other side of the Dupont pins to the LED strip. Most likely your LED strip will have a JST-SM connector which is a 3amp max connector with three wires connected: red for 5v, green for data, and white for gnd. We will be matching up our red, green, and white wires already attached to the GPIO add-on pins in the MSR-2 (using IO7 as the data pin for this tutorial)</p> <p> </p> <p>Make sure to connect to the correct side of the LED strip. The led strip will have an arrow going down the led strip showing one direction for the data line. you want the data channel going FROM the msr-2 TO the led strip going in a \"forward\" direction as shown below.</p> <p> </p> <p>Edit the YAML of your MSR-2 to let it know about your new LED strip</p> <p>Finally, we need to tell the MSR-2 that we connected an LED strip. We need to tell it how many LEDs we have and we need to tell it that it's our second LED since the built-in LED is the first. This tutorial assumes you are comfortable with the ESPHome dashboard.</p> <p>Step 1. Open ESPhome Dashboard and click edit to bring up the yaml your sensor is currently using.</p> <p></p> <p>You will see some YAML code here and you do NOT want to touch anything above line 20. If you need to, click your cursor at the end of wifi_password and hit enter to create a new line then make sure you backspace until you are \"flush\" with the line numbers like how wifi: is.</p> <p>Step 2. Copy the code below and paste it to line 20 in your ESPHome yaml for this device.</p> <pre><code>light:\n  - platform: esp32_rmt_led_strip\n    id: bed_led\n    name: \"Bed LED\"\n    pin: GPIO7\n    rmt_channel: 1\n    default_transition_length: 0s\n    chipset: WS2812\n    num_leds: 60\n    rgb_order: grb\n    effects:\n      - pulse:\n          name: \"Slow Pulse\"\n          transition_length: 1000ms\n          update_interval: 1000ms\n          min_brightness: 50%\n          max_brightness: 100%\n      - pulse:\n          name: \"Fast Pulse\"\n          transition_length: 100ms\n          update_interval: 100ms\n          min_brightness: 50%\n          max_brightness: 100%\n      - addressable_rainbow:\n</code></pre> <p>This is where you can change your number of LEDs as well as the GPIO pin used for the LED data! Make sure to check out https://esphome.io/components/light/index.html#light-effects for all the effects supported such as addressable scan effect!Step 3. Confirm you do not have any red lines showing errors in your code You change the rmt_channel to 1 because 0 is being used by the built-in LED of the MSR-2. Step 4. Hit save and then install in the top right. It should have a popup where you select \"wirelessly\" then it will begin compiling the firmware and finally installing the compiled firmware to your MSR-2.Step 5. Go into home assistant and confirm you now have a new light entity called Bed LED</p> <p></p> <p>Step 6. Click on the name \"Bed LED\" circled and it will pop up a color picker. You can then choose the color wheel option to pick any color of the rainbow, or select \"effect\" and choose an effect.</p> <p> </p> <p></p> <p>That's all folks! Thanks to Smart Home Sellout for putting this tutorial together!</p>"},{"location":"products/mtr1/Examples/mtr-1-%2B-alarmo-home-security-install/","title":"MTR-1 + Alarmo Home Security Install","text":"<p>My grandmother wanted a security system that would alert her when there was movement in her home after she had gone to bed. So, I set up three of our Apollo Automation mmWave sensors. These devices, plus the Alarmo add-on, quickly and easily allowed me to install a fully local, private, cloud-free, and no monthly subscription security system. She can arm/disarm it with one button on her Home Assistant dashboard, and it makes her feel much safer. This guide assumes you already have a motion/presence sensor installed on HA.</p> <p>1. Install HACS 2. Install Alarmo and the Alarmo Card (Pretty Arm and Disarm card for your HA dashboard)  </p> <p> </p> <p> </p> <p>3. Find Alarmo on the left, select the Sensors tab, and toggle on the sensor entities that you would like to use for your alarm system.  </p> <p> </p> <p>4. Now select the Actions tab and under Condition &gt; Event &gt; Select \"Alarm is triggered\". You can also select the device you would like to receive a notification on under Task &gt; Target &gt; Select Device (Phone, tablet, etc.)  </p> <p> </p> <p>5. You can change the Title, Message, and Name of the alarm notification.  </p> <p> </p> <p>6. After saving that action we can add another one that will turn on our sensor lights and/or make the onboard piezo buzzers play an alarm sound. Uner Entity select your sensors RGB light.  </p> <p> </p> <p>7. Under Action select Turn On and now your sensors RGB lights will turn on when the alarm is triggered.  </p> <p> </p> <p>8. And that's it, seriously... Now you can enjoy a free and local security system.  </p> <p>We hope this was helpful and please let us know if there are any questions!</p>"},{"location":"products/mtr1/Examples/mtr-1-corner-mount-stl-by-user-crookedtoe/","title":"MTR-1 Corner Mount STL by user CrookedToe","text":"<p>https://www.printables.com/model/941493-mtr-1-inside-corner-mount</p>"},{"location":"products/mtr1/Examples/mtr-1-home-assistant-dashboard-examples/","title":"MTR-1 Home Assistant Dashboard Examples","text":"<p>Radar Scatter Plot With Apex Charts</p> <p></p> <pre><code>type: custom:apexcharts-card\nheader:\n  show: true\n  title: MTR-1 Radar Distance\n  show_states: true\n  colorize_states: true\napex_config:\n  legend:\n    position: top\n    horizontalAlign: center\n    offsetX: -80\n    offsetY: 0\nexperimental:\n  brush: true\nbrush:\n  selection_span: 4h\ngraph_span: 24hr\nchart_type: scatter\nseries:\n  - entity: sensor.apollo_mtr_1_a79e14_radar_detection_distance\n    name: Detection\n    stroke_width: 1\n    color: green\n    show:\n      in_brush: true\n      extremas: true\n  - entity: sensor.apollo_mtr_1_a79e14_radar_moving_distance\n    name: Moving\n    stroke_width: 1\n  - entity: sensor.apollo_mtr_1_a79e14_radar_still_distance\n    name: Still\n    stroke_width: 1\n</code></pre> <p>CO2 Charts Home Assistant Sensor</p> <p></p> <pre><code>graph: line\ntype: sensor\nentity: sensor.apollo_mtr_1_a79e38_co2\ndetail: 2\nname: Bedroom CO2\nhours_to_show: 24\n</code></pre> <p>Custom: Plotly Graph Card</p> <p></p> <pre><code>type: custom:plotly-graph\nentities:\n  - entity: sensor.apollo_mtr_1_a79e38_co2\nhours_to_show: 24\nrefresh_interval: 10\ntitle: Bedroom CO2\n</code></pre> <p>Home Assistant Guage</p> <p></p> <pre><code>type: gauge\nentity: sensor.apollo_mtr_1_a79e38_co2\nneedle: true\nunit: ppm\nmin: 0\nmax: 3000\nseverity:\n  green: 0\n  yellow: 1000\n  red: 2000\n</code></pre>"},{"location":"products/mtr1/Examples/using-mtr-1-buzzer/","title":"Using MTR-1 Buzzer","text":"<p>This guide will walk you through using the buzzer on your MTR-1. You can also use the \"action\" in an automation in Home Assistant.</p> <ol> <li>Open Home Assistant and navigate to developer tools in the bottom left</li> </ol> <p></p> <p>2. Click on services</p> <p>3. Choose your MTR-1's buzzer (You can type in buzzer to find it easier)</p> <p>4. Put a rtttl tone into the the string box</p> <ul> <li> <ul> <li>Mario: <code>smb:d=4,o=5,b=100:16e6,16e6,32p,8e6,16c6,8e6,8g6,8p,8g,8p,8c6,16p,8g,16p,8e,16p,8a,8b,16a#,8a,16g.,16e6,16g6,8a6,16f6,8g6,8e6,16c6,16d6,8b,16p,8c6,16p,8g,16p,8e,16p,8a,8b,16a#,8a,16g.,16e6,16g6,8a6,16f6,8g6,8e6,16c6,16d6,8b,8p,16g6,16f#6,16f6,16d#6,16p,16e6,16p,16g#,16a,16c6,16p,16a,16c6,16d6,8p,16g6,16f#6,16f6,16d#6,16p,16e6,16p,16c7,16p,16c7,16c7,p,16g6,16f#6,16f6,16d#6,16p,16e6,16p,16g#,16a,16c6,16p,16a,16c6,16d6,8p,16d#6,8p,16d6,8p,16c6</code></li> <li>Cantina: <code>Cantina:d=4,o=5,b=250:8a,8p,8d6,8p,8a,8p,8d6,8p,8a,8d6,8p,8a,8p,8g#,a,8a,8g#,8a,g,8f#,8g,8f#,f.,8d.,16p,p.,8a,8p,8d6,8p,8a,8p,8d6,8p,8a,8d6,8p,8a,8p,8g#,8a,8p,8g,8p,g.,8f#,8g,8p,8c6,a#,a,g</code></li> <li>Star Wars Imperial Death March: <code>StarWars/Imp:d=4,o=5,b=112:8d.,16p,8d.,16p,8d.,16p,8a#4,16p,16f,8d.,16p,8a#4,16p,16f,d.,8p,8a.,16p,8a.,16p,8a.,16p,8a#,16p,16f,8c#.,16p,8a#4,16p,16f,d.,8p,8d.6,16p,8d,16p,16d,8d6,8p,8c#6,16p,16c6,16b,16a#,8b,8p,16d#,16p,8g#,8p,8g,16p,16f#,16f,16e,8f,8p,16a#4,16p,2c#</code></li> <li>Huge list: https://picaxe.com/rtttl-ringtones-for-tune-command/</li> <li>This is a good site to test rttl tones: https://adamonsoon.github.io/rtttl-play/</li> </ul> </li> </ul> <p>5. Click on the ACTIONS button in bottom right</p> <p></p>"},{"location":"products/mtr1/Setup/general-tips/","title":"General Tips","text":""},{"location":"products/mtr1/Setup/general-tips/#mtr-1-pcb-with-sensors","title":"MTR-1 PCB with Sensors","text":""},{"location":"products/mtr1/Setup/general-tips/#light-sensor-ltr-390uv","title":"Light Sensor (LTR-390UV)","text":"<p>When mounting the MTR-1 be sure to position the device so that the large hole at the top is not covered. This allows more light to enter and will ensure better accuracy</p> <p>The onboard RGB LED will trigger the light sensor. Be cognizant of this when making automations based on light/LUX.</p>"},{"location":"products/mtr1/Setup/general-tips/#mounting","title":"Mounting","text":""},{"location":"products/mtr1/Setup/general-tips/#ld2450-performance-and-electrical-parameters","title":"LD2450 Performance and Electrical Parameters","text":""},{"location":"products/mtr1/Setup/general-tips/#ld2450-datasheet","title":"LD2450 Datasheet","text":""},{"location":"products/mtr1/Setup/general-tips/#expanding-horizontal-distance-as-target-moves-further-away","title":"Expanding Horizontal Distance as Target Moves Further Away","text":"<p>The detection is 60 degrees from center on each side. So it is a cone when you are close to it but at 4 feet away to the side you might not be visible. If you are further from the wall it can detect further in a horizontal distance.</p> <p></p>"},{"location":"products/mtr1/Setup/general-tips/#increased-esp-temperature","title":"Increased ESP Temperature","text":"<p>If you are experiencing higher than normal ESP temperatures ~140+ degrees F then changing the wifi power save mode option might help decrease the temperature. Here is the link to the ESPHome WiFi Component Power Save Mode.  </p> <p>Power Save Mode The WiFi interface of all ESPs offer three power save modes to reduce the amount of power spent on WiFi. While some options can reduce the power usage of the ESP, they generally also decrease the reliability of the WiFi connection, with frequent disconnections from the router in the highest power saving mode.  </p> <p>NONE (least power saving, Default for ESP8266) LIGHT (Default for ESP32) HIGH (most power saving)</p> <pre><code>wifi:\n  # ...\n  power_save_mode: none\n</code></pre> <p>The code above can be added to the devices .yaml through the ESPHome addon edit button.  </p> <p>(Thank you for the suggestion, Brian!) (Referenced from ESPHome website)</p>"},{"location":"products/mtr1/Setup/how-to-change-the-update-frequency-of-sensors_force-update/","title":"How To Change The Update Frequency Of Sensors/Force Update","text":""},{"location":"products/mtr1/Setup/how-to-change-the-update-frequency-of-sensors_force-update/#how-to-change-the-update-frequency-of-sensorsforce-update_1","title":"How To Change The Update Frequency Of Sensors/Force Update","text":""},{"location":"products/mtr1/Setup/sensor-definitions/","title":"Sensor Definitions","text":""},{"location":"products/mtr1/Setup/sensor-definitions/#component","title":"Component","text":"<p>The <code>ld2450</code> component enables the use of the HLK-LD2450 human presence and motion detection radar module with ESPHome.</p> <p>HLK-LD2450 Official Datasheet and user manuals</p> <p>Motion target tracking involves real-time tracking of the position of a moving target within a specific area, enabling measurements of distance, angle, and speed. The LD2450 is a sensor module for tracking motion targets within the Hi-link 24G millimeter-wave radar series. It features simplified 24 GHz radar sensor hardware and intelligent algorithm firmware. It is mainly used in general indoor scenarios such as homes, offices, and hotels for tracking the location of moving human targets.</p> <p>HLKRadarTool Android App</p> <p>HLKRadarTool iOS App</p> <p>Note: Ensure that the LD2450 firmware version is <code>V2.02.23090617</code> or later for proper integration functionality. You can use the HLKRadarTool mobile app to update the firmware.</p> <p></p> <p>The UART needs to be set up in your configuration for this sensor to work. <code>parity</code> and <code>stop_bits</code> must be <code>NONE</code> and <code>1</code>, respectively. Using hardware UART pins is highly recommended, as they support the out-of-the-box 256000 baud rate of the LD2450 sensor.</p> <pre><code># uart configuration\nuart:\n  id: uart_ld2450\n  tx_pin: 17\n  rx_pin: 21\n  baud_rate: 256000\n  parity: NONE\n  stop_bits: 1\n</code></pre> <pre><code># ld2450 configuration\nld2450:\n  id: ld2450_radar\n  uart_id: uart_ld2450\n  throttle: 1000ms\n</code></pre>"},{"location":"products/mtr1/Setup/sensor-definitions/#configuration-variables","title":"Configuration variables:","text":"<ul> <li>id (Optional, config-id): Manually specify the ID for the <code>ld2450</code> component if you need multiple components.</li> <li>uart_id (Optional, config-id): Manually specify the ID of the UART Component if you want to use multiple UART buses.</li> <li>throttle (Optional, int): Time in milliseconds to control the rate of data updates. Defaults to <code>1000ms</code>.</li> </ul>"},{"location":"products/mtr1/Setup/sensor-definitions/#binary-sensor","title":"Binary Sensor","text":"<p>The <code>ld2450</code> binary sensor offers presence states for the targets.</p> <pre><code>binary_sensor:\n  - platform: ld2450\n    ld2450_id: ld2450_radar\n    has_target:\n      name: Presence\n    has_moving_target:\n      name: Moving Target\n    has_still_target:\n      name: Still Target\n</code></pre>"},{"location":"products/mtr1/Setup/sensor-definitions/#configuration-variables_1","title":"Configuration variables:","text":"<ul> <li>ld2450_id (Optional, config-id): Manually specify the ID for the <code>ld2450</code> component if you are using multiple components.</li> <li>has_target (Optional): True if either target is still or in motion. All options from Binary Sensor.</li> <li>has_moving_target (Optional): True if a moving target is detected. All options from Binary Sensor.</li> <li>has_still_target (Optional): True if a still target is detected. All options from Binary Sensor.</li> </ul>"},{"location":"products/mtr1/Setup/sensor-definitions/#sensor","title":"Sensor","text":"<p>The <code>ld2450</code> sensor provides information about the states and attributes of detected targets.</p> <pre><code>sensor:\n  - platform: ld2450\n    ld2450_id: ld2450_radar\n    target_count:\n      name: Presence Target Count\n    still_target_count:\n      name: Still Target Count\n    moving_target_count:\n      name: Moving Target Count\n    target_1:\n      x:\n        name: Target-1 X\n      y:\n        name: Target-1 Y\n      speed:\n        name: Target-1 Speed\n      angle:\n        name: Target-1 Angle\n      distance:\n        name: Target-1 Distance\n      resolution:\n        name: Target-1 Resolution\n    target_2:\n      x:\n        name: Target-2 X\n      y:\n        name: Target-2 Y\n      speed:\n        name: Target-2 Speed\n      angle:\n        name: Target-2 Angle\n      distance:\n        name: Target-2 Distance\n      resolution:\n        name: Target-2 Resolution\n    target_3:\n      x:\n        name: Target-3 X\n      y:\n        name: Target-3 Y\n      speed:\n        name: Target-3 Speed\n      angle:\n        name: Target-3 Angle\n      distance:\n        name: Target-3 Distance\n      resolution:\n        name: Target-3 Resolution\n    zone_1:\n      target_count:\n        name: Zone-1 All Target Count\n      still_target_count:\n        name: Zone-1 Still Target Count\n      moving_target_count:\n        name: Zone-1 Moving Target Count\n    zone_2:\n      target_count:\n        name: Zone-2 All Target Count\n      still_target_count:\n        name: Zone-2 Still Target Count\n      moving_target_count:\n        name: Zone-2 Moving Target Count\n    zone_3:\n      target_count:\n        name: Zone-3 All Target Count\n      still_target_count:\n        name: Zone-3 Still Target Count\n      moving_target_count:\n        name: Zone-3 Moving Target Count\n</code></pre>"},{"location":"products/mtr1/Setup/sensor-definitions/#configuration-variables_2","title":"Configuration variables:","text":"<ul> <li>ld2450_id (Optional, config-id): Manually specify the ID for the <code>ld2450</code> component if you are using multiple components.</li> <li>target_count (Optional, int): Total targets detected, stationary or moving. All options from Sensor.</li> <li>still_target_count (Optional, int): Count of stationary targets. All options from Sensor.</li> <li>moving_target_count (Optional, int): Count of moving targets. All options from Sensor.</li> <li>target_N (Optional): Details about the targets (N = 1 to 3). A maximum of 3 targets can be detected: <code>target_1</code>, <code>target_2</code>, <code>target_3</code>. <ul> <li>x (Optional, int): Distance in millimeters (mm) of the target from the <code>ld2450</code> sensor along the X-axis. All options from Sensor.</li> <li>y (Optional, int): Distance in millimeters (mm) of the target from the <code>ld2450</code> sensor in the Y direction. All options from Sensor.</li> <li>speed (Optional, int): Speed of the moving target in <code>mm/s</code>. All options from Sensor.</li> <li>angle (Optional, int): Angle of target in degrees (\u00b0) relative to the <code>ld2450</code> sensor. All options from Sensor.</li> <li>distance (Optional, int): Distance in millimeters (mm) of the target from the <code>ld2450</code> sensor. All options from Sensor.</li> <li>resolution (Optional, int): The <code>ld2450</code> target detection range resolution in millimeters (mm). All options from Sensor.</li> </ul> </li> <li>zone_N (Optional): Target count details in the defined zones (N = 1 to 3). A maximum of 3 zones: <code>zone_1</code>, <code>zone_2</code>, <code>zone_3</code>. <ul> <li>target_count (Optional, int): Total targets detected in the zone, stationary or moving. All options from Sensor.</li> <li>still_target_count (Optional, int): Count of stationary targets in the zone. All options from Sensor.</li> <li>moving_target_count (Optional, int): Count of moving targets in the zone. All options from Sensor.</li> </ul> </li> </ul>"},{"location":"products/mtr1/Setup/sensor-definitions/#switch","title":"Switch","text":"<p>The <code>ld2450</code> switch allows you to control your <code>ld2450</code> Bluetooth and Multi/Single Target Tracking.</p> <pre><code>switch:\n  - platform: ld2450\n    ld2450_id: ld2450_radar\n    bluetooth:\n      name: \"Bluetooth\"\n    multi_target:\n      name: \"Multi Target Tracking\"\n</code></pre>"},{"location":"products/mtr1/Setup/sensor-definitions/#configuration-variables_3","title":"Configuration variables:","text":"<ul> <li>ld2450_id (Optional, config-id): Manually specify the ID for the <code>ld2450</code> component if you are using multiple components.</li> <li>bluetooth (Optional): Turn on/off the Bluetooth adapter. Defaults to <code>true</code>. All options from Switch.</li> <li>multi_target (Optional): Turn on/off the Multi Target Tracking option. All options from Switch.</li> </ul>"},{"location":"products/mtr1/Setup/sensor-definitions/#number","title":"Number","text":"<p>The <code>ld2450</code> number allows you to control the presence timeout and zone area configuration of your <code>ld2450</code>.</p> <pre><code>number:\n  - platform: ld2450\n    ld2450_id: ld2450_radar\n    presence_timeout:\n      name: \"Timeout\"\n    zone_1:\n      x1:\n        name: Zone-1 X1\n      y1:\n        name: Zone-1 Y1\n      x2:\n        name: Zone-1 X2\n      y2:\n        name: Zone-1 Y2\n    zone_2:\n      x1:\n        name: Zone-2 X1\n      y1:\n        name: Zone-2 Y1\n      x2:\n        name: Zone-2 X2\n      y2:\n        name: Zone-2 Y2\n    zone_3:\n      x1:\n        name: Zone-3 X1\n      y1:\n        name: Zone-3 Y1\n      x2:\n        name: Zone-3 X2\n      y2:\n        name: Zone-3 Y2\n</code></pre>"},{"location":"products/mtr1/Setup/sensor-definitions/#configuration-variables_4","title":"Configuration variables:","text":"<ul> <li>ld2450_id (Optional, config-id): Manually specify the ID for the <code>ld2450</code> component if you are using multiple components.</li> <li>presence_timeout (Required, int): The duration, in seconds, for which the presence states will persist after detection is cleared. Default is <code>5</code> seconds. All options from Number.</li> <li>zone_N (Optional): Configuration of the zone (N = 1 to 3), defined as a rectangular area. A maximum of 3 Zones can be configured: <code>zone_1</code>, <code>zone_2</code>, <code>zone_3</code>. The zone coordinates consist of x1 y1 (Near-Left) to x2 y2 (Far-Right) relative to the <code>ld2450</code> sensor. <ul> <li>x1 (Optional, int): Start X coordinate in millimeters (mm) of the zone from the <code>ld2450</code> sensor along the X-axis. All options from Number.</li> <li>y1 (Optional, int): Start Y coordinate in millimeters (mm) of the zone from the <code>ld2450</code> sensor along the Y-axis. All options from Number.</li> <li>x2 (Optional, int): End X coordinate in millimeters (mm) of the zone from the <code>ld2450</code> sensor along the X-axis. All options from Number.</li> <li>y2 (Optional, int): End Y coordinate in millimeters (mm) of the zone from the <code>ld2450</code> sensor along the Y-axis. All options from Number.</li> </ul> </li> </ul>"},{"location":"products/mtr1/Setup/sensor-definitions/#button","title":"Button","text":"<p>The <code>ld2450</code> button allows you to perform <code>restart</code> and <code>factory reset</code> actions on your <code>ld2450</code>.</p> <pre><code>button:\n  - platform: ld2450\n    ld2450_id: ld2450_radar\n    factory_reset:\n      name: \"LD2450 Factory Reset\"\n    restart:\n      name: \"LD2450 Restart\"\n</code></pre>"},{"location":"products/mtr1/Setup/sensor-definitions/#configuration-variables_5","title":"Configuration variables:","text":"<ul> <li>ld2450_id (Optional, config-id): Manually specify the ID for the <code>ld2450</code> component if you are using multiple components.</li> <li>factory_reset (Optional): Resets the <code>ld2450</code> to its default values. All options from Button.</li> <li>restart (Optional): Restarts the <code>ld2450</code> device. All options from Button.</li> </ul>"},{"location":"products/mtr1/Setup/sensor-definitions/#text-sensor","title":"Text Sensor","text":"<p>The <code>ld2450</code> text sensor allows you to get information about your <code>ld2450</code>.</p> <pre><code>text_sensor:\n  - platform: ld2450\n    ld2450_id: ld2450_radar\n    version:\n      name: \"LD2450 Firmware\"\n    mac_address:\n      name: \"LD2450 BT MAC\"\n    target_1:\n      direction:\n        name: \"Target-1 Direction\"\n    target_2:\n      direction:\n        name: \"Target-2 Direction\"\n    target_3:\n      direction:\n        name: \"Target-3 Direction\"\n</code></pre>"},{"location":"products/mtr1/Setup/sensor-definitions/#configuration-variables_6","title":"Configuration variables:","text":"<ul> <li>ld2450_id (Optional, config-id): Manually specify the ID for the <code>ld2450</code> component if you are using multiple components.</li> <li>version (Optional): The <code>ld2450</code> firmware version. All options from Text Sensor.</li> <li>mac_address (Optional): The <code>ld2450</code> Bluetooth MAC address. All options from Text Sensor.</li> <li>target_N (Optional): Targets (N = 1 to 3). A maximum of 3 targets can be detected: <code>target_1</code>, <code>target_2</code>, <code>target_3</code>. <ul> <li>direction (Optional): Direction of the target relative to the <code>ld2450</code> sensor. Possible values are: <code>Stationary</code>, <code>Moving away</code>, <code>Coming closer</code>, <code>NA</code>. All options from Sensor.</li> </ul> </li> </ul>"},{"location":"products/mtr1/Setup/sensor-definitions/#select","title":"Select","text":"<p>The <code>ld2450</code> select allows you to control <code>baud rate</code> and <code>zone type</code> of your <code>ld2450</code>.</p> <pre><code>select:\n  - platform: ld2450\n    ld2450_id: ld2450_radar\n    baud_rate:\n      name: \"Baud rate\"\n    zone_type:\n      name: \"Zone Type\"\n</code></pre>"},{"location":"products/mtr1/Setup/sensor-definitions/#configuration-variables_7","title":"Configuration variables:","text":"<ul> <li>ld2450_id (Optional, config-id): Manually specify the ID for the <code>ld2450</code> component if you are using multiple components.</li> <li>baud_rate (Optional): Control the UART serial port baud rate. Defaults to <code>256000</code>. Once changed, all sensors will stop working until a fresh install with an updated UART Component configuration. All options from Select.</li> <li>zone_type (Optional): Control the Zone detection modes. It can be set to <code>Disabled</code>, <code>Detection</code>, or <code>Filter</code>. Selecting the <code>Disabled</code> option will disable zone area detection. <code>Detection</code> mode is used to detect only targets in the specified area, while <code>Filter</code> mode can be used to exclude an area from detection. All options from Select.</li> </ul>"},{"location":"products/mtr1/Setup/sensor-definitions/#copied-and-adapted-from-hareeshmu","title":"(Copied and adapted from hareeshmu)","text":""},{"location":"products/mtr1/Setup/zone-configuration-using-hlkradartool-app/","title":"Zone Configuration Using HLKRadarTool App","text":"<p>1. Download the HLKRadarTool app for either Android or Apple 2. Ensure the mmWave radar you want to configure has Radar Control Bluetooth turned on. Home Assistant &gt; Settings &gt; Devices &amp; services &gt; ESPHome Devices &gt; Select Device &gt; Scroll down and toggle on Radar Control Bluetooth  3. Open the HLKRadarTool App and select your device  4. Select Set in the top right  5. Select Close Detection, Area Detection, or Area Filtering. Then toggle Area 1, 2, or 3 and you will see a box with the corresponding number pop up. Then you can press and hold the box to move it and resize it. When your zones are set then select Submit and you should see Setup successfully! - Close Detection: Disable zone area detection - Area Detection: Only detects targets in the specified zone - Area Filtering: Excludes a zone from detection  6. If set up correctly the zones should be saved as different colors. You can double-check that the settings are saved by looking at your HA entities (picture below). You should be all set! See below for a nice Home Assistant visualizer card.  7. Copy the code below and add a Home Assistant card to visualize your zones. You will need to change all of the sensor_apollo_mtr_1 entity IDs to match your MTR-1 device. This can be done quickly by using a code editor or ChatGPT. </p> <pre><code>type: custom:plotly-graph\ntitle: Target Positions\nrefresh_interval: 1\nhours_to_show: current_day\nlayout:\n  height: 230\n  margin:\n    l: 50\n    r: 20\n    t: 20\n    b: 40\n  showlegend: true\n  xaxis:\n    dtick: 1000\n    gridcolor: RGBA(200,200,200,0.15)\n    zerolinecolor: RGBA(200,200,200,0.15)\n    type: number\n    fixedrange: true\n    range:\n      - 4000\n      - -4000\n  yaxis:\n    dtick: 1000\n    gridcolor: RGBA(200,200,200,0.15)\n    zerolinecolor: RGBA(200,200,200,0.15)\n    scaleanchor: x\n    scaleratio: 1\n    fixedrange: true\n    range:\n      - 7500\n      - 0\nentities:\n  - entity: ''\n    name: Target1\n    marker:\n      size: 12\n    line:\n      shape: spline\n      width: 5\n    x:\n      - $ex hass.states[\"sensor.apollo_mtr_1_982da4_target_1_x\"].state\n    'y':\n      - $ex hass.states[\"sensor.apollo_mtr_1_982da4_target_1_y\"].state\n  - entity: ''\n    name: Target2\n    marker:\n      size: 12\n    line:\n      shape: spline\n      width: 5\n    x:\n      - $ex hass.states[\"sensor.apollo_mtr_1_982da4_target_2_x\"].state\n    'y':\n      - $ex hass.states[\"sensor.apollo_mtr_1_982da4_target_2_y\"].state\n  - entity: ''\n    name: Target3\n    marker:\n      size: 12\n    line:\n      shape: spline\n      width: 5\n    x:\n      - $ex hass.states[\"sensor.apollo_mtr_1_982da4_target_3_x\"].state\n    'y':\n      - $ex hass.states[\"sensor.apollo_mtr_1_982da4_target_3_y\"].state\n  - entity: ''\n    name: Zone1\n    mode: lines\n    fill: toself\n    fillcolor: RGBA(20,200,0,0.06)\n    line:\n      color: RGBA(20,200,0,0.2)\n      shape: line\n      width: 2\n    x:\n      - $ex hass.states[\"number.apollo_mtr_1_982da4_zone_1_x1\"].state\n      - $ex hass.states[\"number.apollo_mtr_1_982da4_zone_1_x1\"].state\n      - $ex hass.states[\"number.apollo_mtr_1_982da4_zone_1_x2\"].state\n      - $ex hass.states[\"number.apollo_mtr_1_982da4_zone_1_x2\"].state\n      - $ex hass.states[\"number.apollo_mtr_1_982da4_zone_1_x1\"].state\n    'y':\n      - $ex hass.states[\"number.apollo_mtr_1_982da4_zone_1_y1\"].state\n      - $ex hass.states[\"number.apollo_mtr_1_982da4_zone_1_y2\"].state\n      - $ex hass.states[\"number.apollo_mtr_1_982da4_zone_1_y2\"].state\n      - $ex hass.states[\"number.apollo_mtr_1_982da4_zone_1_y1\"].state\n      - $ex hass.states[\"number.apollo_mtr_1_982da4_zone_1_y1\"].state\n  - entity: ''\n    name: Zone2\n    mode: lines\n    fill: toself\n    fillcolor: RGBA(200,0,255,0.06)\n    line:\n      color: RGBA(200,0,255,0.2)\n      shape: line\n      width: 2\n    x:\n      - $ex hass.states[\"number.apollo_mtr_1_982da4_zone_2_x1\"].state\n      - $ex hass.states[\"number.apollo_mtr_1_982da4_zone_2_x1\"].state\n      - $ex hass.states[\"number.apollo_mtr_1_982da4_zone_2_x2\"].state\n      - $ex hass.states[\"number.apollo_mtr_1_982da4_zone_2_x2\"].state\n      - $ex hass.states[\"number.apollo_mtr_1_982da4_zone_2_x1\"].state\n    'y':\n      - $ex hass.states[\"number.apollo_mtr_1_982da4_zone_2_y1\"].state\n      - $ex hass.states[\"number.apollo_mtr_1_982da4_zone_2_y2\"].state\n      - $ex hass.states[\"number.apollo_mtr_1_982da4_zone_2_y2\"].state\n      - $ex hass.states[\"number.apollo_mtr_1_982da4_zone_2_y1\"].state\n      - $ex hass.states[\"number.apollo_mtr_1_982da4_zone_2_y1\"].state\n  - entity: ''\n    name: Zone3\n    mode: lines\n    fill: toself\n    fillcolor: RGBA(200,120,55,0.06)\n    line:\n      color: RGBA(200,120,55,0.2)\n      shape: line\n      width: 2\n    x:\n      - $ex hass.states[\"number.apollo_mtr_1_982da4_zone_3_x1\"].state\n      - $ex hass.states[\"number.apollo_mtr_1_982da4_zone_3_x1\"].state\n      - $ex hass.states[\"number.apollo_mtr_1_982da4_zone_3_x2\"].state\n      - $ex hass.states[\"number.apollo_mtr_1_982da4_zone_3_x2\"].state\n      - $ex hass.states[\"number.apollo_mtr_1_982da4_zone_3_x1\"].state\n    'y':\n      - $ex hass.states[\"number.apollo_mtr_1_982da4_zone_3_y1\"].state\n      - $ex hass.states[\"number.apollo_mtr_1_982da4_zone_3_y2\"].state\n      - $ex hass.states[\"number.apollo_mtr_1_982da4_zone_3_y2\"].state\n      - $ex hass.states[\"number.apollo_mtr_1_982da4_zone_3_y1\"].state\n      - $ex hass.states[\"number.apollo_mtr_1_982da4_zone_3_y1\"].state\n  - entity: ''\n    name: Coverage\n    mode: lines\n    fill: tonexty\n    fillcolor: rgba(168, 216, 234, 0.15)\n    line:\n      shape: line\n      width: 1\n      dash: dot\n    x:\n      - 0\n      - $ex 7500 * Math.sin((2 * Math.PI)/360 * 60)\n      - 4500\n      - 4000\n      - 3000\n      - 2000\n      - 1000\n      - 0\n      - -1000\n      - -2000\n      - -3000\n      - -4000\n      - -4500\n      - $ex -7500 * Math.sin((2 * Math.PI)/360 * 60)\n      - 0\n    'y':\n      - 0\n      - $ex 7500 * Math.cos((2 * Math.PI)/360 * 60)\n      - $ex Math.sqrt( 7500**2 - 4500**2 )\n      - $ex Math.sqrt( 7500**2 - 4000**2 )\n      - $ex Math.sqrt( 7500**2 - 3000**2 )\n      - $ex Math.sqrt( 7500**2 - 2000**2 )\n      - $ex Math.sqrt( 7500**2 - 1000**2 )\n      - 7500\n      - $ex Math.sqrt( 7500**2 - 1000**2 )\n      - $ex Math.sqrt( 7500**2 - 2000**2 )\n      - $ex Math.sqrt( 7500**2 - 3000**2 )\n      - $ex Math.sqrt( 7500**2 - 4000**2 )\n      - $ex Math.sqrt( 7500**2 - 4500**2 )\n      - $ex 7500 * Math.cos((2 * Math.PI)/360 * 60)\n      - 0\nraw_plotly_config: true\n</code></pre>"},{"location":"products/mtr1/Setup/zone-configuration-using-home-assistant/","title":"Zone Configuration Using Home Assistant","text":"<p>Disclaimer: Currently having issues saving the zones after restarting the device when using this method. It is recommended to use the HLKRadarTool App Zone Configuration Guide. </p> <p>You will need to have HACS and Plotly installed to make it easier to visualize the zones. If you already have HACS then you can skip Step 1. Same for Step 2 if you have Plotly.  </p> <p>1. Install HACS 2. Install Plotly 3. Copy the code below and add a Home Assistant card to visualize your zones. You will need to change all of the sensor_apollo_mtr_1 entity IDs to match your MTR-1 device. This can be done quickly by using a code editor or ChatGPT. </p> <pre><code>type: custom:plotly-graph\ntitle: Target Positions\nrefresh_interval: 1\nhours_to_show: current_day\nlayout:\n  height: 230\n  margin:\n    l: 50\n    r: 20\n    t: 20\n    b: 40\n  showlegend: true\n  xaxis:\n    dtick: 1000\n    gridcolor: RGBA(200,200,200,0.15)\n    zerolinecolor: RGBA(200,200,200,0.15)\n    type: number\n    fixedrange: true\n    range:\n      - 4000\n      - -4000\n  yaxis:\n    dtick: 1000\n    gridcolor: RGBA(200,200,200,0.15)\n    zerolinecolor: RGBA(200,200,200,0.15)\n    scaleanchor: x\n    scaleratio: 1\n    fixedrange: true\n    range:\n      - 7500\n      - 0\nentities:\n  - entity: ''\n    name: Target1\n    marker:\n      size: 12\n    line:\n      shape: spline\n      width: 5\n    x:\n      - $ex hass.states[\"sensor.apollo_mtr_1_982da4_target_1_x\"].state\n    'y':\n      - $ex hass.states[\"sensor.apollo_mtr_1_982da4_target_1_y\"].state\n  - entity: ''\n    name: Target2\n    marker:\n      size: 12\n    line:\n      shape: spline\n      width: 5\n    x:\n      - $ex hass.states[\"sensor.apollo_mtr_1_982da4_target_2_x\"].state\n    'y':\n      - $ex hass.states[\"sensor.apollo_mtr_1_982da4_target_2_y\"].state\n  - entity: ''\n    name: Target3\n    marker:\n      size: 12\n    line:\n      shape: spline\n      width: 5\n    x:\n      - $ex hass.states[\"sensor.apollo_mtr_1_982da4_target_3_x\"].state\n    'y':\n      - $ex hass.states[\"sensor.apollo_mtr_1_982da4_target_3_y\"].state\n  - entity: ''\n    name: Zone1\n    mode: lines\n    fill: toself\n    fillcolor: RGBA(20,200,0,0.06)\n    line:\n      color: RGBA(20,200,0,0.2)\n      shape: line\n      width: 2\n    x:\n      - $ex hass.states[\"number.apollo_mtr_1_982da4_zone_1_x1\"].state\n      - $ex hass.states[\"number.apollo_mtr_1_982da4_zone_1_x1\"].state\n      - $ex hass.states[\"number.apollo_mtr_1_982da4_zone_1_x2\"].state\n      - $ex hass.states[\"number.apollo_mtr_1_982da4_zone_1_x2\"].state\n      - $ex hass.states[\"number.apollo_mtr_1_982da4_zone_1_x1\"].state\n    'y':\n      - $ex hass.states[\"number.apollo_mtr_1_982da4_zone_1_y1\"].state\n      - $ex hass.states[\"number.apollo_mtr_1_982da4_zone_1_y2\"].state\n      - $ex hass.states[\"number.apollo_mtr_1_982da4_zone_1_y2\"].state\n      - $ex hass.states[\"number.apollo_mtr_1_982da4_zone_1_y1\"].state\n      - $ex hass.states[\"number.apollo_mtr_1_982da4_zone_1_y1\"].state\n  - entity: ''\n    name: Zone2\n    mode: lines\n    fill: toself\n    fillcolor: RGBA(200,0,255,0.06)\n    line:\n      color: RGBA(200,0,255,0.2)\n      shape: line\n      width: 2\n    x:\n      - $ex hass.states[\"number.apollo_mtr_1_982da4_zone_2_x1\"].state\n      - $ex hass.states[\"number.apollo_mtr_1_982da4_zone_2_x1\"].state\n      - $ex hass.states[\"number.apollo_mtr_1_982da4_zone_2_x2\"].state\n      - $ex hass.states[\"number.apollo_mtr_1_982da4_zone_2_x2\"].state\n      - $ex hass.states[\"number.apollo_mtr_1_982da4_zone_2_x1\"].state\n    'y':\n      - $ex hass.states[\"number.apollo_mtr_1_982da4_zone_2_y1\"].state\n      - $ex hass.states[\"number.apollo_mtr_1_982da4_zone_2_y2\"].state\n      - $ex hass.states[\"number.apollo_mtr_1_982da4_zone_2_y2\"].state\n      - $ex hass.states[\"number.apollo_mtr_1_982da4_zone_2_y1\"].state\n      - $ex hass.states[\"number.apollo_mtr_1_982da4_zone_2_y1\"].state\n  - entity: ''\n    name: Zone3\n    mode: lines\n    fill: toself\n    fillcolor: RGBA(200,120,55,0.06)\n    line:\n      color: RGBA(200,120,55,0.2)\n      shape: line\n      width: 2\n    x:\n      - $ex hass.states[\"number.apollo_mtr_1_982da4_zone_3_x1\"].state\n      - $ex hass.states[\"number.apollo_mtr_1_982da4_zone_3_x1\"].state\n      - $ex hass.states[\"number.apollo_mtr_1_982da4_zone_3_x2\"].state\n      - $ex hass.states[\"number.apollo_mtr_1_982da4_zone_3_x2\"].state\n      - $ex hass.states[\"number.apollo_mtr_1_982da4_zone_3_x1\"].state\n    'y':\n      - $ex hass.states[\"number.apollo_mtr_1_982da4_zone_3_y1\"].state\n      - $ex hass.states[\"number.apollo_mtr_1_982da4_zone_3_y2\"].state\n      - $ex hass.states[\"number.apollo_mtr_1_982da4_zone_3_y2\"].state\n      - $ex hass.states[\"number.apollo_mtr_1_982da4_zone_3_y1\"].state\n      - $ex hass.states[\"number.apollo_mtr_1_982da4_zone_3_y1\"].state\n  - entity: ''\n    name: Coverage\n    mode: lines\n    fill: tonexty\n    fillcolor: rgba(168, 216, 234, 0.15)\n    line:\n      shape: line\n      width: 1\n      dash: dot\n    x:\n      - 0\n      - $ex 7500 * Math.sin((2 * Math.PI)/360 * 60)\n      - 4500\n      - 4000\n      - 3000\n      - 2000\n      - 1000\n      - 0\n      - -1000\n      - -2000\n      - -3000\n      - -4000\n      - -4500\n      - $ex -7500 * Math.sin((2 * Math.PI)/360 * 60)\n      - 0\n    'y':\n      - 0\n      - $ex 7500 * Math.cos((2 * Math.PI)/360 * 60)\n      - $ex Math.sqrt( 7500**2 - 4500**2 )\n      - $ex Math.sqrt( 7500**2 - 4000**2 )\n      - $ex Math.sqrt( 7500**2 - 3000**2 )\n      - $ex Math.sqrt( 7500**2 - 2000**2 )\n      - $ex Math.sqrt( 7500**2 - 1000**2 )\n      - 7500\n      - $ex Math.sqrt( 7500**2 - 1000**2 )\n      - $ex Math.sqrt( 7500**2 - 2000**2 )\n      - $ex Math.sqrt( 7500**2 - 3000**2 )\n      - $ex Math.sqrt( 7500**2 - 4000**2 )\n      - $ex Math.sqrt( 7500**2 - 4500**2 )\n      - $ex 7500 * Math.cos((2 * Math.PI)/360 * 60)\n      - 0\nraw_plotly_config: true\n</code></pre> <p>4. Open Home Assistant and select Settings  5. Select Devices and services  6. Select ESPHome  7. Select your MTR-1 device</p> <p> 8. Scroll down to the Configuration section and you should see Zone 1-3 X and Y boxes.  - LD2450 Bluetooth can be turned on if you would like to use the HLKRadarTool App to configure the zones.  - Multi Target Tracking toggled on helps it detect up to three targets better (still trying to figure out \"how\" this works).  - Zone Type allows you to select Disabled, Detection, or Filter. - Disabled: Disable zone area detection - Detection: Only detects targets in the specified zone - Filter: Excludes a zone from detection  9. Now we can input our Zone 1-3 X and Y values to make our zones. Using the visual card from above, we can walk, sit, or stand in the area where we want to create a detection or non-detection zone. Input values for X are -7000 mm to 7000 mm, and the Y values are 0 mm to 7000 mm.  10. If you use the imperial system (Freedom Units) then you will need to do this step. Metric users can skip this. For the targets to show up correctly we first need to update the Target 1-3 X and Y measurements from inches (in) to millimeters (mm). Find Target 1-3 X and Y under the Sensors section and select them. You will want to update all 3 targets X and Y values.  11. Select the Settings cog in the top right.  12. Change the unit of measurement to mm and select Update.  13. Now you should see targets on the card.  14. Now we can make zones around the targets where you want to Detect presence or filter them out! 15. If your zone configurations are not saved when restarting the device then try turning on the LD2450 Bluetooth for a few seconds and then turning it off again. You can also try to toggle on Multi Target Radar. This should wake up the mmWave module and retrieve your saved zones. (Thanks to our Discord members for helping figure this out)</p>"},{"location":"products/mtr1/Troubleshooting/manually-uploading-code-through-esphome/","title":"Manually Uploading Code Through ESPHome","text":"<p>If your device becomes unresponsive and you've exhausted the other troubleshooting methods you can upload a fresh set of firmware by following the below guide. The utility does need to be run from Chrome or Edge.</p> <p>If your device has already been connected to Home Assistant previously please refer to Removing Device From Home Assistant first before proceeding</p> <ol> <li>Plug your MTR-1 into your computer with a quality USBC cable that supports data transfer</li> <li> <p>Navigate to our installer page and click connect ** Install Page **</p> </li> <li> <p>Select your Apollo device, it will show with a similar name to the one below, and click connect. If you aren't sure which device it is, you can unplug the MTR-1 and see which disappears.</p> </li> </ol> <p></p> <p>If no device shows, click cancel and then install the recommended driver that shows on the popup. If you have installed the driver, tried different cables, and it still won't work refer here for putting the MTR-1 in bootloader mode and then retry step 3. Putting MTR-1 In Boot Mode Document</p> <ol> <li>Choose to install the new firmware</li> </ol> <p></p> <ol> <li>Wait for the installer to finish - if you see \"ERROR Logger is not configured!\" that is totally expected! The logger is disabled to make more room for other components on the microcontroller.</li> </ol> <p></p> <p>7.VERY IMPORTANT - you need to unplug your device and plug it back in to leave boot mode!</p> <ol> <li> <p>After finishing, check for the Apollo hotspot and connect. This might not show if you previously had the MTR-1 connected to your wifi</p> </li> <li> <p>Log into Home Assistant and go to the ESPHome addon check to see if you can adopt the device.</p> </li> </ol> <p>If you encounter the below error, please complete the Putting MTR-1 In Boot Mode Document and go back to step 3.</p> <p></p>"},{"location":"products/mtr1/Troubleshooting/putting-the-mtr-1-in-boot-mode/","title":"Putting The MTR-1 In Boot Mode","text":"<p>This will cover how to put the MTR-1 into boot mode. Sometimes, this is needed to upload new firmware if the device is struggling.  </p> <p>Boot Button Only</p> <ol> <li>See the photo below to help access the boot button through the top of the case</li> <li>Use a pin to press and hold the boot button, while holding the boot button plug the MTR-1 back into your computer/power and then release the boot button</li> </ol> <p>  4. Continue with uploading the firmware document </p> <p>Boot and Reset Buttons</p> <ol> <li>Unplug the device</li> <li>Slide the back of the case off</li> <li>Remove the device from the case</li> <li>Plug it back into your computer</li> <li>Press and hold the boot button, while holding it press and release the reset button, then release the boot button</li> </ol> <p></p> <p>6. Continue with uploading the firmware document</p>"},{"location":"products/mtr1/Troubleshooting/teardown-and-reassembly-of-the-mtr-1/","title":"Teardown and Reassembly of the MTR-1","text":"<p>This will cover how to take apart and reassemble the MTR-1 device. This is useful if you are replacing components or to inspect if the mmwave sensor (LD2450) is seated properly. Sometimes during shipping, this can become loose and cause issues with the accuracy of the sensor</p> <p></p>"},{"location":"products/mtr1/additional-info/adding-co2-to-mtr-1/","title":"Adding CO2 To MTR-1","text":"<p>1. Unplug your MTR-1 from power and remove the back (board shown is msr-1)</p> <p></p> <p>2. Remove the board from the case and orient it like the image below. You will see a black connector on the bottom right, with an 'X' at its lower right corner.</p> <p></p> <p>3. Orient the CO2 module so that the white 'X' is on the lower right and the gold dot on the upper left, as shown in the image below.</p> <p></p> <p>4. Align the connector on the back of the CO2 module with the connector on the MTR-1. Once aligned, push down so the CO2 module fully seats itself</p> <p></p> <p>5. Put your MTR-1 back in the case and slide the back cover on. Please refer to our CO2 calibration guide to calibrate the CO2 module.</p>"},{"location":"products/mtr1/additional-info/mmwave-presence-sensor-comparison/","title":"mmWave Presence Sensor Comparison","text":"<p>Please refer to the mmWave guide from the MSR-2: https://wiki.apolloautomation.com/books/msr-2/page/mmwave-presence-sensor-comparison</p>"},{"location":"products/mtr1/additional-info/reducing-ld2450-log-entries-in-home-assistant/","title":"Reducing LD2450 Log Entries In Home Assistant","text":"<ol> <li>Open your Home Assistant config.yaml</li> <li>Add in this code but use your MTR-1's name</li> </ol> <pre><code>logbook:\n  exclude:\n    entities:\n      - binary_sensor.hallway_motion_home_security_motion_detection\n</code></pre>"},{"location":"products/mtr1/calibrating-and-updating/co2-calibration-for-mtr-1/","title":"CO2 Calibration For MTR-1","text":""},{"location":"products/mtr1/calibrating-and-updating/co2-calibration-for-mtr-1/#please-refer-to-the-general-co2-calibration-article","title":"Please refer to the General CO2 Calibration article","text":""},{"location":"products/mtr1/calibrating-and-updating/mtr-1-temperature-%26-humidity-offsets/","title":"MTR-1 Temperature &amp; Humidity Offsets","text":""},{"location":"products/mtr1/calibrating-and-updating/mtr-1-temperature-%26-humidity-offsets/#simple-offsets-for-temperature-and-humidity","title":"Simple Offsets for Temperature and Humidity:","text":"<p>Please add these to the bottom of your esphome yaml for your device then click save and install. Once you are finished, you will have two new boxes inside the home assistant esphome integration device page for your device where you can fill in an offset. Give them up to 1minute to take effect!</p> <pre><code>sensor:\n  - id: !extend scd40\n    humidity:\n      name: \"Humidity\"\n      id: \"humidity\"\n      filters:\n        - lambda: return x - id(scd40_humidity_offset).state;\n    temperature:\n      name: \"Temperature\"\n      id: \"temperature\"\n      filters:\n        - lambda: return x - id(scd40_temperature_offset).state;\nnumber:\n  - platform: template\n    name: SCD40 Humidity Offset\n    id: scd40_humidity_offset\n    restore_value: true\n    initial_value: -18.86\n    min_value: -70.0\n    max_value: 70.0\n    entity_category: \"CONFIG\"\n    unit_of_measurement: \"%\"\n    optimistic: true\n    update_interval: never\n    step: 0.1\n    mode: box\n  - platform: template\n    name: SCD40 Temperature Offset\n    id: scd40_temperature_offset\n    initial_value: 14.54\n    min_value: -70.0\n    max_value: 70.0\n    entity_category: \"CONFIG\"\n    unit_of_measurement: \"\u00b0C\"\n    optimistic: true\n    update_interval: never\n    step: 0.1\n    mode: box\n</code></pre>"},{"location":"products/mtr1/calibrating-and-updating/mtr-1-temperature-%26-humidity-offsets/#dps310-scd40-sensors-overcoming-temperature-humidity-reading-challenges","title":"DPS310 &amp; SCD40 Sensors: Overcoming Temperature &amp; Humidity Reading Challenges","text":"<p>The DPS310 and SCD40 sensors are known for their precision in measuring temperature and humidity. However, like all sensor systems, they can sometimes provide inaccurate readings due to various factors. In the case of the DPS310 and SCD40 sensors, one significant challenge arises from the heat produced by the ESP chip, which can alter the environment inside its enclosure, thereby skewing the readings.</p>"},{"location":"products/mtr1/calibrating-and-updating/mtr-1-temperature-%26-humidity-offsets/#adjusting-the-dps310-and-scd40-temperature-offset","title":"Adjusting the DPS310 and SCD40 Temperature Offset","text":"<p>For users who want to fine-tune their sensors, the DPS310 and SCD40 Temperature Offset entities can be manually adjusted to match the conditions in their home. The offset values are subtracted from the raw temperature &amp; humidity readings in the firmware to update the sensor readings in the home assistant entity. For example: scd40_temperature entity = raw scd40 temperature reading - scd40_offset.   </p> <p>By default, these offsets are preset to values based on our NIST certified thermometer, it's important to note that these values are calibrated for our environment. They might not be accurate for all settings. Therefore, by using a reference thermometer, users can adjust the difference between the readings to get a more accurate representation.   </p> <p>Users will also notice the <code>dps310_temperature_calibrated</code>, <code>scd40_humidity_calibrated</code>, and <code>scd40_temperature_calibrated</code>entities. These values utilize the linear filter in the ESPHome firmware to adjust the readings based on our collected data. Again, due to environmental differences, these might not always be precise.</p>"},{"location":"products/mtr1/calibrating-and-updating/mtr-1-temperature-%26-humidity-offsets/#modeling-the-relationship-between-sensors","title":"Modeling the Relationship Between Sensors","text":"<p>Another approach to getting accurate readings is to model the relationship between the ESP temperature and the other sensors compared against a reference temperature. This can be achieved by creating a template sensor in Home Assistant that employs a decision tree or our regression coefficients.</p> <p>Here's an example that can be added to a configuration YAML:</p> <pre><code>sensor:\n  - platform: template\n    sensors:\n      estimated_reference_temperature:\n        friendly_name: \"Estimated Temperature\"\n        unit_of_measurement: '\u00b0C'\n        value_template: &gt;\n          {{\n            0.3228 * states('sensor.apollo_msr_1_a79e24_esp_temperature') | float +\n            0.8702 * states('sensor.apollo_msr_1_a79e24_scd40_temperature') | float +\n            -0.1285 * states('sensor.apollo_msr_1_a79e24_dps310_temperature') | float +\n            -0.0491 * states('sensor.apollo_msr_1_a79e24_scd40_humidity') | float +\n            0.0851\n          }}\n\n\n      estimated_reference_humidity:\n        friendly_name: \"Estimated Humidity\"\n        unit_of_measurement: '%'\n        value_template: &gt;\n          {{\n            -1.2468 * states('sensor.apollo_msr_1_a79e24_esp_temperature') | float +\n            -2.1959 * states('sensor.apollo_msr_1_a79e24_scd40_temperature') | float +\n            2.9604 * states('sensor.apollo_msr_1_a79e24_dps310_temperature') | float +\n            0.2380 * states('sensor.apollo_msr_1_a79e24_scd40_humidity') | float +\n            1.8283\n          }}\n</code></pre> <p>For users who want to gather their own data with a reference sensor and MSR-2 within their home, we recommend logging data to a CSV using the following YAML entries:</p> <pre><code>#Configuration.yaml\nnotify:\n  - platform: file\n    name: sensor_csv_log\n    filename: /config/sensor_log.csv\n    timestamp: False\n\n#Automations.yaml\n  - id: log_sensor_data_to_csv\n    alias: \"Log Sensor Data to CSV\"\n    trigger:\n      platform: time_pattern\n      minutes: \"/1\"  # Log data every minute to match reference sensor\n    action:\n      - service: notify.sensor_csv_log\n        data_template:\n          message: &gt;\n            {{ now().strftime('%Y-%m-%d %H:%M:%S') }},\n            {{ states('sensor.apollo_msr_1_a79e24_esp_temperature') | default('NA') }},\n            {{ states('sensor.apollo_msr_1_a79e24_scd40_temperature') | default('NA') }},\n            {{ states('sensor.apollo_msr_1_a79e24_dps310_temperature') | default('NA') }},\n            {{ states('sensor.apollo_msr_1_a79e24_scd40_humidity') | default('NA') }},\n            {{ states('number.apollo_msr_1_a79e24_dps310_temperature_offset') | default('NA') }},\n            {{ states('number.apollo_msr_1_a79e24_scd40_humidity_offset') | default('NA') }},\n            {{ states('number.apollo_msr_1_a79e24_scd40_temperature_offset') | default('NA') }},\n            {{ states('sensor.apollo_msr_1_a79e24_uptime') | default('NA') }}\n</code></pre>"},{"location":"products/mtr1/calibrating-and-updating/mtr-1-temperature-%26-humidity-offsets/#the-interrelation-of-temperature-and-humidity","title":"The Interrelation of Temperature and Humidity","text":"<p>It's important to understand that temperature and humidity share an interdependent relationship. When the air temperature rises, its capacity to hold moisture increases, which can decrease relative humidity levels. Conversely, when the temperature falls, the air's capacity to hold moisture decreases, leading to increased humidity. This relationship plays a significant role in how sensors detect and interpret readings, making it even more crucial to ensure accuracy.</p>"},{"location":"products/mtr1/calibrating-and-updating/mtr-1-temperature-%26-humidity-offsets/#advanced-accuracy-with-gpio","title":"Advanced Accuracy with GPIO","text":"<p>For those seeking the highest accuracy, an advanced solution is available. The exposed mezzanine connector on the back of our Apollo boards can be utilized to connect a temperature/humidity sensor. This modification can dramatically improve both temperature and humidity readings, providing data that's as accurate as possible.</p>"},{"location":"products/mtr1/calibrating-and-updating/updating-mtr-1-firmware/","title":"Updating MTR-1 Firmware","text":""},{"location":"products/mtr1/calibrating-and-updating/updating-mtr-1-firmware/#please-refer-to-the-general-firmware-update-article","title":"Please refer to the general firmware update article","text":""},{"location":"products/mtr1/mtr-1-reviews/home-tech-innovations-mtr-1-review/","title":"Home Tech Innovations MTR-1 Review","text":""},{"location":"products/mtr1/mtr-1-reviews/home-tech-innovations-mtr-1-review/#setup-mtr-1-in-3-easy-steps","title":"Setup MTR-1 in 3 EASY Steps!","text":""},{"location":"products/mtr1/mtr-1-reviews/michael-leen-mtr-1-review/","title":"Michael Leen MTR-1 Review","text":""},{"location":"products/mtr1/mtr-1-reviews/michael-leen-mtr-1-review/#precise-presence-detection-apollo-mtr-1-multi-target-radar","title":"PRECISE Presence Detection: Apollo MTR-1 Multi-Target Radar","text":""},{"location":"products/mtr1/mtr-1-reviews/simon-says-home-assistant-mtr-1-review/","title":"Simon Says Home Assistant MTR-1 Review","text":""},{"location":"products/mtr1/mtr-1-reviews/simon-says-home-assistant-mtr-1-review/#new-apollo-mtr-1-multi-target-radar-for-home-assistant-ld2450","title":"New Apollo MTR-1 Multi-target Radar For Home Assistant (ld2450)","text":""},{"location":"products/mtr1/mtr-1-reviews/smart-home-australia-mtr-1-review/","title":"Smart Home Australia MTR-1 Review","text":""},{"location":"products/mtr1/mtr-1-reviews/smart-home-australia-mtr-1-review/#new-apollo-mtr-1-mmware-sensor-review-home-assistant-installation-dashboard-and-conclusion","title":"NEW Apollo MTR-1: mmWare sensor: Review, Home Assistant installation, dashboard and conclusion","text":""},{"location":"products/mtr1/mtr-1-reviews/smart-home-scene-mtr-1-review/","title":"Smart Home Scene MTR-1 Review","text":""},{"location":"products/mtr1/mtr-1-reviews/smart-home-scene-mtr-1-review/#apollo-mtr-1-multi-target-tracking-radar-review","title":"Apollo MTR-1: Multi-target Tracking Radar Review","text":""},{"location":"products/mtr1/mtr-1-reviews/smart-home-scene-mtr-1-review/#smart-home-scene-mtr-1-review_1","title":"Smart Home Scene MTR-1 Review","text":""},{"location":"products/plt1/calibrating-plt1/","title":"Calibrating Soil Moisture","text":"<p>This guide will take you through calibrating your PLT-1's moisture sensor. The sensors come with the default calibration so this method is only needed if you want to make your own adjustments.</p> <p> </p> <ol> <li>Take your PLT-1 out of the soil and clean off the probe. It is important to get the dirt off to have the best calibration.</li> <li>Make sure the PLT-1 probe is sitting in the air or on a dry non conductive surface and plugged in.</li> <li>Visit the device's entity drill down page in Home Assistant and scroll down to the diagnostics section. Enable the entity \"Soil ADC\"</li> <li>Give the sensor a minute for this new entity to populate</li> <li>Once the value is populated take the value and put it into the \"Dry Voltage\" entity</li> <li>Now place the prob portion of the PLT-1 into a cup of water. Be careful to not dunk the entire sensor, only the exposed PCB below \"Apollo\" and the horizontal line can be exposed to water</li> <li>Grab the \"Soil ADC\" value now and put the value into the \"100% Water Voltage\" entity</li> <li>You can put your PLT-1 back into your plant and you now have a calibrated</li> </ol>"},{"location":"products/plt1/faq/","title":"FAQ","text":"<p>1. What sensors are included in the PLT-1?</p> <p>\u2022   The PLT-1 comes with sensors to measure soil moisture, air temperature, humidity, LUX, and UV. There is also an optional DS18b20 waterproof soil temperature probe available for measuring soil temperature.</p> <p>2. How does the capacitive soil moisture sensor work?</p> <p>\u2022   The capacitive soil moisture sensor measures the water content in the soil by detecting changes in the dielectric permittivity of the soil, which is affected by moisture. It\u2019s more durable than resistive sensors because it doesn\u2019t corrode and is protected with a conformal coating.</p> <p>3. Is the PLT-1 battery-powered, or do I need to plug it in?</p> <p>\u2022   The PLT-1 comes in two versions: a battery-powered version and a non-battery (NB) version. The battery version is slightly larger due to the space needed for the battery, while the NB version is more compact.</p> <p>4. How long does the battery last in the PLT-1?</p> <p>\u2022   Battery life depends on usage and sensor update intervals. Frequent updates will reduce battery life. You can adjust the sleep and wake intervals in the ESPHome configuration to optimize battery usage.</p> <p>5. How does the optional soil temperature probe work?</p> <p>\u2022   The optional DS18b20 waterproof soil temperature probe is 20 cm / 7.8 inches long. It measures the temperature directly in the soil and can be used to monitor the conditions for specific plants that require precise temperature control for optimal growth.</p> <p>6. Is the PLT-1 weatherproof? Can I use it outdoors?</p> <p>\u2022   The PLT-1 is primarily designed for indoor use. While some components, such as the waterproof soil temperature probe, can withstand harsher environments, the main body of the sensor is not rated for outdoor use unless adequately protected.</p> <p>7. How does the PLT-1 connect to Home Assistant?</p> <p>\u2022   The PLT-1 uses WiFi to connect to your Home Assistant instance through ESPHome. Once connected, you can configure automations, monitor data, and set alerts directly in Home Assistant.</p> <p>8. What kind of automations can I set up with the PLT-1?</p> <p>\u2022   You can create automations for plant care, such as setting notifications when soil moisture is low, turning on lights when LUX readings drop below a certain level, or adjusting your HVAC system based on air temperature and humidity around your plants.</p> <p>9. How often does the PLT-1 send sensor data?</p> <p>\u2022   The update intervals for each sensor are configurable in ESPHome. For example, you can have the soil moisture sensor report every second or extend it to save battery power in the battery-powered version.</p> <p>10. Can I customize the PLT-1\u2019s functionality?</p> <p>\u2022   Yes! The PLT-1 is fully customizable through ESPHome, and the software and CAD files are available to the community. You can modify the firmware, adjust settings, and even print new cases for the sensor.</p> <p>11. What is the RGB LED and piezo buzzer used for?</p> <p>\u2022   The RGB LED can be used for visual alerts, such as changing colors based on soil moisture or plant health. The piezo buzzer can emit sounds for critical notifications, like low moisture warnings or reminders to check on your plants.</p> <p>12. What is the benefit of using the conformal coating on the soil moisture sensor?</p> <p>\u2022   The conformal coating adds an extra layer of protection to the capacitive soil moisture sensor, ensuring it lasts longer and resists environmental factors like moisture, which can degrade uncoated sensors over time.</p> <p>13. What plants are compatible with the PLT-1?</p> <p>\u2022   The PLT-1 is compatible with any indoor plants. You can use Open Plant Book in combination with Home Assistant to apply ideal care conditions (such as light, humidity, and soil moisture) for specific plants.</p> <p>14. Can I use the PLT-1 to monitor multiple plants?</p> <p>\u2022   The PLT-1 is designed to monitor a single plant\u2019s environment. For multiple plants, you would need additional sensors or move the sensor between plants as needed.</p> <p>15. What makes the PLT-1 better than other plant sensors?</p> <p>\u2022   The PLT-1 offers a highly accurate and durable capacitive soil moisture sensor, real-time data reporting, and the ability to track multiple environmental conditions in one small device. It also integrates seamlessly with Home Assistant, allowing for advanced automations and alerts.</p> <p>16. Is the PLT-1 compatible with other smart home platforms?</p> <p>\u2022   The PLT-1 is designed specifically for Home Assistant via ESPHome. While it could be compatible with other platforms through customization, its primary use is within the Home Assistant ecosystem.</p> <p>17. Do I need coding knowledge to use the PLT-1?</p> <p>\u2022   Basic knowledge of Home Assistant and ESPHome is helpful for configuring the PLT-1, but the sensor is designed to be plug-and-play for most users. Customization will require some knowledge of YAML.</p> <p>18. Can I access data from the PLT-1 remotely?</p> <p>\u2022   Yes, once connected to Home Assistant, you can access your sensor data remotely through your Home Assistant dashboard, provided your setup allows for remote access.</p> <p>19. What\u2019s the difference between the battery and non-battery versions?</p> <p>\u2022   The battery version is slightly larger and is designed for situations where a power outlet isn\u2019t nearby. The non-battery version is smaller and designed for direct connection to a power source.</p> <p>20. Can I use multiple PLT-1 sensors in one Home Assistant setup?</p> <p>\u2022   Yes, you can use multiple PLT-1 sensors simultaneously in Home Assistant. Each sensor will appear as a separate device in your dashboard, allowing you to track various plants or environments.</p>"},{"location":"products/plt1/introduction/","title":"Introduction","text":"<p>The PLT-1 is equipped with a capacitive soil moisture sensor, providing enhanced accuracy and durability over resistive alternatives. The sensor\u2019s ground contact portion is coated with a conformal layer, ensuring long-lasting performance and resistance to environmental factors. It also features an AHT20-F air temperature and humidity sensor, which includes dust protection, an LTR390 UV sensor for Lux/UV measurements, an RGB LED, a piezo buzzer, and an optional DS18b20 waterproof soil temperature probe (20 cm / 7.8 inches).</p>"},{"location":"products/plt1/reviews/","title":"Michael Leen PLT-1 Review","text":"<p>link</p>"},{"location":"products/plt1/reviews/#bearded-tinker-plt-1-review","title":"Bearded Tinker PLT-1 Review","text":"<p>link</p>"},{"location":"products/plt1/reviews/#simon-plt-1-review","title":"Simon PLT-1 Review","text":"<p>link</p>"},{"location":"products/plt1/reviews/#hands-on-katie-plt-1-review","title":"Hands On Katie PLT-1 Review","text":"<p>link</p>"},{"location":"products/plt1/reviews/#mostly-chris-plt-1-review","title":"Mostly Chris PLT-1 Review","text":"<p>link</p>"},{"location":"products/plt1/reviews/#smart-home-scene-plt-1-review","title":"Smart Home Scene PLT-1 Review","text":"<p>link</p>"},{"location":"products/plt1/reviews/#smart-home-australia-plt-1-review","title":"Smart Home Australia PLT-1 Review","text":"<p>link</p>"},{"location":"products/plt1/sensor-definitions/","title":"Sensors","text":""},{"location":"products/plt1/sensor-definitions/#ltr390-uv","title":"LTR390 UV","text":"<ul> <li>uv_index (Optional): UV index (UVI). All options from Sensor.</li> <li>uv (Optional): Sensor counts for the UV sensor (#). All options from Sensor.</li> <li>light (Optional): Lux of ambient light (lx). All options from Sensor.</li> <li>ambient_light (Optional): Sensor counts for the Ambient light sensor (#). All options from Sensor.</li> <li>gain (Optional, string): Adjusts the sensitivity of the sensor. A larger value means higher sensitivity. Default is <code>\"X18\"</code>, see table below for options.</li> <li>resolution (Optional, int): ADC resolution. Higher resolutions require longer sensor integration times. Default is <code>20</code>, see table below for options.</li> <li>window_correction_factor (Optional, float): Window correction factor. Use larger values when using under tinted windows. Default is <code>1.0</code>, must be <code>&gt;= 1.0</code>.</li> <li>address (Optional, int): Manually specify the I\u00b2C address of the sensor. Default is <code>0x53</code>.</li> <li>update_interval (Optional, Time): The interval to check the sensor. Defaults to <code>60s</code>. It is recommended that the update interval is at least 1 second since updates can take up to 800ms when using a high resolution value.</li> </ul>"},{"location":"products/plt1/sensor-definitions/#aht20-f","title":"AHT20-F","text":"<ul> <li>variant (Optional, enum): Set the variant of the device in use. Defaults to <code>AHT10</code>.</li> <li><code>AHT10</code> - For AHT10 devices.</li> <li><code>AHT20</code> - For AHT20 and AHT30 devices.</li> <li>temperature (Required): The information for the temperature sensor.</li> <li>All options from Sensor.</li> <li>humidity (Required): The information for the humidity sensor</li> <li>All options from Sensor.</li> <li>update_interval (Optional, Time): The interval to check the sensor. Defaults to <code>60s</code>.</li> </ul>"},{"location":"products/plt1/sensor-definitions/#ds18b20","title":"DS18B20","text":"<ul> <li>address (Optional, int): The address of the sensor. Required if there is more than one device on the bus.</li> <li>resolution (Optional, int): An optional resolution from 9 to 12. Higher means more accurate. Defaults to the maximum for most Dallas temperature sensors: 12.</li> <li>update_interval (Optional, Time): The interval that the sensors should be checked. Defaults to 60 seconds.</li> <li>one_wire_id (Optional, 1-Wire Bus): The ID of the 1-Wire bus to use. Required if there is more than one bus.</li> <li>All other options from Sensor.</li> </ul>"},{"location":"products/plt1/sensor-definitions/#sensor-definitions","title":"Sensor Definitions","text":""},{"location":"products/plt1/sensor-definitions/#controls","title":"Controls:","text":""},{"location":"products/plt1/sensor-definitions/#rgb-light","title":"RGB Light:","text":"<ul> <li>This allows you to control the RGB LED on the PLT-1. You can toggle it on or off directly from the ESPHome dashboard, which can be useful for creating visual alerts or indications related to plant health (e.g., turning green if everything is fine, red if moisture is too low, etc.).</li> </ul>"},{"location":"products/plt1/sensor-definitions/#sensors_1","title":"Sensors:","text":""},{"location":"products/plt1/sensor-definitions/#air-humidity-4873","title":"Air Humidity: 48.73%","text":"<ul> <li>This sensor measures the relative humidity of the air surrounding your plant. Ideal humidity levels are crucial for maintaining optimal growth conditions for indoor plants. The reading here shows 48.73%, which might be within a reasonable range depending on the plant type. Too low or too high humidity can stress the plant and affect its ability to absorb nutrients and water properly.</li> </ul>"},{"location":"products/plt1/sensor-definitions/#air-temperature-8058f","title":"Air Temperature: 80.58\u00b0F","text":"<ul> <li>This sensor monitors the air temperature around the plant. The temperature is critical to maintaining a suitable growing environment. This current reading of 80.58\u00b0F is quite warm, which might be suitable for tropical or heat-loving plants but could be a bit high for others. The ideal temperature range depends on the plant species, and you can set automations to trigger alerts if the temperature goes beyond a specified range.</li> </ul>"},{"location":"products/plt1/sensor-definitions/#ltr390-light-34-lx","title":"LTR390 Light: 3.4 lx","text":"<ul> <li>This is the light intensity sensor, measured in lux (lx). The light sensor helps you track how much light your plant is receiving. 3.4 lux indicates that the plant is currently in low light conditions, which could be fine for shade-loving plants or indicate that it\u2019s not receiving enough light. For sun-loving plants, you may need to increase light exposure.</li> </ul>"},{"location":"products/plt1/sensor-definitions/#ltr390-uv-index-000043-uvi","title":"LTR390 UV Index: 0.00043 UVI","text":"<ul> <li>This sensor measures ultraviolet light (UV Index). UV is another aspect of the light spectrum, important for photosynthesis and general plant health. The low UV Index here indicates very minimal UV radiation, which could be acceptable for most indoor plants since they usually do not require strong UV exposure. However, some plants may benefit from higher levels of UV for robust growth.</li> </ul>"},{"location":"products/plt1/sensor-definitions/#soil-moisture-59","title":"Soil Moisture: 59%","text":"<ul> <li>The soil moisture sensor measures the water content in the soil as a percentage. A reading of 59% means the soil has a moderate amount of moisture, but depending on the plant species, you may need to adjust watering. The ideal moisture level varies by plant; for instance, succulents prefer drier soil, while tropical plants may require consistently moist soil.</li> </ul>"},{"location":"products/plt1/sensor-definitions/#soil-temperature-unknown","title":"Soil Temperature: Unknown","text":"<ul> <li>This field represents the reading from the optional soil temperature probe. It currently shows as \u201cUnknown\u201d because the soil temperature probe may not be connected or is not currently returning data. Soil temperature is crucial for root health and affects the plant\u2019s ability to take up water and nutrients. This optional feature can give deeper insights into the root zone environment.</li> </ul>"},{"location":"products/plt1/sensor-definitions/#configuration","title":"Configuration:","text":""},{"location":"products/plt1/sensor-definitions/#100-water-voltage-15","title":"100% Water Voltage: 1.5","text":"<ul> <li>This setting defines the voltage that corresponds to 100% soil saturation (completely wet soil). A voltage of 1.5V is being used as the threshold for completely moist soil. This parameter can be tuned based on your plant\u2019s needs, and it\u2019s helpful in creating accurate alerts or automations when soil moisture is low.</li> </ul>"},{"location":"products/plt1/sensor-definitions/#dry-voltage-27","title":"Dry Voltage: 2.7","text":"<ul> <li>This value represents the voltage at which the soil is considered completely dry. A dry voltage of 2.7V indicates the sensor has defined this threshold for when your plant needs watering. Automations can be created to alert you when the voltage rises to this point, signaling that the soil is too dry.</li> </ul>"},{"location":"products/plt1/sensor-definitions/#run-duration-60-seconds","title":"Run Duration: 60 seconds","text":"<ul> <li>This is the amount of time the sensor remains active after a connection has been established. A run duration of 60 seconds is often enough to send all sensor data and updates before entering the sleep mode (to save energy). It\u2019s useful for battery-powered devices.</li> </ul>"},{"location":"products/plt1/sensor-definitions/#sleep-duration-5-minutes","title":"Sleep Duration: 5 minutes","text":"<ul> <li>This setting specifies how long the PLT-1 will remain in sleep mode between connection intervals. A 5-minute sleep duration is a good balance between battery life and update frequency. You can adjust this depending on how often you want the sensor to wake up and report new data.</li> </ul>"},{"location":"products/plt1/sensor-definitions/#sleep-after-connecting-enabled","title":"Sleep After Connecting: Enabled","text":"<ul> <li>This configuration means the PLT-1 will enter sleep mode after it finishes sending data during each connection. Enabling sleep mode helps conserve battery life, making it ideal for a battery-powered setup.</li> </ul>"},{"location":"products/plt1/sensor-definitions/#prevent-sleep-enabled","title":"Prevent Sleep: Enabled","text":"<ul> <li>With this option enabled, the PLT-1 will not enter sleep mode under certain conditions, ensuring continuous operation. This is useful if you want the sensor to remain active for extended periods, perhaps for monitoring changes in real-time without interruptions.</li> </ul>"},{"location":"products/plt1/sensor-definitions/#diagnostic","title":"Diagnostic:","text":""},{"location":"products/plt1/sensor-definitions/#esp-temperature-898f","title":"ESP Temperature: 89.8\u00b0F","text":"<ul> <li>The ESP module\u2019s internal temperature is displayed here. An ESP temperature of 89.8\u00b0F could be a result of the WiFi module being continuously active. While this might not directly impact plant health, it\u2019s useful to monitor as it can affect the accuracy of nearby temperature sensors.</li> </ul>"},{"location":"products/plt1/sensor-definitions/#status-online","title":"Status: Online","text":"<ul> <li>This confirms that the PLT-1 is currently online and connected to the WiFi network, communicating with Home Assistant.</li> </ul>"},{"location":"products/plt1/sensor-definitions/#rssi-56-dbm","title":"RSSI: -56 dBm","text":"<ul> <li>The Received Signal Strength Indicator (RSSI) shows the strength of the WiFi signal. A reading of -56 dBm is fairly decent, indicating that the PLT-1 has a strong enough connection to the WiFi router. Lower RSSI values (closer to zero) represent better signal strength.</li> </ul>"},{"location":"products/plt1/sensor-definitions/#uptime-13-hours-37-minutes","title":"Uptime: 13 hours 37 minutes","text":"<ul> <li>This shows how long the PLT-1 has been running continuously since its last reboot or power-up. An uptime of 13 hours and 37 minutes indicates that the device has been stable and working for a decent period without any issues.</li> </ul>"},{"location":"products/plt1/examples/flower-card/","title":"Flower Card","text":"<p>Home Assistant Plant IntegrationThis integration can automatically fetch data from OpenPlantBook if you are a registered user. Registration is free.Plants are set up in the UI and all configuration of your plants can be managed there or by automations and scripts.</p> <p>Open Plant Book IntegrationThis integration allows fetching plants information from and uploading plant sensors' data to OpenPlantBook. It creates a few service calls in Home Assistant to interact with OpenPlantbook API which are:</p> <ul> <li>Search plant</li> <li>Get plant details</li> <li>Upload plants sensors data</li> </ul> <p>This is used as a base for the sister-integration https://github.com/Olen/homeassistant-plant which utilizes this API to add threshold values for such as moisture, temperature, conductivity etc. based on the plant species.</p> <p>Flower Card GitHub</p> <p>Flower Card Code</p> <pre><code>type: custom:flower-card\nentity: plant.my_plant\nshow_bars:\n- illuminance\n- humidity\n- moisture\n- temperature\nbattery_sensor: sensor.demo_battery\n</code></pre>"}]}